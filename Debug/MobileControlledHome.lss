
MobileControlledHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003802  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002ae  00800060  00003802  00003896  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080030e  0080030e  00003b44  2**0
                  ALLOC
  3 .stab         00002cdc  00000000  00000000  00003b44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e44  00000000  00000000  00006820  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008664  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00008804  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000089f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000ae01  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000c187  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d360  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000d520  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000d816  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e184  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 30       	cpi	r26, 0x0E	; 14
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	ae e0       	ldi	r26, 0x0E	; 14
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 31       	cpi	r26, 0x10	; 16
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <main>
      8a:	0c 94 ff 1b 	jmp	0x37fe	; 0x37fe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c6 18 	jmp	0x318c	; 0x318c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac ef       	ldi	r26, 0xFC	; 252
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e2 18 	jmp	0x31c4	; 0x31c4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d2 18 	jmp	0x31a4	; 0x31a4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d2 18 	jmp	0x31a4	; 0x31a4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c6 18 	jmp	0x318c	; 0x318c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c ef       	ldi	r24, 0xFC	; 252
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e2 18 	jmp	0x31c4	; 0x31c4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c ef       	ldi	r22, 0xFC	; 252
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ea 18 	jmp	0x31d4	; 0x31d4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d2 18 	jmp	0x31a4	; 0x31a4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d2 18 	jmp	0x31a4	; 0x31a4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d2 18 	jmp	0x31a4	; 0x31a4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d6 18 	jmp	0x31ac	; 0x31ac <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 f2 18 	jmp	0x31e4	; 0x31e4 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 ea 18 	jmp	0x31d4	; 0x31d4 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ec 5f       	subi	r30, 0xFC	; 252
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_init>:
#include "UART.h"
#include "math.h"
#include "avr/io.h"


void UART_init(u16 baudrate) {
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <UART_init+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <UART_init+0x8>
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	9c 83       	std	Y+4, r25	; 0x04
     e3c:	8b 83       	std	Y+3, r24	; 0x03
u16 baud= (F_CPU/(8.0*baudrate)) - 1;
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	9c 81       	ldd	r25, Y+4	; 0x04
     e42:	cc 01       	movw	r24, r24
     e44:	a0 e0       	ldi	r26, 0x00	; 0
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	bc 01       	movw	r22, r24
     e4a:	cd 01       	movw	r24, r26
     e4c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	bc 01       	movw	r22, r24
     e56:	cd 01       	movw	r24, r26
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	40 e0       	ldi	r20, 0x00	; 0
     e5e:	51 e4       	ldi	r21, 0x41	; 65
     e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e64:	dc 01       	movw	r26, r24
     e66:	cb 01       	movw	r24, r22
     e68:	9c 01       	movw	r18, r24
     e6a:	ad 01       	movw	r20, r26
     e6c:	60 e0       	ldi	r22, 0x00	; 0
     e6e:	74 e2       	ldi	r23, 0x24	; 36
     e70:	84 ef       	ldi	r24, 0xF4	; 244
     e72:	9a e4       	ldi	r25, 0x4A	; 74
     e74:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     e78:	dc 01       	movw	r26, r24
     e7a:	cb 01       	movw	r24, r22
     e7c:	bc 01       	movw	r22, r24
     e7e:	cd 01       	movw	r24, r26
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	40 e8       	ldi	r20, 0x80	; 128
     e86:	5f e3       	ldi	r21, 0x3F	; 63
     e88:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     e8c:	dc 01       	movw	r26, r24
     e8e:	cb 01       	movw	r24, r22
     e90:	bc 01       	movw	r22, r24
     e92:	cd 01       	movw	r24, r26
     e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e98:	dc 01       	movw	r26, r24
     e9a:	cb 01       	movw	r24, r22
     e9c:	9a 83       	std	Y+2, r25	; 0x02
     e9e:	89 83       	std	Y+1, r24	; 0x01

UBRRL = (u8) baud;
     ea0:	e9 e2       	ldi	r30, 0x29	; 41
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	80 83       	st	Z, r24
UBRRH = (baud>>8);
     ea8:	e0 e4       	ldi	r30, 0x40	; 64
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	9a 81       	ldd	r25, Y+2	; 0x02
     eb0:	89 2f       	mov	r24, r25
     eb2:	99 27       	eor	r25, r25
     eb4:	80 83       	st	Z, r24

// double speed enable
SET_BIT(UCSRA,1);
     eb6:	ab e2       	ldi	r26, 0x2B	; 43
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	eb e2       	ldi	r30, 0x2B	; 43
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	82 60       	ori	r24, 0x02	; 2
     ec2:	8c 93       	st	X, r24

// to ensure that register is zero
UCSRB = 0x00;
     ec4:	ea e2       	ldi	r30, 0x2A	; 42
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	10 82       	st	Z, r1
// enable TX in uart
SET_BIT(UCSRB,3);
     eca:	aa e2       	ldi	r26, 0x2A	; 42
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	ea e2       	ldi	r30, 0x2A	; 42
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	88 60       	ori	r24, 0x08	; 8
     ed6:	8c 93       	st	X, r24

// enable RX in uart
SET_BIT(UCSRB,4);
     ed8:	aa e2       	ldi	r26, 0x2A	; 42
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	ea e2       	ldi	r30, 0x2A	; 42
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	80 61       	ori	r24, 0x10	; 16
     ee4:	8c 93       	st	X, r24

UCSRC = 0x00;
     ee6:	e0 e4       	ldi	r30, 0x40	; 64
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	10 82       	st	Z, r1
//enable to wirte in UCSRC
SET_BIT(UCSRC,7);
     eec:	a0 e4       	ldi	r26, 0x40	; 64
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e0 e4       	ldi	r30, 0x40	; 64
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	80 68       	ori	r24, 0x80	; 128
     ef8:	8c 93       	st	X, r24

//select 8-bit mode
SET_BIT(UCSRC,2);
     efa:	a0 e4       	ldi	r26, 0x40	; 64
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e0 e4       	ldi	r30, 0x40	; 64
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	84 60       	ori	r24, 0x04	; 4
     f06:	8c 93       	st	X, r24
SET_BIT(UCSRC,1);
     f08:	a0 e4       	ldi	r26, 0x40	; 64
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	e0 e4       	ldi	r30, 0x40	; 64
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	82 60       	ori	r24, 0x02	; 2
     f14:	8c 93       	st	X, r24


}
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <UART_write>:
void UART_write(u8 data) {
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	0f 92       	push	r0
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
     f2e:	89 83       	std	Y+1, r24	; 0x01

	while(GET_BIT_VALUE(UCSRA,5) == 0);
     f30:	eb e2       	ldi	r30, 0x2B	; 43
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	88 2f       	mov	r24, r24
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	80 72       	andi	r24, 0x20	; 32
     f3c:	90 70       	andi	r25, 0x00	; 0
     f3e:	95 95       	asr	r25
     f40:	87 95       	ror	r24
     f42:	95 95       	asr	r25
     f44:	87 95       	ror	r24
     f46:	95 95       	asr	r25
     f48:	87 95       	ror	r24
     f4a:	95 95       	asr	r25
     f4c:	87 95       	ror	r24
     f4e:	95 95       	asr	r25
     f50:	87 95       	ror	r24
     f52:	00 97       	sbiw	r24, 0x00	; 0
     f54:	69 f3       	breq	.-38     	; 0xf30 <UART_write+0xc>
	UDR = data;
     f56:	ec e2       	ldi	r30, 0x2C	; 44
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	80 83       	st	Z, r24
}
     f5e:	0f 90       	pop	r0
     f60:	cf 91       	pop	r28
     f62:	df 91       	pop	r29
     f64:	08 95       	ret

00000f66 <UART_read>:

u8 UART_read(void) {
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
	while (GET_BIT_VALUE(UCSRA,7) == 0);
     f6e:	eb e2       	ldi	r30, 0x2B	; 43
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	88 1f       	adc	r24, r24
     f76:	88 27       	eor	r24, r24
     f78:	88 1f       	adc	r24, r24
     f7a:	88 2f       	mov	r24, r24
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	90 70       	andi	r25, 0x00	; 0
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	a9 f3       	breq	.-22     	; 0xf6e <UART_read+0x8>
	return UDR;
     f84:	ec e2       	ldi	r30, 0x2C	; 44
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
}
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <UART_Print>:

void UART_Print(char* Str)
{
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	00 d0       	rcall	.+0      	; 0xf96 <UART_Print+0x6>
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
     f9a:	9a 83       	std	Y+2, r25	; 0x02
     f9c:	89 83       	std	Y+1, r24	; 0x01
     f9e:	0a c0       	rjmp	.+20     	; 0xfb4 <UART_Print+0x24>
	while(*Str)
	{
		UART_write(*Str);
     fa0:	e9 81       	ldd	r30, Y+1	; 0x01
     fa2:	fa 81       	ldd	r31, Y+2	; 0x02
     fa4:	80 81       	ld	r24, Z
     fa6:	0e 94 92 07 	call	0xf24	; 0xf24 <UART_write>
		Str++;
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
     fae:	01 96       	adiw	r24, 0x01	; 1
     fb0:	9a 83       	std	Y+2, r25	; 0x02
     fb2:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void UART_Print(char* Str)
{
	while(*Str)
     fb4:	e9 81       	ldd	r30, Y+1	; 0x01
     fb6:	fa 81       	ldd	r31, Y+2	; 0x02
     fb8:	80 81       	ld	r24, Z
     fba:	88 23       	and	r24, r24
     fbc:	89 f7       	brne	.-30     	; 0xfa0 <UART_Print+0x10>
	{
		UART_write(*Str);
		Str++;
	}
}
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	08 95       	ret

00000fc8 <Timer0_Start>:
#define TCNT0_Reg *((volatile u8*)0x52)
#define OCR0_Reg *((volatile u8*)0x5C)
#define TIMSK_Reg *((volatile u8*)0x59)
#define TIFR_Reg *((volatile u8*)0x58)

void Timer0_Start(TIMER0_Config_t configt) {
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	00 d0       	rcall	.+0      	; 0xfce <Timer0_Start+0x6>
     fce:	00 d0       	rcall	.+0      	; 0xfd0 <Timer0_Start+0x8>
     fd0:	0f 92       	push	r0
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	49 83       	std	Y+1, r20	; 0x01
     fd8:	5a 83       	std	Y+2, r21	; 0x02
     fda:	6b 83       	std	Y+3, r22	; 0x03
     fdc:	7c 83       	std	Y+4, r23	; 0x04
     fde:	8d 83       	std	Y+5, r24	; 0x05
	TCCR0_Reg = 0x00;
     fe0:	e3 e5       	ldi	r30, 0x53	; 83
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	10 82       	st	Z, r1
	TCCR0_Reg |= configt.prescale;
     fe6:	a3 e5       	ldi	r26, 0x53	; 83
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e3 e5       	ldi	r30, 0x53	; 83
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	90 81       	ld	r25, Z
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	89 2b       	or	r24, r25
     ff4:	8c 93       	st	X, r24
	// non_pwm mode
	SET_BIT(TCCR0_Reg, 7);
     ff6:	a3 e5       	ldi	r26, 0x53	; 83
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e3 e5       	ldi	r30, 0x53	; 83
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	80 68       	ori	r24, 0x80	; 128
    1002:	8c 93       	st	X, r24
	if (configt.mode == NORMAL) {
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	88 23       	and	r24, r24
    1008:	59 f4       	brne	.+22     	; 0x1020 <Timer0_Start+0x58>

		if (configt.Is_interrupt == INT_EN) {
    100a:	8c 81       	ldd	r24, Y+4	; 0x04
    100c:	81 30       	cpi	r24, 0x01	; 1
    100e:	69 f5       	brne	.+90     	; 0x106a <Timer0_Start+0xa2>
			// enable overflow interrupt
			SET_BIT(TIMSK_Reg, 0);
    1010:	a9 e5       	ldi	r26, 0x59	; 89
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e9 e5       	ldi	r30, 0x59	; 89
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	81 60       	ori	r24, 0x01	; 1
    101c:	8c 93       	st	X, r24
    101e:	25 c0       	rjmp	.+74     	; 0x106a <Timer0_Start+0xa2>
		}

	} else if (configt.mode == CTC) {
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	81 30       	cpi	r24, 0x01	; 1
    1024:	11 f5       	brne	.+68     	; 0x106a <Timer0_Start+0xa2>
		if (configt.Is_interrupt == INT_EN) {
    1026:	8c 81       	ldd	r24, Y+4	; 0x04
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	39 f4       	brne	.+14     	; 0x103a <Timer0_Start+0x72>
			// enable CTC interrupt
			SET_BIT(TIMSK_Reg, 1);
    102c:	a9 e5       	ldi	r26, 0x59	; 89
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e9 e5       	ldi	r30, 0x59	; 89
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	82 60       	ori	r24, 0x02	; 2
    1038:	8c 93       	st	X, r24
		}
		// enable mode CTC
		SET_BIT(TCCR0_Reg, 3);
    103a:	a3 e5       	ldi	r26, 0x53	; 83
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e3 e5       	ldi	r30, 0x53	; 83
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	88 60       	ori	r24, 0x08	; 8
    1046:	8c 93       	st	X, r24
		// set oc0 mode
		TCCR0_Reg |= (configt.OC0 << 4);
    1048:	a3 e5       	ldi	r26, 0x53	; 83
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e3 e5       	ldi	r30, 0x53	; 83
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	28 2f       	mov	r18, r24
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	88 2f       	mov	r24, r24
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	82 95       	swap	r24
    105c:	92 95       	swap	r25
    105e:	90 7f       	andi	r25, 0xF0	; 240
    1060:	98 27       	eor	r25, r24
    1062:	80 7f       	andi	r24, 0xF0	; 240
    1064:	98 27       	eor	r25, r24
    1066:	82 2b       	or	r24, r18
    1068:	8c 93       	st	X, r24
	} else {

	}
	// set the inital value of tcnt0
	TCNT0_Reg = configt.timer_init_value;
    106a:	e2 e5       	ldi	r30, 0x52	; 82
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	8d 81       	ldd	r24, Y+5	; 0x05
    1070:	80 83       	st	Z, r24

}
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	08 95       	ret

00001082 <Timer0_Set_OCR>:


void Timer0_Set_OCR(u8 valueC)
{
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	0f 92       	push	r0
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	89 83       	std	Y+1, r24	; 0x01
	OCR0_Reg = valueC;
    108e:	ec e5       	ldi	r30, 0x5C	; 92
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	80 83       	st	Z, r24
}
    1096:	0f 90       	pop	r0
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <Timer0_Stop>:

void Timer0_Stop(void)
{
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
	TCCR0_Reg = 0x00;
    10a6:	e3 e5       	ldi	r30, 0x53	; 83
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	10 82       	st	Z, r1
}
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	08 95       	ret

000010b2 <PWM_init>:

#include "PWM.h"
#include "avr/io.h"
#include "math.h"
void PWM_init(u16 top)
{
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <PWM_init+0x6>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	9a 83       	std	Y+2, r25	; 0x02
    10be:	89 83       	std	Y+1, r24	; 0x01
	//set prescaler with 1024
	SET_BIT(TCCR1B,0);
    10c0:	ae e4       	ldi	r26, 0x4E	; 78
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	ee e4       	ldi	r30, 0x4E	; 78
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	81 60       	ori	r24, 0x01	; 1
    10cc:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,2);
    10ce:	ae e4       	ldi	r26, 0x4E	; 78
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	ee e4       	ldi	r30, 0x4E	; 78
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	84 60       	ori	r24, 0x04	; 4
    10da:	8c 93       	st	X, r24

	//set mode with fast PWM -- top ICR1
	CLEAR_BIT(TCCR1A,0);
    10dc:	af e4       	ldi	r26, 0x4F	; 79
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	ef e4       	ldi	r30, 0x4F	; 79
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	8e 7f       	andi	r24, 0xFE	; 254
    10e8:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,1);
    10ea:	af e4       	ldi	r26, 0x4F	; 79
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	ef e4       	ldi	r30, 0x4F	; 79
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	82 60       	ori	r24, 0x02	; 2
    10f6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,3);
    10f8:	ae e4       	ldi	r26, 0x4E	; 78
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	ee e4       	ldi	r30, 0x4E	; 78
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	88 60       	ori	r24, 0x08	; 8
    1104:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,4);
    1106:	ae e4       	ldi	r26, 0x4E	; 78
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	ee e4       	ldi	r30, 0x4E	; 78
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	80 61       	ori	r24, 0x10	; 16
    1112:	8c 93       	st	X, r24

	//clear FOC1A due to pwm mode
	CLEAR_BIT(TCCR1A,3);
    1114:	af e4       	ldi	r26, 0x4F	; 79
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	ef e4       	ldi	r30, 0x4F	; 79
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	87 7f       	andi	r24, 0xF7	; 247
    1120:	8c 93       	st	X, r24

	//set OC1A as non inverted
	CLEAR_BIT(TCCR1A,6);
    1122:	af e4       	ldi	r26, 0x4F	; 79
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	ef e4       	ldi	r30, 0x4F	; 79
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	8f 7b       	andi	r24, 0xBF	; 191
    112e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,7);
    1130:	af e4       	ldi	r26, 0x4F	; 79
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	ef e4       	ldi	r30, 0x4F	; 79
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	80 68       	ori	r24, 0x80	; 128
    113c:	8c 93       	st	X, r24
	 *    /  |
	 *  /    |
	  /      |
	  --------
	 */
	ICR1 = top;
    113e:	e6 e4       	ldi	r30, 0x46	; 70
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	9a 81       	ldd	r25, Y+2	; 0x02
    1146:	91 83       	std	Z+1, r25	; 0x01
    1148:	80 83       	st	Z, r24
	TCNT1 = 0x0000;
    114a:	ec e4       	ldi	r30, 0x4C	; 76
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	11 82       	std	Z+1, r1	; 0x01
    1150:	10 82       	st	Z, r1

}
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <PWM_set_Duty>:
void PWM_set_Duty(u16 value)
{
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	00 d0       	rcall	.+0      	; 0x1162 <PWM_set_Duty+0x6>
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
    1166:	9a 83       	std	Y+2, r25	; 0x02
    1168:	89 83       	std	Y+1, r24	; 0x01
OCR1A = value;
    116a:	ea e4       	ldi	r30, 0x4A	; 74
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	9a 81       	ldd	r25, Y+2	; 0x02
    1172:	91 83       	std	Z+1, r25	; 0x01
    1174:	80 83       	st	Z, r24
}
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <DIO_SET_PIN_DIR>:
/* Group D Registers */
#define PORTD_Register  *((volatile u8*)0x32)
#define DDRD_Register   *((volatile u8*)0x31)
#define PIND_Register   *((volatile u8*)0x30)

void DIO_SET_PIN_DIR(Group_t GROUPID, PIN_Num_t PIN_NUM, PIN_MODE_t PINMODE) {
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	27 97       	sbiw	r28, 0x07	; 7
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	89 83       	std	Y+1, r24	; 0x01
    1196:	6a 83       	std	Y+2, r22	; 0x02
    1198:	4b 83       	std	Y+3, r20	; 0x03
	if (PINMODE == OUTPUT) {
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	81 30       	cpi	r24, 0x01	; 1
    119e:	09 f0       	breq	.+2      	; 0x11a2 <DIO_SET_PIN_DIR+0x22>
    11a0:	6f c0       	rjmp	.+222    	; 0x1280 <DIO_SET_PIN_DIR+0x100>
		switch (GROUPID) {
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	3f 83       	std	Y+7, r19	; 0x07
    11aa:	2e 83       	std	Y+6, r18	; 0x06
    11ac:	8e 81       	ldd	r24, Y+6	; 0x06
    11ae:	9f 81       	ldd	r25, Y+7	; 0x07
    11b0:	81 30       	cpi	r24, 0x01	; 1
    11b2:	91 05       	cpc	r25, r1
    11b4:	49 f1       	breq	.+82     	; 0x1208 <DIO_SET_PIN_DIR+0x88>
    11b6:	2e 81       	ldd	r18, Y+6	; 0x06
    11b8:	3f 81       	ldd	r19, Y+7	; 0x07
    11ba:	22 30       	cpi	r18, 0x02	; 2
    11bc:	31 05       	cpc	r19, r1
    11be:	2c f4       	brge	.+10     	; 0x11ca <DIO_SET_PIN_DIR+0x4a>
    11c0:	8e 81       	ldd	r24, Y+6	; 0x06
    11c2:	9f 81       	ldd	r25, Y+7	; 0x07
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	61 f0       	breq	.+24     	; 0x11e0 <DIO_SET_PIN_DIR+0x60>
    11c8:	d2 c0       	rjmp	.+420    	; 0x136e <DIO_SET_PIN_DIR+0x1ee>
    11ca:	2e 81       	ldd	r18, Y+6	; 0x06
    11cc:	3f 81       	ldd	r19, Y+7	; 0x07
    11ce:	22 30       	cpi	r18, 0x02	; 2
    11d0:	31 05       	cpc	r19, r1
    11d2:	71 f1       	breq	.+92     	; 0x1230 <DIO_SET_PIN_DIR+0xb0>
    11d4:	8e 81       	ldd	r24, Y+6	; 0x06
    11d6:	9f 81       	ldd	r25, Y+7	; 0x07
    11d8:	83 30       	cpi	r24, 0x03	; 3
    11da:	91 05       	cpc	r25, r1
    11dc:	e9 f1       	breq	.+122    	; 0x1258 <DIO_SET_PIN_DIR+0xd8>
    11de:	c7 c0       	rjmp	.+398    	; 0x136e <DIO_SET_PIN_DIR+0x1ee>
		case GROUPA:
			SET_BIT(DDRA_Register, PIN_NUM);
    11e0:	aa e3       	ldi	r26, 0x3A	; 58
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	ea e3       	ldi	r30, 0x3A	; 58
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	48 2f       	mov	r20, r24
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 2e       	mov	r0, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <DIO_SET_PIN_DIR+0x7e>
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	0a 94       	dec	r0
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <DIO_SET_PIN_DIR+0x7a>
    1202:	84 2b       	or	r24, r20
    1204:	8c 93       	st	X, r24
    1206:	b3 c0       	rjmp	.+358    	; 0x136e <DIO_SET_PIN_DIR+0x1ee>
			break;
		case GROUPB:
			SET_BIT(DDRB_Register, PIN_NUM);
    1208:	a7 e3       	ldi	r26, 0x37	; 55
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	e7 e3       	ldi	r30, 0x37	; 55
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	48 2f       	mov	r20, r24
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	02 2e       	mov	r0, r18
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <DIO_SET_PIN_DIR+0xa6>
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	0a 94       	dec	r0
    1228:	e2 f7       	brpl	.-8      	; 0x1222 <DIO_SET_PIN_DIR+0xa2>
    122a:	84 2b       	or	r24, r20
    122c:	8c 93       	st	X, r24
    122e:	9f c0       	rjmp	.+318    	; 0x136e <DIO_SET_PIN_DIR+0x1ee>
			break;
		case GROUPC:
			SET_BIT(DDRC_Register, PIN_NUM);
    1230:	a4 e3       	ldi	r26, 0x34	; 52
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e4 e3       	ldi	r30, 0x34	; 52
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	48 2f       	mov	r20, r24
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	02 2e       	mov	r0, r18
    1248:	02 c0       	rjmp	.+4      	; 0x124e <DIO_SET_PIN_DIR+0xce>
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	0a 94       	dec	r0
    1250:	e2 f7       	brpl	.-8      	; 0x124a <DIO_SET_PIN_DIR+0xca>
    1252:	84 2b       	or	r24, r20
    1254:	8c 93       	st	X, r24
    1256:	8b c0       	rjmp	.+278    	; 0x136e <DIO_SET_PIN_DIR+0x1ee>
			break;
		case GROUPD:
			SET_BIT(DDRD_Register, PIN_NUM);
    1258:	a1 e3       	ldi	r26, 0x31	; 49
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e1 e3       	ldi	r30, 0x31	; 49
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	48 2f       	mov	r20, r24
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 2e       	mov	r0, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <DIO_SET_PIN_DIR+0xf6>
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	0a 94       	dec	r0
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <DIO_SET_PIN_DIR+0xf2>
    127a:	84 2b       	or	r24, r20
    127c:	8c 93       	st	X, r24
    127e:	77 c0       	rjmp	.+238    	; 0x136e <DIO_SET_PIN_DIR+0x1ee>
			break;
		}
	} else if (PINMODE == INPUT) {
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	88 23       	and	r24, r24
    1284:	09 f0       	breq	.+2      	; 0x1288 <DIO_SET_PIN_DIR+0x108>
    1286:	73 c0       	rjmp	.+230    	; 0x136e <DIO_SET_PIN_DIR+0x1ee>
		switch (GROUPID) {
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	3d 83       	std	Y+5, r19	; 0x05
    1290:	2c 83       	std	Y+4, r18	; 0x04
    1292:	8c 81       	ldd	r24, Y+4	; 0x04
    1294:	9d 81       	ldd	r25, Y+5	; 0x05
    1296:	81 30       	cpi	r24, 0x01	; 1
    1298:	91 05       	cpc	r25, r1
    129a:	59 f1       	breq	.+86     	; 0x12f2 <DIO_SET_PIN_DIR+0x172>
    129c:	2c 81       	ldd	r18, Y+4	; 0x04
    129e:	3d 81       	ldd	r19, Y+5	; 0x05
    12a0:	22 30       	cpi	r18, 0x02	; 2
    12a2:	31 05       	cpc	r19, r1
    12a4:	2c f4       	brge	.+10     	; 0x12b0 <DIO_SET_PIN_DIR+0x130>
    12a6:	8c 81       	ldd	r24, Y+4	; 0x04
    12a8:	9d 81       	ldd	r25, Y+5	; 0x05
    12aa:	00 97       	sbiw	r24, 0x00	; 0
    12ac:	69 f0       	breq	.+26     	; 0x12c8 <DIO_SET_PIN_DIR+0x148>
    12ae:	5f c0       	rjmp	.+190    	; 0x136e <DIO_SET_PIN_DIR+0x1ee>
    12b0:	2c 81       	ldd	r18, Y+4	; 0x04
    12b2:	3d 81       	ldd	r19, Y+5	; 0x05
    12b4:	22 30       	cpi	r18, 0x02	; 2
    12b6:	31 05       	cpc	r19, r1
    12b8:	89 f1       	breq	.+98     	; 0x131c <DIO_SET_PIN_DIR+0x19c>
    12ba:	8c 81       	ldd	r24, Y+4	; 0x04
    12bc:	9d 81       	ldd	r25, Y+5	; 0x05
    12be:	83 30       	cpi	r24, 0x03	; 3
    12c0:	91 05       	cpc	r25, r1
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <DIO_SET_PIN_DIR+0x146>
    12c4:	40 c0       	rjmp	.+128    	; 0x1346 <DIO_SET_PIN_DIR+0x1c6>
    12c6:	53 c0       	rjmp	.+166    	; 0x136e <DIO_SET_PIN_DIR+0x1ee>
		case GROUPA:
			CLEAR_BIT(DDRA_Register, PIN_NUM);
    12c8:	aa e3       	ldi	r26, 0x3A	; 58
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	ea e3       	ldi	r30, 0x3A	; 58
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	48 2f       	mov	r20, r24
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	02 2e       	mov	r0, r18
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <DIO_SET_PIN_DIR+0x166>
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	0a 94       	dec	r0
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <DIO_SET_PIN_DIR+0x162>
    12ea:	80 95       	com	r24
    12ec:	84 23       	and	r24, r20
    12ee:	8c 93       	st	X, r24
    12f0:	3e c0       	rjmp	.+124    	; 0x136e <DIO_SET_PIN_DIR+0x1ee>
			break;
		case GROUPB:
			CLEAR_BIT(DDRB_Register, PIN_NUM);
    12f2:	a7 e3       	ldi	r26, 0x37	; 55
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e7 e3       	ldi	r30, 0x37	; 55
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	48 2f       	mov	r20, r24
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	02 2e       	mov	r0, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <DIO_SET_PIN_DIR+0x190>
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	0a 94       	dec	r0
    1312:	e2 f7       	brpl	.-8      	; 0x130c <DIO_SET_PIN_DIR+0x18c>
    1314:	80 95       	com	r24
    1316:	84 23       	and	r24, r20
    1318:	8c 93       	st	X, r24
    131a:	29 c0       	rjmp	.+82     	; 0x136e <DIO_SET_PIN_DIR+0x1ee>
			break;
		case GROUPC:
			CLEAR_BIT(DDRC_Register, PIN_NUM);
    131c:	a4 e3       	ldi	r26, 0x34	; 52
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e4 e3       	ldi	r30, 0x34	; 52
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	48 2f       	mov	r20, r24
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	02 2e       	mov	r0, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <DIO_SET_PIN_DIR+0x1ba>
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	0a 94       	dec	r0
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <DIO_SET_PIN_DIR+0x1b6>
    133e:	80 95       	com	r24
    1340:	84 23       	and	r24, r20
    1342:	8c 93       	st	X, r24
    1344:	14 c0       	rjmp	.+40     	; 0x136e <DIO_SET_PIN_DIR+0x1ee>
			break;
		case GROUPD:
			CLEAR_BIT(DDRD_Register, PIN_NUM);
    1346:	a1 e3       	ldi	r26, 0x31	; 49
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e1 e3       	ldi	r30, 0x31	; 49
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	48 2f       	mov	r20, r24
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	02 2e       	mov	r0, r18
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <DIO_SET_PIN_DIR+0x1e4>
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	0a 94       	dec	r0
    1366:	e2 f7       	brpl	.-8      	; 0x1360 <DIO_SET_PIN_DIR+0x1e0>
    1368:	80 95       	com	r24
    136a:	84 23       	and	r24, r20
    136c:	8c 93       	st	X, r24
			break;
		}
	} else {
		//		#warning ("the input is not acceptable")
	}
}
    136e:	27 96       	adiw	r28, 0x07	; 7
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	f8 94       	cli
    1374:	de bf       	out	0x3e, r29	; 62
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	cd bf       	out	0x3d, r28	; 61
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	08 95       	ret

00001380 <DIO_SET_PIN_VALUE>:
void DIO_SET_PIN_VALUE(Group_t GROUPID, PIN_Num_t PIN_NUM, PIN_OUTPUT_t PINLEVEL) {
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	27 97       	sbiw	r28, 0x07	; 7
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
    1394:	89 83       	std	Y+1, r24	; 0x01
    1396:	6a 83       	std	Y+2, r22	; 0x02
    1398:	4b 83       	std	Y+3, r20	; 0x03
	if (PINLEVEL == HIGH) {
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	81 30       	cpi	r24, 0x01	; 1
    139e:	09 f0       	breq	.+2      	; 0x13a2 <DIO_SET_PIN_VALUE+0x22>
    13a0:	6f c0       	rjmp	.+222    	; 0x1480 <DIO_SET_PIN_VALUE+0x100>
		switch (GROUPID) {
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	3f 83       	std	Y+7, r19	; 0x07
    13aa:	2e 83       	std	Y+6, r18	; 0x06
    13ac:	8e 81       	ldd	r24, Y+6	; 0x06
    13ae:	9f 81       	ldd	r25, Y+7	; 0x07
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	91 05       	cpc	r25, r1
    13b4:	49 f1       	breq	.+82     	; 0x1408 <DIO_SET_PIN_VALUE+0x88>
    13b6:	2e 81       	ldd	r18, Y+6	; 0x06
    13b8:	3f 81       	ldd	r19, Y+7	; 0x07
    13ba:	22 30       	cpi	r18, 0x02	; 2
    13bc:	31 05       	cpc	r19, r1
    13be:	2c f4       	brge	.+10     	; 0x13ca <DIO_SET_PIN_VALUE+0x4a>
    13c0:	8e 81       	ldd	r24, Y+6	; 0x06
    13c2:	9f 81       	ldd	r25, Y+7	; 0x07
    13c4:	00 97       	sbiw	r24, 0x00	; 0
    13c6:	61 f0       	breq	.+24     	; 0x13e0 <DIO_SET_PIN_VALUE+0x60>
    13c8:	d2 c0       	rjmp	.+420    	; 0x156e <DIO_SET_PIN_VALUE+0x1ee>
    13ca:	2e 81       	ldd	r18, Y+6	; 0x06
    13cc:	3f 81       	ldd	r19, Y+7	; 0x07
    13ce:	22 30       	cpi	r18, 0x02	; 2
    13d0:	31 05       	cpc	r19, r1
    13d2:	71 f1       	breq	.+92     	; 0x1430 <DIO_SET_PIN_VALUE+0xb0>
    13d4:	8e 81       	ldd	r24, Y+6	; 0x06
    13d6:	9f 81       	ldd	r25, Y+7	; 0x07
    13d8:	83 30       	cpi	r24, 0x03	; 3
    13da:	91 05       	cpc	r25, r1
    13dc:	e9 f1       	breq	.+122    	; 0x1458 <DIO_SET_PIN_VALUE+0xd8>
    13de:	c7 c0       	rjmp	.+398    	; 0x156e <DIO_SET_PIN_VALUE+0x1ee>
		case GROUPA:
			SET_BIT(PORTA_Register, PIN_NUM);
    13e0:	ab e3       	ldi	r26, 0x3B	; 59
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	eb e3       	ldi	r30, 0x3B	; 59
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 2e       	mov	r0, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <DIO_SET_PIN_VALUE+0x7e>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	0a 94       	dec	r0
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <DIO_SET_PIN_VALUE+0x7a>
    1402:	84 2b       	or	r24, r20
    1404:	8c 93       	st	X, r24
    1406:	b3 c0       	rjmp	.+358    	; 0x156e <DIO_SET_PIN_VALUE+0x1ee>
			break;
		case GROUPB:
			SET_BIT(PORTB_Register, PIN_NUM);
    1408:	a8 e3       	ldi	r26, 0x38	; 56
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e8 e3       	ldi	r30, 0x38	; 56
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	48 2f       	mov	r20, r24
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	02 2e       	mov	r0, r18
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <DIO_SET_PIN_VALUE+0xa6>
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	0a 94       	dec	r0
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <DIO_SET_PIN_VALUE+0xa2>
    142a:	84 2b       	or	r24, r20
    142c:	8c 93       	st	X, r24
    142e:	9f c0       	rjmp	.+318    	; 0x156e <DIO_SET_PIN_VALUE+0x1ee>
			break;
		case GROUPC:
			SET_BIT(PORTC_Register, PIN_NUM);
    1430:	a5 e3       	ldi	r26, 0x35	; 53
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	e5 e3       	ldi	r30, 0x35	; 53
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	48 2f       	mov	r20, r24
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	02 2e       	mov	r0, r18
    1448:	02 c0       	rjmp	.+4      	; 0x144e <DIO_SET_PIN_VALUE+0xce>
    144a:	88 0f       	add	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	0a 94       	dec	r0
    1450:	e2 f7       	brpl	.-8      	; 0x144a <DIO_SET_PIN_VALUE+0xca>
    1452:	84 2b       	or	r24, r20
    1454:	8c 93       	st	X, r24
    1456:	8b c0       	rjmp	.+278    	; 0x156e <DIO_SET_PIN_VALUE+0x1ee>
			break;
		case GROUPD:
			SET_BIT(PORTD_Register, PIN_NUM);
    1458:	a2 e3       	ldi	r26, 0x32	; 50
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e2 e3       	ldi	r30, 0x32	; 50
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	48 2f       	mov	r20, r24
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	02 2e       	mov	r0, r18
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <DIO_SET_PIN_VALUE+0xf6>
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	0a 94       	dec	r0
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <DIO_SET_PIN_VALUE+0xf2>
    147a:	84 2b       	or	r24, r20
    147c:	8c 93       	st	X, r24
    147e:	77 c0       	rjmp	.+238    	; 0x156e <DIO_SET_PIN_VALUE+0x1ee>
			break;
		}
	} else if (PINLEVEL == LOW) {
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	88 23       	and	r24, r24
    1484:	09 f0       	breq	.+2      	; 0x1488 <DIO_SET_PIN_VALUE+0x108>
    1486:	73 c0       	rjmp	.+230    	; 0x156e <DIO_SET_PIN_VALUE+0x1ee>
		switch (GROUPID) {
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	3d 83       	std	Y+5, r19	; 0x05
    1490:	2c 83       	std	Y+4, r18	; 0x04
    1492:	8c 81       	ldd	r24, Y+4	; 0x04
    1494:	9d 81       	ldd	r25, Y+5	; 0x05
    1496:	81 30       	cpi	r24, 0x01	; 1
    1498:	91 05       	cpc	r25, r1
    149a:	59 f1       	breq	.+86     	; 0x14f2 <DIO_SET_PIN_VALUE+0x172>
    149c:	2c 81       	ldd	r18, Y+4	; 0x04
    149e:	3d 81       	ldd	r19, Y+5	; 0x05
    14a0:	22 30       	cpi	r18, 0x02	; 2
    14a2:	31 05       	cpc	r19, r1
    14a4:	2c f4       	brge	.+10     	; 0x14b0 <DIO_SET_PIN_VALUE+0x130>
    14a6:	8c 81       	ldd	r24, Y+4	; 0x04
    14a8:	9d 81       	ldd	r25, Y+5	; 0x05
    14aa:	00 97       	sbiw	r24, 0x00	; 0
    14ac:	69 f0       	breq	.+26     	; 0x14c8 <DIO_SET_PIN_VALUE+0x148>
    14ae:	5f c0       	rjmp	.+190    	; 0x156e <DIO_SET_PIN_VALUE+0x1ee>
    14b0:	2c 81       	ldd	r18, Y+4	; 0x04
    14b2:	3d 81       	ldd	r19, Y+5	; 0x05
    14b4:	22 30       	cpi	r18, 0x02	; 2
    14b6:	31 05       	cpc	r19, r1
    14b8:	89 f1       	breq	.+98     	; 0x151c <DIO_SET_PIN_VALUE+0x19c>
    14ba:	8c 81       	ldd	r24, Y+4	; 0x04
    14bc:	9d 81       	ldd	r25, Y+5	; 0x05
    14be:	83 30       	cpi	r24, 0x03	; 3
    14c0:	91 05       	cpc	r25, r1
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <DIO_SET_PIN_VALUE+0x146>
    14c4:	40 c0       	rjmp	.+128    	; 0x1546 <DIO_SET_PIN_VALUE+0x1c6>
    14c6:	53 c0       	rjmp	.+166    	; 0x156e <DIO_SET_PIN_VALUE+0x1ee>
		case GROUPA:
			CLEAR_BIT(PORTA_Register, PIN_NUM);
    14c8:	ab e3       	ldi	r26, 0x3B	; 59
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	eb e3       	ldi	r30, 0x3B	; 59
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	48 2f       	mov	r20, r24
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	02 2e       	mov	r0, r18
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <DIO_SET_PIN_VALUE+0x166>
    14e2:	88 0f       	add	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	0a 94       	dec	r0
    14e8:	e2 f7       	brpl	.-8      	; 0x14e2 <DIO_SET_PIN_VALUE+0x162>
    14ea:	80 95       	com	r24
    14ec:	84 23       	and	r24, r20
    14ee:	8c 93       	st	X, r24
    14f0:	3e c0       	rjmp	.+124    	; 0x156e <DIO_SET_PIN_VALUE+0x1ee>
			break;
		case GROUPB:
			CLEAR_BIT(PORTB_Register, PIN_NUM);
    14f2:	a8 e3       	ldi	r26, 0x38	; 56
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e8 e3       	ldi	r30, 0x38	; 56
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	48 2f       	mov	r20, r24
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 2e       	mov	r0, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <DIO_SET_PIN_VALUE+0x190>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	0a 94       	dec	r0
    1512:	e2 f7       	brpl	.-8      	; 0x150c <DIO_SET_PIN_VALUE+0x18c>
    1514:	80 95       	com	r24
    1516:	84 23       	and	r24, r20
    1518:	8c 93       	st	X, r24
    151a:	29 c0       	rjmp	.+82     	; 0x156e <DIO_SET_PIN_VALUE+0x1ee>
			break;
		case GROUPC:
			CLEAR_BIT(PORTC_Register, PIN_NUM);
    151c:	a5 e3       	ldi	r26, 0x35	; 53
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e5 e3       	ldi	r30, 0x35	; 53
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	48 2f       	mov	r20, r24
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	02 2e       	mov	r0, r18
    1534:	02 c0       	rjmp	.+4      	; 0x153a <DIO_SET_PIN_VALUE+0x1ba>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	0a 94       	dec	r0
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <DIO_SET_PIN_VALUE+0x1b6>
    153e:	80 95       	com	r24
    1540:	84 23       	and	r24, r20
    1542:	8c 93       	st	X, r24
    1544:	14 c0       	rjmp	.+40     	; 0x156e <DIO_SET_PIN_VALUE+0x1ee>
			break;
		case GROUPD:
			CLEAR_BIT(PORTD_Register, PIN_NUM);
    1546:	a2 e3       	ldi	r26, 0x32	; 50
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e2 e3       	ldi	r30, 0x32	; 50
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	48 2f       	mov	r20, r24
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	02 2e       	mov	r0, r18
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <DIO_SET_PIN_VALUE+0x1e4>
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	0a 94       	dec	r0
    1566:	e2 f7       	brpl	.-8      	; 0x1560 <DIO_SET_PIN_VALUE+0x1e0>
    1568:	80 95       	com	r24
    156a:	84 23       	and	r24, r20
    156c:	8c 93       	st	X, r24
			break;
		}
	} else {
		//			#warning ("the input is not accaptable")
	}
}
    156e:	27 96       	adiw	r28, 0x07	; 7
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	de bf       	out	0x3e, r29	; 62
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	cd bf       	out	0x3d, r28	; 61
    157a:	cf 91       	pop	r28
    157c:	df 91       	pop	r29
    157e:	08 95       	ret

00001580 <DIO_GET_PIN_VALUE>:

BIT_VALUE_t DIO_GET_PIN_VALUE(Group_t GROUPID, PIN_Num_t PIN_NUM) {
    1580:	df 93       	push	r29
    1582:	cf 93       	push	r28
    1584:	00 d0       	rcall	.+0      	; 0x1586 <DIO_GET_PIN_VALUE+0x6>
    1586:	00 d0       	rcall	.+0      	; 0x1588 <DIO_GET_PIN_VALUE+0x8>
    1588:	0f 92       	push	r0
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	8a 83       	std	Y+2, r24	; 0x02
    1590:	6b 83       	std	Y+3, r22	; 0x03
	BIT_VALUE_t BIT_VAL = BIT_VALUE_0;
    1592:	19 82       	std	Y+1, r1	; 0x01
	switch (GROUPID) {
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	3d 83       	std	Y+5, r19	; 0x05
    159c:	2c 83       	std	Y+4, r18	; 0x04
    159e:	4c 81       	ldd	r20, Y+4	; 0x04
    15a0:	5d 81       	ldd	r21, Y+5	; 0x05
    15a2:	41 30       	cpi	r20, 0x01	; 1
    15a4:	51 05       	cpc	r21, r1
    15a6:	b1 f1       	breq	.+108    	; 0x1614 <DIO_GET_PIN_VALUE+0x94>
    15a8:	8c 81       	ldd	r24, Y+4	; 0x04
    15aa:	9d 81       	ldd	r25, Y+5	; 0x05
    15ac:	82 30       	cpi	r24, 0x02	; 2
    15ae:	91 05       	cpc	r25, r1
    15b0:	34 f4       	brge	.+12     	; 0x15be <DIO_GET_PIN_VALUE+0x3e>
    15b2:	2c 81       	ldd	r18, Y+4	; 0x04
    15b4:	3d 81       	ldd	r19, Y+5	; 0x05
    15b6:	21 15       	cp	r18, r1
    15b8:	31 05       	cpc	r19, r1
    15ba:	71 f0       	breq	.+28     	; 0x15d8 <DIO_GET_PIN_VALUE+0x58>
    15bc:	84 c0       	rjmp	.+264    	; 0x16c6 <DIO_GET_PIN_VALUE+0x146>
    15be:	4c 81       	ldd	r20, Y+4	; 0x04
    15c0:	5d 81       	ldd	r21, Y+5	; 0x05
    15c2:	42 30       	cpi	r20, 0x02	; 2
    15c4:	51 05       	cpc	r21, r1
    15c6:	09 f4       	brne	.+2      	; 0x15ca <DIO_GET_PIN_VALUE+0x4a>
    15c8:	43 c0       	rjmp	.+134    	; 0x1650 <DIO_GET_PIN_VALUE+0xd0>
    15ca:	8c 81       	ldd	r24, Y+4	; 0x04
    15cc:	9d 81       	ldd	r25, Y+5	; 0x05
    15ce:	83 30       	cpi	r24, 0x03	; 3
    15d0:	91 05       	cpc	r25, r1
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <DIO_GET_PIN_VALUE+0x56>
    15d4:	5b c0       	rjmp	.+182    	; 0x168c <DIO_GET_PIN_VALUE+0x10c>
    15d6:	77 c0       	rjmp	.+238    	; 0x16c6 <DIO_GET_PIN_VALUE+0x146>
	case GROUPA:
		BIT_VAL = GET_BIT_VALUE(PINA_Register, PIN_NUM);
    15d8:	e9 e3       	ldi	r30, 0x39	; 57
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	48 2f       	mov	r20, r24
    15e0:	50 e0       	ldi	r21, 0x00	; 0
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <DIO_GET_PIN_VALUE+0x72>
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	2a 95       	dec	r18
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <DIO_GET_PIN_VALUE+0x6e>
    15f6:	9a 01       	movw	r18, r20
    15f8:	28 23       	and	r18, r24
    15fa:	39 23       	and	r19, r25
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	88 2f       	mov	r24, r24
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	a9 01       	movw	r20, r18
    1604:	02 c0       	rjmp	.+4      	; 0x160a <DIO_GET_PIN_VALUE+0x8a>
    1606:	55 95       	asr	r21
    1608:	47 95       	ror	r20
    160a:	8a 95       	dec	r24
    160c:	e2 f7       	brpl	.-8      	; 0x1606 <DIO_GET_PIN_VALUE+0x86>
    160e:	ca 01       	movw	r24, r20
    1610:	89 83       	std	Y+1, r24	; 0x01
    1612:	59 c0       	rjmp	.+178    	; 0x16c6 <DIO_GET_PIN_VALUE+0x146>
		break;
	case GROUPB:
		BIT_VAL = GET_BIT_VALUE(PINB_Register, PIN_NUM);
    1614:	e6 e3       	ldi	r30, 0x36	; 54
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	48 2f       	mov	r20, r24
    161c:	50 e0       	ldi	r21, 0x00	; 0
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	02 c0       	rjmp	.+4      	; 0x162e <DIO_GET_PIN_VALUE+0xae>
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	2a 95       	dec	r18
    1630:	e2 f7       	brpl	.-8      	; 0x162a <DIO_GET_PIN_VALUE+0xaa>
    1632:	9a 01       	movw	r18, r20
    1634:	28 23       	and	r18, r24
    1636:	39 23       	and	r19, r25
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	88 2f       	mov	r24, r24
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	a9 01       	movw	r20, r18
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <DIO_GET_PIN_VALUE+0xc6>
    1642:	55 95       	asr	r21
    1644:	47 95       	ror	r20
    1646:	8a 95       	dec	r24
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <DIO_GET_PIN_VALUE+0xc2>
    164a:	ca 01       	movw	r24, r20
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	3b c0       	rjmp	.+118    	; 0x16c6 <DIO_GET_PIN_VALUE+0x146>
		break;
	case GROUPC:
		BIT_VAL = GET_BIT_VALUE(PINC_Register, PIN_NUM);
    1650:	e3 e3       	ldi	r30, 0x33	; 51
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	48 2f       	mov	r20, r24
    1658:	50 e0       	ldi	r21, 0x00	; 0
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	02 c0       	rjmp	.+4      	; 0x166a <DIO_GET_PIN_VALUE+0xea>
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	2a 95       	dec	r18
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <DIO_GET_PIN_VALUE+0xe6>
    166e:	9a 01       	movw	r18, r20
    1670:	28 23       	and	r18, r24
    1672:	39 23       	and	r19, r25
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	88 2f       	mov	r24, r24
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	a9 01       	movw	r20, r18
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <DIO_GET_PIN_VALUE+0x102>
    167e:	55 95       	asr	r21
    1680:	47 95       	ror	r20
    1682:	8a 95       	dec	r24
    1684:	e2 f7       	brpl	.-8      	; 0x167e <DIO_GET_PIN_VALUE+0xfe>
    1686:	ca 01       	movw	r24, r20
    1688:	89 83       	std	Y+1, r24	; 0x01
    168a:	1d c0       	rjmp	.+58     	; 0x16c6 <DIO_GET_PIN_VALUE+0x146>
		break;
	case GROUPD:
		BIT_VAL = GET_BIT_VALUE(PIND_Register, PIN_NUM);
    168c:	e0 e3       	ldi	r30, 0x30	; 48
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	48 2f       	mov	r20, r24
    1694:	50 e0       	ldi	r21, 0x00	; 0
    1696:	8b 81       	ldd	r24, Y+3	; 0x03
    1698:	28 2f       	mov	r18, r24
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <DIO_GET_PIN_VALUE+0x126>
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	2a 95       	dec	r18
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <DIO_GET_PIN_VALUE+0x122>
    16aa:	9a 01       	movw	r18, r20
    16ac:	28 23       	and	r18, r24
    16ae:	39 23       	and	r19, r25
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	88 2f       	mov	r24, r24
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	a9 01       	movw	r20, r18
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <DIO_GET_PIN_VALUE+0x13e>
    16ba:	55 95       	asr	r21
    16bc:	47 95       	ror	r20
    16be:	8a 95       	dec	r24
    16c0:	e2 f7       	brpl	.-8      	; 0x16ba <DIO_GET_PIN_VALUE+0x13a>
    16c2:	ca 01       	movw	r24, r20
    16c4:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return BIT_VAL;
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	cf 91       	pop	r28
    16d4:	df 91       	pop	r29
    16d6:	08 95       	ret

000016d8 <DIO_SET_GROUP_DIR>:
void DIO_SET_GROUP_DIR(Group_t GROUPID, u8 dir) {
    16d8:	df 93       	push	r29
    16da:	cf 93       	push	r28
    16dc:	00 d0       	rcall	.+0      	; 0x16de <DIO_SET_GROUP_DIR+0x6>
    16de:	00 d0       	rcall	.+0      	; 0x16e0 <DIO_SET_GROUP_DIR+0x8>
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	89 83       	std	Y+1, r24	; 0x01
    16e6:	6a 83       	std	Y+2, r22	; 0x02
	switch (GROUPID) {
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	3c 83       	std	Y+4, r19	; 0x04
    16f0:	2b 83       	std	Y+3, r18	; 0x03
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	9c 81       	ldd	r25, Y+4	; 0x04
    16f6:	81 30       	cpi	r24, 0x01	; 1
    16f8:	91 05       	cpc	r25, r1
    16fa:	d1 f0       	breq	.+52     	; 0x1730 <DIO_SET_GROUP_DIR+0x58>
    16fc:	2b 81       	ldd	r18, Y+3	; 0x03
    16fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1700:	22 30       	cpi	r18, 0x02	; 2
    1702:	31 05       	cpc	r19, r1
    1704:	2c f4       	brge	.+10     	; 0x1710 <DIO_SET_GROUP_DIR+0x38>
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	9c 81       	ldd	r25, Y+4	; 0x04
    170a:	00 97       	sbiw	r24, 0x00	; 0
    170c:	61 f0       	breq	.+24     	; 0x1726 <DIO_SET_GROUP_DIR+0x4e>
    170e:	1e c0       	rjmp	.+60     	; 0x174c <DIO_SET_GROUP_DIR+0x74>
    1710:	2b 81       	ldd	r18, Y+3	; 0x03
    1712:	3c 81       	ldd	r19, Y+4	; 0x04
    1714:	22 30       	cpi	r18, 0x02	; 2
    1716:	31 05       	cpc	r19, r1
    1718:	81 f0       	breq	.+32     	; 0x173a <DIO_SET_GROUP_DIR+0x62>
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	9c 81       	ldd	r25, Y+4	; 0x04
    171e:	83 30       	cpi	r24, 0x03	; 3
    1720:	91 05       	cpc	r25, r1
    1722:	81 f0       	breq	.+32     	; 0x1744 <DIO_SET_GROUP_DIR+0x6c>
    1724:	13 c0       	rjmp	.+38     	; 0x174c <DIO_SET_GROUP_DIR+0x74>
	case GROUPA:
		DDRA_Register = dir;
    1726:	ea e3       	ldi	r30, 0x3A	; 58
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	8a 81       	ldd	r24, Y+2	; 0x02
    172c:	80 83       	st	Z, r24
    172e:	0e c0       	rjmp	.+28     	; 0x174c <DIO_SET_GROUP_DIR+0x74>
		break;
	case GROUPB:
		DDRB_Register = dir;
    1730:	e7 e3       	ldi	r30, 0x37	; 55
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	80 83       	st	Z, r24
    1738:	09 c0       	rjmp	.+18     	; 0x174c <DIO_SET_GROUP_DIR+0x74>
		break;
	case GROUPC:
		DDRC_Register = dir;
    173a:	e4 e3       	ldi	r30, 0x34	; 52
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	80 83       	st	Z, r24
    1742:	04 c0       	rjmp	.+8      	; 0x174c <DIO_SET_GROUP_DIR+0x74>
		break;
	case GROUPD:
		DDRD_Register = dir;
    1744:	e1 e3       	ldi	r30, 0x31	; 49
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	80 83       	st	Z, r24
		break;
	}
}
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	08 95       	ret

0000175a <DIO_return_Group_value>:
u8 DIO_return_Group_value(Group_t GROUPID) {
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	00 d0       	rcall	.+0      	; 0x1760 <DIO_return_Group_value+0x6>
    1760:	00 d0       	rcall	.+0      	; 0x1762 <DIO_return_Group_value+0x8>
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
    1766:	89 83       	std	Y+1, r24	; 0x01
	switch (GROUPID) {
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	3c 83       	std	Y+4, r19	; 0x04
    1770:	2b 83       	std	Y+3, r18	; 0x03
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	9c 81       	ldd	r25, Y+4	; 0x04
    1776:	81 30       	cpi	r24, 0x01	; 1
    1778:	91 05       	cpc	r25, r1
    177a:	d1 f0       	breq	.+52     	; 0x17b0 <DIO_return_Group_value+0x56>
    177c:	2b 81       	ldd	r18, Y+3	; 0x03
    177e:	3c 81       	ldd	r19, Y+4	; 0x04
    1780:	22 30       	cpi	r18, 0x02	; 2
    1782:	31 05       	cpc	r19, r1
    1784:	2c f4       	brge	.+10     	; 0x1790 <DIO_return_Group_value+0x36>
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	9c 81       	ldd	r25, Y+4	; 0x04
    178a:	00 97       	sbiw	r24, 0x00	; 0
    178c:	61 f0       	breq	.+24     	; 0x17a6 <DIO_return_Group_value+0x4c>
    178e:	1f c0       	rjmp	.+62     	; 0x17ce <DIO_return_Group_value+0x74>
    1790:	2b 81       	ldd	r18, Y+3	; 0x03
    1792:	3c 81       	ldd	r19, Y+4	; 0x04
    1794:	22 30       	cpi	r18, 0x02	; 2
    1796:	31 05       	cpc	r19, r1
    1798:	81 f0       	breq	.+32     	; 0x17ba <DIO_return_Group_value+0x60>
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	9c 81       	ldd	r25, Y+4	; 0x04
    179e:	83 30       	cpi	r24, 0x03	; 3
    17a0:	91 05       	cpc	r25, r1
    17a2:	81 f0       	breq	.+32     	; 0x17c4 <DIO_return_Group_value+0x6a>
    17a4:	14 c0       	rjmp	.+40     	; 0x17ce <DIO_return_Group_value+0x74>
	case GROUPA:
		return PORTA_Register ;
    17a6:	eb e3       	ldi	r30, 0x3B	; 59
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	90 81       	ld	r25, Z
    17ac:	9a 83       	std	Y+2, r25	; 0x02
    17ae:	10 c0       	rjmp	.+32     	; 0x17d0 <DIO_return_Group_value+0x76>
		break;
	case GROUPB:
		return PORTB_Register;
    17b0:	e8 e3       	ldi	r30, 0x38	; 56
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	20 81       	ld	r18, Z
    17b6:	2a 83       	std	Y+2, r18	; 0x02
    17b8:	0b c0       	rjmp	.+22     	; 0x17d0 <DIO_return_Group_value+0x76>
		break;
	case GROUPC:
		return PORTC_Register;
    17ba:	e5 e3       	ldi	r30, 0x35	; 53
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	30 81       	ld	r19, Z
    17c0:	3a 83       	std	Y+2, r19	; 0x02
    17c2:	06 c0       	rjmp	.+12     	; 0x17d0 <DIO_return_Group_value+0x76>
		break;
	case GROUPD:
		return PORTD_Register;
    17c4:	e2 e3       	ldi	r30, 0x32	; 50
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	8a 83       	std	Y+2, r24	; 0x02
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <DIO_return_Group_value+0x76>
		break;
	}
	return 0;
    17ce:	1a 82       	std	Y+2, r1	; 0x02
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	cf 91       	pop	r28
    17dc:	df 91       	pop	r29
    17de:	08 95       	ret

000017e0 <DIO_SET_GROUP_VALUE>:

void DIO_SET_GROUP_VALUE(Group_t GROUPID, u8 val) {
    17e0:	df 93       	push	r29
    17e2:	cf 93       	push	r28
    17e4:	00 d0       	rcall	.+0      	; 0x17e6 <DIO_SET_GROUP_VALUE+0x6>
    17e6:	00 d0       	rcall	.+0      	; 0x17e8 <DIO_SET_GROUP_VALUE+0x8>
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
    17ec:	89 83       	std	Y+1, r24	; 0x01
    17ee:	6a 83       	std	Y+2, r22	; 0x02
	switch (GROUPID) {
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
    17f2:	28 2f       	mov	r18, r24
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	3c 83       	std	Y+4, r19	; 0x04
    17f8:	2b 83       	std	Y+3, r18	; 0x03
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	9c 81       	ldd	r25, Y+4	; 0x04
    17fe:	81 30       	cpi	r24, 0x01	; 1
    1800:	91 05       	cpc	r25, r1
    1802:	d1 f0       	breq	.+52     	; 0x1838 <DIO_SET_GROUP_VALUE+0x58>
    1804:	2b 81       	ldd	r18, Y+3	; 0x03
    1806:	3c 81       	ldd	r19, Y+4	; 0x04
    1808:	22 30       	cpi	r18, 0x02	; 2
    180a:	31 05       	cpc	r19, r1
    180c:	2c f4       	brge	.+10     	; 0x1818 <DIO_SET_GROUP_VALUE+0x38>
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	9c 81       	ldd	r25, Y+4	; 0x04
    1812:	00 97       	sbiw	r24, 0x00	; 0
    1814:	61 f0       	breq	.+24     	; 0x182e <DIO_SET_GROUP_VALUE+0x4e>
    1816:	1e c0       	rjmp	.+60     	; 0x1854 <DIO_SET_GROUP_VALUE+0x74>
    1818:	2b 81       	ldd	r18, Y+3	; 0x03
    181a:	3c 81       	ldd	r19, Y+4	; 0x04
    181c:	22 30       	cpi	r18, 0x02	; 2
    181e:	31 05       	cpc	r19, r1
    1820:	81 f0       	breq	.+32     	; 0x1842 <DIO_SET_GROUP_VALUE+0x62>
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	9c 81       	ldd	r25, Y+4	; 0x04
    1826:	83 30       	cpi	r24, 0x03	; 3
    1828:	91 05       	cpc	r25, r1
    182a:	81 f0       	breq	.+32     	; 0x184c <DIO_SET_GROUP_VALUE+0x6c>
    182c:	13 c0       	rjmp	.+38     	; 0x1854 <DIO_SET_GROUP_VALUE+0x74>
	case GROUPA:
		PORTA_Register = val;
    182e:	eb e3       	ldi	r30, 0x3B	; 59
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	80 83       	st	Z, r24
    1836:	0e c0       	rjmp	.+28     	; 0x1854 <DIO_SET_GROUP_VALUE+0x74>
		break;
	case GROUPB:
		PORTB_Register = val;
    1838:	e8 e3       	ldi	r30, 0x38	; 56
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	80 83       	st	Z, r24
    1840:	09 c0       	rjmp	.+18     	; 0x1854 <DIO_SET_GROUP_VALUE+0x74>
		break;
	case GROUPC:
		PORTC_Register = val;
    1842:	e5 e3       	ldi	r30, 0x35	; 53
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	80 83       	st	Z, r24
    184a:	04 c0       	rjmp	.+8      	; 0x1854 <DIO_SET_GROUP_VALUE+0x74>
		break;
	case GROUPD:
		PORTD_Register = val;
    184c:	e2 e3       	ldi	r30, 0x32	; 50
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	80 83       	st	Z, r24
		break;
	}
}
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	cf 91       	pop	r28
    185e:	df 91       	pop	r29
    1860:	08 95       	ret

00001862 <DIO_GET_GROUP_VALUE>:
u8 DIO_GET_GROUP_VALUE(Group_t GROUPID) {
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	00 d0       	rcall	.+0      	; 0x1868 <DIO_GET_GROUP_VALUE+0x6>
    1868:	00 d0       	rcall	.+0      	; 0x186a <DIO_GET_GROUP_VALUE+0x8>
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	8a 83       	std	Y+2, r24	; 0x02
	u8 value;
	switch (GROUPID) {
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	28 2f       	mov	r18, r24
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	3c 83       	std	Y+4, r19	; 0x04
    1878:	2b 83       	std	Y+3, r18	; 0x03
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	9c 81       	ldd	r25, Y+4	; 0x04
    187e:	81 30       	cpi	r24, 0x01	; 1
    1880:	91 05       	cpc	r25, r1
    1882:	d1 f0       	breq	.+52     	; 0x18b8 <DIO_GET_GROUP_VALUE+0x56>
    1884:	2b 81       	ldd	r18, Y+3	; 0x03
    1886:	3c 81       	ldd	r19, Y+4	; 0x04
    1888:	22 30       	cpi	r18, 0x02	; 2
    188a:	31 05       	cpc	r19, r1
    188c:	2c f4       	brge	.+10     	; 0x1898 <DIO_GET_GROUP_VALUE+0x36>
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	9c 81       	ldd	r25, Y+4	; 0x04
    1892:	00 97       	sbiw	r24, 0x00	; 0
    1894:	61 f0       	breq	.+24     	; 0x18ae <DIO_GET_GROUP_VALUE+0x4c>
    1896:	1e c0       	rjmp	.+60     	; 0x18d4 <DIO_GET_GROUP_VALUE+0x72>
    1898:	2b 81       	ldd	r18, Y+3	; 0x03
    189a:	3c 81       	ldd	r19, Y+4	; 0x04
    189c:	22 30       	cpi	r18, 0x02	; 2
    189e:	31 05       	cpc	r19, r1
    18a0:	81 f0       	breq	.+32     	; 0x18c2 <DIO_GET_GROUP_VALUE+0x60>
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	9c 81       	ldd	r25, Y+4	; 0x04
    18a6:	83 30       	cpi	r24, 0x03	; 3
    18a8:	91 05       	cpc	r25, r1
    18aa:	81 f0       	breq	.+32     	; 0x18cc <DIO_GET_GROUP_VALUE+0x6a>
    18ac:	13 c0       	rjmp	.+38     	; 0x18d4 <DIO_GET_GROUP_VALUE+0x72>
	case GROUPA:
		value = PINA_Register;
    18ae:	e9 e3       	ldi	r30, 0x39	; 57
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	89 83       	std	Y+1, r24	; 0x01
    18b6:	0e c0       	rjmp	.+28     	; 0x18d4 <DIO_GET_GROUP_VALUE+0x72>
		break;
	case GROUPB:
		value = PINB_Register;
    18b8:	e6 e3       	ldi	r30, 0x36	; 54
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	89 83       	std	Y+1, r24	; 0x01
    18c0:	09 c0       	rjmp	.+18     	; 0x18d4 <DIO_GET_GROUP_VALUE+0x72>
		break;
	case GROUPC:
		value = PINC_Register;
    18c2:	e3 e3       	ldi	r30, 0x33	; 51
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	89 83       	std	Y+1, r24	; 0x01
    18ca:	04 c0       	rjmp	.+8      	; 0x18d4 <DIO_GET_GROUP_VALUE+0x72>
		break;
	case GROUPD:
		value = PIND_Register;
    18cc:	e0 e3       	ldi	r30, 0x30	; 48
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return value;
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    18d6:	0f 90       	pop	r0
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	cf 91       	pop	r28
    18e0:	df 91       	pop	r29
    18e2:	08 95       	ret

000018e4 <ADC_init>:
 *      Author: Ibrahim
 */

#include "ADC.h"
#include "math.h"
void ADC_init(void) {
    18e4:	df 93       	push	r29
    18e6:	cf 93       	push	r28
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
	// ADC Enable
	SET_BIT(ADCSRA_Reg, 7);
    18ec:	a6 e2       	ldi	r26, 0x26	; 38
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e6 e2       	ldi	r30, 0x26	; 38
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	80 68       	ori	r24, 0x80	; 128
    18f8:	8c 93       	st	X, r24

	// Prescaler Configuration as 128
	SET_BIT(ADCSRA_Reg, 2);
    18fa:	a6 e2       	ldi	r26, 0x26	; 38
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e6 e2       	ldi	r30, 0x26	; 38
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	84 60       	ori	r24, 0x04	; 4
    1906:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_Reg, 1);
    1908:	a6 e2       	ldi	r26, 0x26	; 38
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	e6 e2       	ldi	r30, 0x26	; 38
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	82 60       	ori	r24, 0x02	; 2
    1914:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_Reg, 0);
    1916:	a6 e2       	ldi	r26, 0x26	; 38
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	e6 e2       	ldi	r30, 0x26	; 38
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	81 60       	ori	r24, 0x01	; 1
    1922:	8c 93       	st	X, r24

	//AREF
	CLEAR_BIT(ADMUX_Reg, 7);
    1924:	a7 e2       	ldi	r26, 0x27	; 39
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	e7 e2       	ldi	r30, 0x27	; 39
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	8f 77       	andi	r24, 0x7F	; 127
    1930:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX_Reg, 6);
    1932:	a7 e2       	ldi	r26, 0x27	; 39
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	e7 e2       	ldi	r30, 0x27	; 39
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	8f 7b       	andi	r24, 0xBF	; 191
    193e:	8c 93       	st	X, r24

	// ADC Data Rgith Adjustment
	CLEAR_BIT(ADMUX_Reg, 5);
    1940:	a7 e2       	ldi	r26, 0x27	; 39
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	e7 e2       	ldi	r30, 0x27	; 39
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	8f 7d       	andi	r24, 0xDF	; 223
    194c:	8c 93       	st	X, r24
}
    194e:	cf 91       	pop	r28
    1950:	df 91       	pop	r29
    1952:	08 95       	ret

00001954 <ADC_Read>:
u16 ADC_Read(u8 channel) {
    1954:	df 93       	push	r29
    1956:	cf 93       	push	r28
    1958:	0f 92       	push	r0
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
    195e:	89 83       	std	Y+1, r24	; 0x01

	// ADC Channel Selection
	if (channel < 7) {
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	87 30       	cpi	r24, 0x07	; 7
    1964:	30 f5       	brcc	.+76     	; 0x19b2 <ADC_Read+0x5e>
		// clear first fifth bits
		ADMUX_Reg &= 0xE0;
    1966:	a7 e2       	ldi	r26, 0x27	; 39
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e7 e2       	ldi	r30, 0x27	; 39
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	80 7e       	andi	r24, 0xE0	; 224
    1972:	8c 93       	st	X, r24
		ADMUX_Reg |= channel;
    1974:	a7 e2       	ldi	r26, 0x27	; 39
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	e7 e2       	ldi	r30, 0x27	; 39
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	90 81       	ld	r25, Z
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	89 2b       	or	r24, r25
    1982:	8c 93       	st	X, r24

		// Start Single Convertion
		SET_BIT(ADCSRA_Reg, 6);
    1984:	a6 e2       	ldi	r26, 0x26	; 38
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	e6 e2       	ldi	r30, 0x26	; 38
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	80 64       	ori	r24, 0x40	; 64
    1990:	8c 93       	st	X, r24
		 * false
		 *
		 */


		while (!(ADCSRA_Reg & (1 << 4)));
    1992:	e6 e2       	ldi	r30, 0x26	; 38
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	88 2f       	mov	r24, r24
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	80 71       	andi	r24, 0x10	; 16
    199e:	90 70       	andi	r25, 0x00	; 0
    19a0:	00 97       	sbiw	r24, 0x00	; 0
    19a2:	b9 f3       	breq	.-18     	; 0x1992 <ADC_Read+0x3e>

		//ADC Flag Clear
		SET_BIT(ADCSRA_Reg, 4);
    19a4:	a6 e2       	ldi	r26, 0x26	; 38
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e6 e2       	ldi	r30, 0x26	; 38
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	80 61       	ori	r24, 0x10	; 16
    19b0:	8c 93       	st	X, r24
	}
	else
	{

	}
	return ADC_Reg;
    19b2:	e4 e2       	ldi	r30, 0x24	; 36
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	91 81       	ldd	r25, Z+1	; 0x01
}
    19ba:	0f 90       	pop	r0
    19bc:	cf 91       	pop	r28
    19be:	df 91       	pop	r29
    19c0:	08 95       	ret

000019c2 <LCD_init>:
#define lcd_FunctionReset   0x30          // reset the LCD
#define lcd_FunctionSet8bit 0x38          // 8-bit data, 2-line display, 5 x 7 font
#define lcd_SetCursor       0x80          // set cursor position

void LCD_init(LCD_CFG_t LCD_CFG)
{
    19c2:	0f 93       	push	r16
    19c4:	1f 93       	push	r17
    19c6:	df 93       	push	r29
    19c8:	cf 93       	push	r28
    19ca:	cd b7       	in	r28, 0x3d	; 61
    19cc:	de b7       	in	r29, 0x3e	; 62
    19ce:	c8 55       	subi	r28, 0x58	; 88
    19d0:	d0 40       	sbci	r29, 0x00	; 0
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	f8 94       	cli
    19d6:	de bf       	out	0x3e, r29	; 62
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	cd bf       	out	0x3d, r28	; 61
    19dc:	fe 01       	movw	r30, r28
    19de:	eb 5a       	subi	r30, 0xAB	; 171
    19e0:	ff 4f       	sbci	r31, 0xFF	; 255
    19e2:	60 83       	st	Z, r22
    19e4:	71 83       	std	Z+1, r23	; 0x01
    19e6:	82 83       	std	Z+2, r24	; 0x02
    19e8:	93 83       	std	Z+3, r25	; 0x03
	DIO_SET_GROUP_DIR(LCD_CFG.GroupData,0xff);
    19ea:	fe 01       	movw	r30, r28
    19ec:	eb 5a       	subi	r30, 0xAB	; 171
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	80 81       	ld	r24, Z
    19f2:	6f ef       	ldi	r22, 0xFF	; 255
    19f4:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <DIO_SET_GROUP_DIR>
	DIO_SET_PIN_DIR(LCD_CFG.LCD_CNT.GroupControl,LCD_CFG.LCD_CNT.RS_PIN
    19f8:	fe 01       	movw	r30, r28
    19fa:	eb 5a       	subi	r30, 0xAB	; 171
    19fc:	ff 4f       	sbci	r31, 0xFF	; 255
    19fe:	81 81       	ldd	r24, Z+1	; 0x01
    1a00:	fe 01       	movw	r30, r28
    1a02:	eb 5a       	subi	r30, 0xAB	; 171
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	92 81       	ldd	r25, Z+2	; 0x02
    1a08:	69 2f       	mov	r22, r25
    1a0a:	41 e0       	ldi	r20, 0x01	; 1
    1a0c:	0e 94 c0 08 	call	0x1180	; 0x1180 <DIO_SET_PIN_DIR>
			,OUTPUT);
	DIO_SET_PIN_DIR(LCD_CFG.LCD_CNT.GroupControl,LCD_CFG.LCD_CNT.E_PIN
    1a10:	fe 01       	movw	r30, r28
    1a12:	eb 5a       	subi	r30, 0xAB	; 171
    1a14:	ff 4f       	sbci	r31, 0xFF	; 255
    1a16:	81 81       	ldd	r24, Z+1	; 0x01
    1a18:	fe 01       	movw	r30, r28
    1a1a:	eb 5a       	subi	r30, 0xAB	; 171
    1a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1e:	93 81       	ldd	r25, Z+3	; 0x03
    1a20:	69 2f       	mov	r22, r25
    1a22:	41 e0       	ldi	r20, 0x01	; 1
    1a24:	0e 94 c0 08 	call	0x1180	; 0x1180 <DIO_SET_PIN_DIR>
    1a28:	fe 01       	movw	r30, r28
    1a2a:	ef 5a       	subi	r30, 0xAF	; 175
    1a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	a0 ef       	ldi	r26, 0xF0	; 240
    1a34:	b1 e4       	ldi	r27, 0x41	; 65
    1a36:	80 83       	st	Z, r24
    1a38:	91 83       	std	Z+1, r25	; 0x01
    1a3a:	a2 83       	std	Z+2, r26	; 0x02
    1a3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a3e:	8e 01       	movw	r16, r28
    1a40:	03 5b       	subi	r16, 0xB3	; 179
    1a42:	1f 4f       	sbci	r17, 0xFF	; 255
    1a44:	fe 01       	movw	r30, r28
    1a46:	ef 5a       	subi	r30, 0xAF	; 175
    1a48:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4a:	60 81       	ld	r22, Z
    1a4c:	71 81       	ldd	r23, Z+1	; 0x01
    1a4e:	82 81       	ldd	r24, Z+2	; 0x02
    1a50:	93 81       	ldd	r25, Z+3	; 0x03
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	4a ef       	ldi	r20, 0xFA	; 250
    1a58:	54 e4       	ldi	r21, 0x44	; 68
    1a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	f8 01       	movw	r30, r16
    1a64:	80 83       	st	Z, r24
    1a66:	91 83       	std	Z+1, r25	; 0x01
    1a68:	a2 83       	std	Z+2, r26	; 0x02
    1a6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	e3 5b       	subi	r30, 0xB3	; 179
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	60 81       	ld	r22, Z
    1a74:	71 81       	ldd	r23, Z+1	; 0x01
    1a76:	82 81       	ldd	r24, Z+2	; 0x02
    1a78:	93 81       	ldd	r25, Z+3	; 0x03
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	40 e8       	ldi	r20, 0x80	; 128
    1a80:	5f e3       	ldi	r21, 0x3F	; 63
    1a82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a86:	88 23       	and	r24, r24
    1a88:	44 f4       	brge	.+16     	; 0x1a9a <LCD_init+0xd8>
		__ticks = 1;
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	e5 5b       	subi	r30, 0xB5	; 181
    1a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	91 83       	std	Z+1, r25	; 0x01
    1a96:	80 83       	st	Z, r24
    1a98:	64 c0       	rjmp	.+200    	; 0x1b62 <LCD_init+0x1a0>
	else if (__tmp > 65535)
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	e3 5b       	subi	r30, 0xB3	; 179
    1a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa0:	60 81       	ld	r22, Z
    1aa2:	71 81       	ldd	r23, Z+1	; 0x01
    1aa4:	82 81       	ldd	r24, Z+2	; 0x02
    1aa6:	93 81       	ldd	r25, Z+3	; 0x03
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	3f ef       	ldi	r19, 0xFF	; 255
    1aac:	4f e7       	ldi	r20, 0x7F	; 127
    1aae:	57 e4       	ldi	r21, 0x47	; 71
    1ab0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ab4:	18 16       	cp	r1, r24
    1ab6:	0c f0       	brlt	.+2      	; 0x1aba <LCD_init+0xf8>
    1ab8:	43 c0       	rjmp	.+134    	; 0x1b40 <LCD_init+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aba:	fe 01       	movw	r30, r28
    1abc:	ef 5a       	subi	r30, 0xAF	; 175
    1abe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac0:	60 81       	ld	r22, Z
    1ac2:	71 81       	ldd	r23, Z+1	; 0x01
    1ac4:	82 81       	ldd	r24, Z+2	; 0x02
    1ac6:	93 81       	ldd	r25, Z+3	; 0x03
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	40 e2       	ldi	r20, 0x20	; 32
    1ace:	51 e4       	ldi	r21, 0x41	; 65
    1ad0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	8e 01       	movw	r16, r28
    1ada:	05 5b       	subi	r16, 0xB5	; 181
    1adc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ade:	bc 01       	movw	r22, r24
    1ae0:	cd 01       	movw	r24, r26
    1ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	f8 01       	movw	r30, r16
    1aec:	91 83       	std	Z+1, r25	; 0x01
    1aee:	80 83       	st	Z, r24
    1af0:	1f c0       	rjmp	.+62     	; 0x1b30 <LCD_init+0x16e>
    1af2:	fe 01       	movw	r30, r28
    1af4:	e7 5b       	subi	r30, 0xB7	; 183
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	88 ec       	ldi	r24, 0xC8	; 200
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	91 83       	std	Z+1, r25	; 0x01
    1afe:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b00:	fe 01       	movw	r30, r28
    1b02:	e7 5b       	subi	r30, 0xB7	; 183
    1b04:	ff 4f       	sbci	r31, 0xFF	; 255
    1b06:	80 81       	ld	r24, Z
    1b08:	91 81       	ldd	r25, Z+1	; 0x01
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	f1 f7       	brne	.-4      	; 0x1b0a <LCD_init+0x148>
    1b0e:	fe 01       	movw	r30, r28
    1b10:	e7 5b       	subi	r30, 0xB7	; 183
    1b12:	ff 4f       	sbci	r31, 0xFF	; 255
    1b14:	91 83       	std	Z+1, r25	; 0x01
    1b16:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b18:	de 01       	movw	r26, r28
    1b1a:	a5 5b       	subi	r26, 0xB5	; 181
    1b1c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b1e:	fe 01       	movw	r30, r28
    1b20:	e5 5b       	subi	r30, 0xB5	; 181
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	80 81       	ld	r24, Z
    1b26:	91 81       	ldd	r25, Z+1	; 0x01
    1b28:	01 97       	sbiw	r24, 0x01	; 1
    1b2a:	11 96       	adiw	r26, 0x01	; 1
    1b2c:	9c 93       	st	X, r25
    1b2e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b30:	fe 01       	movw	r30, r28
    1b32:	e5 5b       	subi	r30, 0xB5	; 181
    1b34:	ff 4f       	sbci	r31, 0xFF	; 255
    1b36:	80 81       	ld	r24, Z
    1b38:	91 81       	ldd	r25, Z+1	; 0x01
    1b3a:	00 97       	sbiw	r24, 0x00	; 0
    1b3c:	d1 f6       	brne	.-76     	; 0x1af2 <LCD_init+0x130>
    1b3e:	27 c0       	rjmp	.+78     	; 0x1b8e <LCD_init+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b40:	8e 01       	movw	r16, r28
    1b42:	05 5b       	subi	r16, 0xB5	; 181
    1b44:	1f 4f       	sbci	r17, 0xFF	; 255
    1b46:	fe 01       	movw	r30, r28
    1b48:	e3 5b       	subi	r30, 0xB3	; 179
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	60 81       	ld	r22, Z
    1b4e:	71 81       	ldd	r23, Z+1	; 0x01
    1b50:	82 81       	ldd	r24, Z+2	; 0x02
    1b52:	93 81       	ldd	r25, Z+3	; 0x03
    1b54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	f8 01       	movw	r30, r16
    1b5e:	91 83       	std	Z+1, r25	; 0x01
    1b60:	80 83       	st	Z, r24
    1b62:	de 01       	movw	r26, r28
    1b64:	a9 5b       	subi	r26, 0xB9	; 185
    1b66:	bf 4f       	sbci	r27, 0xFF	; 255
    1b68:	fe 01       	movw	r30, r28
    1b6a:	e5 5b       	subi	r30, 0xB5	; 181
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	80 81       	ld	r24, Z
    1b70:	91 81       	ldd	r25, Z+1	; 0x01
    1b72:	8d 93       	st	X+, r24
    1b74:	9c 93       	st	X, r25
    1b76:	fe 01       	movw	r30, r28
    1b78:	e9 5b       	subi	r30, 0xB9	; 185
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	80 81       	ld	r24, Z
    1b7e:	91 81       	ldd	r25, Z+1	; 0x01
    1b80:	01 97       	sbiw	r24, 0x01	; 1
    1b82:	f1 f7       	brne	.-4      	; 0x1b80 <LCD_init+0x1be>
    1b84:	fe 01       	movw	r30, r28
    1b86:	e9 5b       	subi	r30, 0xB9	; 185
    1b88:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8a:	91 83       	std	Z+1, r25	; 0x01
    1b8c:	80 83       	st	Z, r24
				,OUTPUT);
	/* Delay 30ms to ensure the initialization of the LCD driver */
	_delay_ms(30);

	/* Return Home  */
	LCD_write_command(LCD_CFG ,lcd_Home);
    1b8e:	fe 01       	movw	r30, r28
    1b90:	eb 5a       	subi	r30, 0xAB	; 171
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	60 81       	ld	r22, Z
    1b96:	71 81       	ldd	r23, Z+1	; 0x01
    1b98:	82 81       	ldd	r24, Z+2	; 0x02
    1b9a:	93 81       	ldd	r25, Z+3	; 0x03
    1b9c:	42 e0       	ldi	r20, 0x02	; 2
    1b9e:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <LCD_write_command>
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	ed 5b       	subi	r30, 0xBD	; 189
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	a0 e7       	ldi	r26, 0x70	; 112
    1bae:	b1 e4       	ldi	r27, 0x41	; 65
    1bb0:	80 83       	st	Z, r24
    1bb2:	91 83       	std	Z+1, r25	; 0x01
    1bb4:	a2 83       	std	Z+2, r26	; 0x02
    1bb6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb8:	8e 01       	movw	r16, r28
    1bba:	01 5c       	subi	r16, 0xC1	; 193
    1bbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	ed 5b       	subi	r30, 0xBD	; 189
    1bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc4:	60 81       	ld	r22, Z
    1bc6:	71 81       	ldd	r23, Z+1	; 0x01
    1bc8:	82 81       	ldd	r24, Z+2	; 0x02
    1bca:	93 81       	ldd	r25, Z+3	; 0x03
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	4a ef       	ldi	r20, 0xFA	; 250
    1bd2:	54 e4       	ldi	r21, 0x44	; 68
    1bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	f8 01       	movw	r30, r16
    1bde:	80 83       	st	Z, r24
    1be0:	91 83       	std	Z+1, r25	; 0x01
    1be2:	a2 83       	std	Z+2, r26	; 0x02
    1be4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1be6:	fe 01       	movw	r30, r28
    1be8:	ff 96       	adiw	r30, 0x3f	; 63
    1bea:	60 81       	ld	r22, Z
    1bec:	71 81       	ldd	r23, Z+1	; 0x01
    1bee:	82 81       	ldd	r24, Z+2	; 0x02
    1bf0:	93 81       	ldd	r25, Z+3	; 0x03
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e8       	ldi	r20, 0x80	; 128
    1bf8:	5f e3       	ldi	r21, 0x3F	; 63
    1bfa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bfe:	88 23       	and	r24, r24
    1c00:	2c f4       	brge	.+10     	; 0x1c0c <LCD_init+0x24a>
		__ticks = 1;
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	9e af       	std	Y+62, r25	; 0x3e
    1c08:	8d af       	std	Y+61, r24	; 0x3d
    1c0a:	46 c0       	rjmp	.+140    	; 0x1c98 <LCD_init+0x2d6>
	else if (__tmp > 65535)
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	ff 96       	adiw	r30, 0x3f	; 63
    1c10:	60 81       	ld	r22, Z
    1c12:	71 81       	ldd	r23, Z+1	; 0x01
    1c14:	82 81       	ldd	r24, Z+2	; 0x02
    1c16:	93 81       	ldd	r25, Z+3	; 0x03
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	3f ef       	ldi	r19, 0xFF	; 255
    1c1c:	4f e7       	ldi	r20, 0x7F	; 127
    1c1e:	57 e4       	ldi	r21, 0x47	; 71
    1c20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c24:	18 16       	cp	r1, r24
    1c26:	64 f5       	brge	.+88     	; 0x1c80 <LCD_init+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c28:	fe 01       	movw	r30, r28
    1c2a:	ed 5b       	subi	r30, 0xBD	; 189
    1c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2e:	60 81       	ld	r22, Z
    1c30:	71 81       	ldd	r23, Z+1	; 0x01
    1c32:	82 81       	ldd	r24, Z+2	; 0x02
    1c34:	93 81       	ldd	r25, Z+3	; 0x03
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	40 e2       	ldi	r20, 0x20	; 32
    1c3c:	51 e4       	ldi	r21, 0x41	; 65
    1c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	bc 01       	movw	r22, r24
    1c48:	cd 01       	movw	r24, r26
    1c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	9e af       	std	Y+62, r25	; 0x3e
    1c54:	8d af       	std	Y+61, r24	; 0x3d
    1c56:	0f c0       	rjmp	.+30     	; 0x1c76 <LCD_init+0x2b4>
    1c58:	88 ec       	ldi	r24, 0xC8	; 200
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	9c af       	std	Y+60, r25	; 0x3c
    1c5e:	8b af       	std	Y+59, r24	; 0x3b
    1c60:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c62:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c64:	01 97       	sbiw	r24, 0x01	; 1
    1c66:	f1 f7       	brne	.-4      	; 0x1c64 <LCD_init+0x2a2>
    1c68:	9c af       	std	Y+60, r25	; 0x3c
    1c6a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c6c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c6e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c70:	01 97       	sbiw	r24, 0x01	; 1
    1c72:	9e af       	std	Y+62, r25	; 0x3e
    1c74:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c76:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c78:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c7a:	00 97       	sbiw	r24, 0x00	; 0
    1c7c:	69 f7       	brne	.-38     	; 0x1c58 <LCD_init+0x296>
    1c7e:	16 c0       	rjmp	.+44     	; 0x1cac <LCD_init+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c80:	fe 01       	movw	r30, r28
    1c82:	ff 96       	adiw	r30, 0x3f	; 63
    1c84:	60 81       	ld	r22, Z
    1c86:	71 81       	ldd	r23, Z+1	; 0x01
    1c88:	82 81       	ldd	r24, Z+2	; 0x02
    1c8a:	93 81       	ldd	r25, Z+3	; 0x03
    1c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	9e af       	std	Y+62, r25	; 0x3e
    1c96:	8d af       	std	Y+61, r24	; 0x3d
    1c98:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c9a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c9c:	9a af       	std	Y+58, r25	; 0x3a
    1c9e:	89 af       	std	Y+57, r24	; 0x39
    1ca0:	89 ad       	ldd	r24, Y+57	; 0x39
    1ca2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ca4:	01 97       	sbiw	r24, 0x01	; 1
    1ca6:	f1 f7       	brne	.-4      	; 0x1ca4 <LCD_init+0x2e2>
    1ca8:	9a af       	std	Y+58, r25	; 0x3a
    1caa:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(15);

	/* Function Set  */
	LCD_write_command(LCD_CFG ,lcd_FunctionSet8bit);
    1cac:	fe 01       	movw	r30, r28
    1cae:	eb 5a       	subi	r30, 0xAB	; 171
    1cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb2:	60 81       	ld	r22, Z
    1cb4:	71 81       	ldd	r23, Z+1	; 0x01
    1cb6:	82 81       	ldd	r24, Z+2	; 0x02
    1cb8:	93 81       	ldd	r25, Z+3	; 0x03
    1cba:	48 e3       	ldi	r20, 0x38	; 56
    1cbc:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <LCD_write_command>
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	a0 e8       	ldi	r26, 0x80	; 128
    1cc6:	bf e3       	ldi	r27, 0x3F	; 63
    1cc8:	8d ab       	std	Y+53, r24	; 0x35
    1cca:	9e ab       	std	Y+54, r25	; 0x36
    1ccc:	af ab       	std	Y+55, r26	; 0x37
    1cce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd0:	6d a9       	ldd	r22, Y+53	; 0x35
    1cd2:	7e a9       	ldd	r23, Y+54	; 0x36
    1cd4:	8f a9       	ldd	r24, Y+55	; 0x37
    1cd6:	98 ad       	ldd	r25, Y+56	; 0x38
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	4a ef       	ldi	r20, 0xFA	; 250
    1cde:	54 e4       	ldi	r21, 0x44	; 68
    1ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	89 ab       	std	Y+49, r24	; 0x31
    1cea:	9a ab       	std	Y+50, r25	; 0x32
    1cec:	ab ab       	std	Y+51, r26	; 0x33
    1cee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cf0:	69 a9       	ldd	r22, Y+49	; 0x31
    1cf2:	7a a9       	ldd	r23, Y+50	; 0x32
    1cf4:	8b a9       	ldd	r24, Y+51	; 0x33
    1cf6:	9c a9       	ldd	r25, Y+52	; 0x34
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	40 e8       	ldi	r20, 0x80	; 128
    1cfe:	5f e3       	ldi	r21, 0x3F	; 63
    1d00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d04:	88 23       	and	r24, r24
    1d06:	2c f4       	brge	.+10     	; 0x1d12 <LCD_init+0x350>
		__ticks = 1;
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	98 ab       	std	Y+48, r25	; 0x30
    1d0e:	8f a7       	std	Y+47, r24	; 0x2f
    1d10:	3f c0       	rjmp	.+126    	; 0x1d90 <LCD_init+0x3ce>
	else if (__tmp > 65535)
    1d12:	69 a9       	ldd	r22, Y+49	; 0x31
    1d14:	7a a9       	ldd	r23, Y+50	; 0x32
    1d16:	8b a9       	ldd	r24, Y+51	; 0x33
    1d18:	9c a9       	ldd	r25, Y+52	; 0x34
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	3f ef       	ldi	r19, 0xFF	; 255
    1d1e:	4f e7       	ldi	r20, 0x7F	; 127
    1d20:	57 e4       	ldi	r21, 0x47	; 71
    1d22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d26:	18 16       	cp	r1, r24
    1d28:	4c f5       	brge	.+82     	; 0x1d7c <LCD_init+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2a:	6d a9       	ldd	r22, Y+53	; 0x35
    1d2c:	7e a9       	ldd	r23, Y+54	; 0x36
    1d2e:	8f a9       	ldd	r24, Y+55	; 0x37
    1d30:	98 ad       	ldd	r25, Y+56	; 0x38
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	40 e2       	ldi	r20, 0x20	; 32
    1d38:	51 e4       	ldi	r21, 0x41	; 65
    1d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	bc 01       	movw	r22, r24
    1d44:	cd 01       	movw	r24, r26
    1d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	98 ab       	std	Y+48, r25	; 0x30
    1d50:	8f a7       	std	Y+47, r24	; 0x2f
    1d52:	0f c0       	rjmp	.+30     	; 0x1d72 <LCD_init+0x3b0>
    1d54:	88 ec       	ldi	r24, 0xC8	; 200
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	9e a7       	std	Y+46, r25	; 0x2e
    1d5a:	8d a7       	std	Y+45, r24	; 0x2d
    1d5c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d5e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	f1 f7       	brne	.-4      	; 0x1d60 <LCD_init+0x39e>
    1d64:	9e a7       	std	Y+46, r25	; 0x2e
    1d66:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d68:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d6a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d6c:	01 97       	sbiw	r24, 0x01	; 1
    1d6e:	98 ab       	std	Y+48, r25	; 0x30
    1d70:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d72:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d74:	98 a9       	ldd	r25, Y+48	; 0x30
    1d76:	00 97       	sbiw	r24, 0x00	; 0
    1d78:	69 f7       	brne	.-38     	; 0x1d54 <LCD_init+0x392>
    1d7a:	14 c0       	rjmp	.+40     	; 0x1da4 <LCD_init+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7c:	69 a9       	ldd	r22, Y+49	; 0x31
    1d7e:	7a a9       	ldd	r23, Y+50	; 0x32
    1d80:	8b a9       	ldd	r24, Y+51	; 0x33
    1d82:	9c a9       	ldd	r25, Y+52	; 0x34
    1d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	98 ab       	std	Y+48, r25	; 0x30
    1d8e:	8f a7       	std	Y+47, r24	; 0x2f
    1d90:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d92:	98 a9       	ldd	r25, Y+48	; 0x30
    1d94:	9c a7       	std	Y+44, r25	; 0x2c
    1d96:	8b a7       	std	Y+43, r24	; 0x2b
    1d98:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d9a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d9c:	01 97       	sbiw	r24, 0x01	; 1
    1d9e:	f1 f7       	brne	.-4      	; 0x1d9c <LCD_init+0x3da>
    1da0:	9c a7       	std	Y+44, r25	; 0x2c
    1da2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/* Display ON OFF Control */
	LCD_write_command(LCD_CFG ,lcd_DisplayOn);
    1da4:	fe 01       	movw	r30, r28
    1da6:	eb 5a       	subi	r30, 0xAB	; 171
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	60 81       	ld	r22, Z
    1dac:	71 81       	ldd	r23, Z+1	; 0x01
    1dae:	82 81       	ldd	r24, Z+2	; 0x02
    1db0:	93 81       	ldd	r25, Z+3	; 0x03
    1db2:	4c e0       	ldi	r20, 0x0C	; 12
    1db4:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <LCD_write_command>
    1db8:	80 e0       	ldi	r24, 0x00	; 0
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	a0 e8       	ldi	r26, 0x80	; 128
    1dbe:	bf e3       	ldi	r27, 0x3F	; 63
    1dc0:	8f a3       	std	Y+39, r24	; 0x27
    1dc2:	98 a7       	std	Y+40, r25	; 0x28
    1dc4:	a9 a7       	std	Y+41, r26	; 0x29
    1dc6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc8:	6f a1       	ldd	r22, Y+39	; 0x27
    1dca:	78 a5       	ldd	r23, Y+40	; 0x28
    1dcc:	89 a5       	ldd	r24, Y+41	; 0x29
    1dce:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	4a ef       	ldi	r20, 0xFA	; 250
    1dd6:	54 e4       	ldi	r21, 0x44	; 68
    1dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ddc:	dc 01       	movw	r26, r24
    1dde:	cb 01       	movw	r24, r22
    1de0:	8b a3       	std	Y+35, r24	; 0x23
    1de2:	9c a3       	std	Y+36, r25	; 0x24
    1de4:	ad a3       	std	Y+37, r26	; 0x25
    1de6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1de8:	6b a1       	ldd	r22, Y+35	; 0x23
    1dea:	7c a1       	ldd	r23, Y+36	; 0x24
    1dec:	8d a1       	ldd	r24, Y+37	; 0x25
    1dee:	9e a1       	ldd	r25, Y+38	; 0x26
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	40 e8       	ldi	r20, 0x80	; 128
    1df6:	5f e3       	ldi	r21, 0x3F	; 63
    1df8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dfc:	88 23       	and	r24, r24
    1dfe:	2c f4       	brge	.+10     	; 0x1e0a <LCD_init+0x448>
		__ticks = 1;
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	9a a3       	std	Y+34, r25	; 0x22
    1e06:	89 a3       	std	Y+33, r24	; 0x21
    1e08:	3f c0       	rjmp	.+126    	; 0x1e88 <LCD_init+0x4c6>
	else if (__tmp > 65535)
    1e0a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e0c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e0e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e10:	9e a1       	ldd	r25, Y+38	; 0x26
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	3f ef       	ldi	r19, 0xFF	; 255
    1e16:	4f e7       	ldi	r20, 0x7F	; 127
    1e18:	57 e4       	ldi	r21, 0x47	; 71
    1e1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e1e:	18 16       	cp	r1, r24
    1e20:	4c f5       	brge	.+82     	; 0x1e74 <LCD_init+0x4b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e22:	6f a1       	ldd	r22, Y+39	; 0x27
    1e24:	78 a5       	ldd	r23, Y+40	; 0x28
    1e26:	89 a5       	ldd	r24, Y+41	; 0x29
    1e28:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	40 e2       	ldi	r20, 0x20	; 32
    1e30:	51 e4       	ldi	r21, 0x41	; 65
    1e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	bc 01       	movw	r22, r24
    1e3c:	cd 01       	movw	r24, r26
    1e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	9a a3       	std	Y+34, r25	; 0x22
    1e48:	89 a3       	std	Y+33, r24	; 0x21
    1e4a:	0f c0       	rjmp	.+30     	; 0x1e6a <LCD_init+0x4a8>
    1e4c:	88 ec       	ldi	r24, 0xC8	; 200
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	98 a3       	std	Y+32, r25	; 0x20
    1e52:	8f 8f       	std	Y+31, r24	; 0x1f
    1e54:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e56:	98 a1       	ldd	r25, Y+32	; 0x20
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	f1 f7       	brne	.-4      	; 0x1e58 <LCD_init+0x496>
    1e5c:	98 a3       	std	Y+32, r25	; 0x20
    1e5e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e60:	89 a1       	ldd	r24, Y+33	; 0x21
    1e62:	9a a1       	ldd	r25, Y+34	; 0x22
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	9a a3       	std	Y+34, r25	; 0x22
    1e68:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e6c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e6e:	00 97       	sbiw	r24, 0x00	; 0
    1e70:	69 f7       	brne	.-38     	; 0x1e4c <LCD_init+0x48a>
    1e72:	14 c0       	rjmp	.+40     	; 0x1e9c <LCD_init+0x4da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e74:	6b a1       	ldd	r22, Y+35	; 0x23
    1e76:	7c a1       	ldd	r23, Y+36	; 0x24
    1e78:	8d a1       	ldd	r24, Y+37	; 0x25
    1e7a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	9a a3       	std	Y+34, r25	; 0x22
    1e86:	89 a3       	std	Y+33, r24	; 0x21
    1e88:	89 a1       	ldd	r24, Y+33	; 0x21
    1e8a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e8c:	9e 8f       	std	Y+30, r25	; 0x1e
    1e8e:	8d 8f       	std	Y+29, r24	; 0x1d
    1e90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e92:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e94:	01 97       	sbiw	r24, 0x01	; 1
    1e96:	f1 f7       	brne	.-4      	; 0x1e94 <LCD_init+0x4d2>
    1e98:	9e 8f       	std	Y+30, r25	; 0x1e
    1e9a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/* Clear Display */
	LCD_write_command(LCD_CFG ,lcd_Clear);
    1e9c:	fe 01       	movw	r30, r28
    1e9e:	eb 5a       	subi	r30, 0xAB	; 171
    1ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea2:	60 81       	ld	r22, Z
    1ea4:	71 81       	ldd	r23, Z+1	; 0x01
    1ea6:	82 81       	ldd	r24, Z+2	; 0x02
    1ea8:	93 81       	ldd	r25, Z+3	; 0x03
    1eaa:	41 e0       	ldi	r20, 0x01	; 1
    1eac:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <LCD_write_command>
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	a0 e7       	ldi	r26, 0x70	; 112
    1eb6:	b1 e4       	ldi	r27, 0x41	; 65
    1eb8:	89 8f       	std	Y+25, r24	; 0x19
    1eba:	9a 8f       	std	Y+26, r25	; 0x1a
    1ebc:	ab 8f       	std	Y+27, r26	; 0x1b
    1ebe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ec2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ec4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ec6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	4a ef       	ldi	r20, 0xFA	; 250
    1ece:	54 e4       	ldi	r21, 0x44	; 68
    1ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	8d 8b       	std	Y+21, r24	; 0x15
    1eda:	9e 8b       	std	Y+22, r25	; 0x16
    1edc:	af 8b       	std	Y+23, r26	; 0x17
    1ede:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ee0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ee2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ee4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ee6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	40 e8       	ldi	r20, 0x80	; 128
    1eee:	5f e3       	ldi	r21, 0x3F	; 63
    1ef0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ef4:	88 23       	and	r24, r24
    1ef6:	2c f4       	brge	.+10     	; 0x1f02 <LCD_init+0x540>
		__ticks = 1;
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	9c 8b       	std	Y+20, r25	; 0x14
    1efe:	8b 8b       	std	Y+19, r24	; 0x13
    1f00:	3f c0       	rjmp	.+126    	; 0x1f80 <LCD_init+0x5be>
	else if (__tmp > 65535)
    1f02:	6d 89       	ldd	r22, Y+21	; 0x15
    1f04:	7e 89       	ldd	r23, Y+22	; 0x16
    1f06:	8f 89       	ldd	r24, Y+23	; 0x17
    1f08:	98 8d       	ldd	r25, Y+24	; 0x18
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	3f ef       	ldi	r19, 0xFF	; 255
    1f0e:	4f e7       	ldi	r20, 0x7F	; 127
    1f10:	57 e4       	ldi	r21, 0x47	; 71
    1f12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f16:	18 16       	cp	r1, r24
    1f18:	4c f5       	brge	.+82     	; 0x1f6c <LCD_init+0x5aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f1a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	40 e2       	ldi	r20, 0x20	; 32
    1f28:	51 e4       	ldi	r21, 0x41	; 65
    1f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	bc 01       	movw	r22, r24
    1f34:	cd 01       	movw	r24, r26
    1f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	9c 8b       	std	Y+20, r25	; 0x14
    1f40:	8b 8b       	std	Y+19, r24	; 0x13
    1f42:	0f c0       	rjmp	.+30     	; 0x1f62 <LCD_init+0x5a0>
    1f44:	88 ec       	ldi	r24, 0xC8	; 200
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	9a 8b       	std	Y+18, r25	; 0x12
    1f4a:	89 8b       	std	Y+17, r24	; 0x11
    1f4c:	89 89       	ldd	r24, Y+17	; 0x11
    1f4e:	9a 89       	ldd	r25, Y+18	; 0x12
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	f1 f7       	brne	.-4      	; 0x1f50 <LCD_init+0x58e>
    1f54:	9a 8b       	std	Y+18, r25	; 0x12
    1f56:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f58:	8b 89       	ldd	r24, Y+19	; 0x13
    1f5a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	9c 8b       	std	Y+20, r25	; 0x14
    1f60:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f62:	8b 89       	ldd	r24, Y+19	; 0x13
    1f64:	9c 89       	ldd	r25, Y+20	; 0x14
    1f66:	00 97       	sbiw	r24, 0x00	; 0
    1f68:	69 f7       	brne	.-38     	; 0x1f44 <LCD_init+0x582>
    1f6a:	14 c0       	rjmp	.+40     	; 0x1f94 <LCD_init+0x5d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f6c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f6e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f70:	8f 89       	ldd	r24, Y+23	; 0x17
    1f72:	98 8d       	ldd	r25, Y+24	; 0x18
    1f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	9c 8b       	std	Y+20, r25	; 0x14
    1f7e:	8b 8b       	std	Y+19, r24	; 0x13
    1f80:	8b 89       	ldd	r24, Y+19	; 0x13
    1f82:	9c 89       	ldd	r25, Y+20	; 0x14
    1f84:	98 8b       	std	Y+16, r25	; 0x10
    1f86:	8f 87       	std	Y+15, r24	; 0x0f
    1f88:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f8a:	98 89       	ldd	r25, Y+16	; 0x10
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	f1 f7       	brne	.-4      	; 0x1f8c <LCD_init+0x5ca>
    1f90:	98 8b       	std	Y+16, r25	; 0x10
    1f92:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(15);

	/* Entry Mode Set  */
	LCD_write_command(LCD_CFG ,lcd_EntryMode);
    1f94:	fe 01       	movw	r30, r28
    1f96:	eb 5a       	subi	r30, 0xAB	; 171
    1f98:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9a:	60 81       	ld	r22, Z
    1f9c:	71 81       	ldd	r23, Z+1	; 0x01
    1f9e:	82 81       	ldd	r24, Z+2	; 0x02
    1fa0:	93 81       	ldd	r25, Z+3	; 0x03
    1fa2:	46 e0       	ldi	r20, 0x06	; 6
    1fa4:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <LCD_write_command>
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	a0 e0       	ldi	r26, 0x00	; 0
    1fae:	b0 e4       	ldi	r27, 0x40	; 64
    1fb0:	8b 87       	std	Y+11, r24	; 0x0b
    1fb2:	9c 87       	std	Y+12, r25	; 0x0c
    1fb4:	ad 87       	std	Y+13, r26	; 0x0d
    1fb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	4a ef       	ldi	r20, 0xFA	; 250
    1fc6:	54 e4       	ldi	r21, 0x44	; 68
    1fc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	8f 83       	std	Y+7, r24	; 0x07
    1fd2:	98 87       	std	Y+8, r25	; 0x08
    1fd4:	a9 87       	std	Y+9, r26	; 0x09
    1fd6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fda:	78 85       	ldd	r23, Y+8	; 0x08
    1fdc:	89 85       	ldd	r24, Y+9	; 0x09
    1fde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	40 e8       	ldi	r20, 0x80	; 128
    1fe6:	5f e3       	ldi	r21, 0x3F	; 63
    1fe8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fec:	88 23       	and	r24, r24
    1fee:	2c f4       	brge	.+10     	; 0x1ffa <LCD_init+0x638>
		__ticks = 1;
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	9e 83       	std	Y+6, r25	; 0x06
    1ff6:	8d 83       	std	Y+5, r24	; 0x05
    1ff8:	3f c0       	rjmp	.+126    	; 0x2078 <LCD_init+0x6b6>
	else if (__tmp > 65535)
    1ffa:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffc:	78 85       	ldd	r23, Y+8	; 0x08
    1ffe:	89 85       	ldd	r24, Y+9	; 0x09
    2000:	9a 85       	ldd	r25, Y+10	; 0x0a
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	3f ef       	ldi	r19, 0xFF	; 255
    2006:	4f e7       	ldi	r20, 0x7F	; 127
    2008:	57 e4       	ldi	r21, 0x47	; 71
    200a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    200e:	18 16       	cp	r1, r24
    2010:	4c f5       	brge	.+82     	; 0x2064 <LCD_init+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2012:	6b 85       	ldd	r22, Y+11	; 0x0b
    2014:	7c 85       	ldd	r23, Y+12	; 0x0c
    2016:	8d 85       	ldd	r24, Y+13	; 0x0d
    2018:	9e 85       	ldd	r25, Y+14	; 0x0e
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	40 e2       	ldi	r20, 0x20	; 32
    2020:	51 e4       	ldi	r21, 0x41	; 65
    2022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	bc 01       	movw	r22, r24
    202c:	cd 01       	movw	r24, r26
    202e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	9e 83       	std	Y+6, r25	; 0x06
    2038:	8d 83       	std	Y+5, r24	; 0x05
    203a:	0f c0       	rjmp	.+30     	; 0x205a <LCD_init+0x698>
    203c:	88 ec       	ldi	r24, 0xC8	; 200
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	9c 83       	std	Y+4, r25	; 0x04
    2042:	8b 83       	std	Y+3, r24	; 0x03
    2044:	8b 81       	ldd	r24, Y+3	; 0x03
    2046:	9c 81       	ldd	r25, Y+4	; 0x04
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	f1 f7       	brne	.-4      	; 0x2048 <LCD_init+0x686>
    204c:	9c 83       	std	Y+4, r25	; 0x04
    204e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2050:	8d 81       	ldd	r24, Y+5	; 0x05
    2052:	9e 81       	ldd	r25, Y+6	; 0x06
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	9e 83       	std	Y+6, r25	; 0x06
    2058:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    205a:	8d 81       	ldd	r24, Y+5	; 0x05
    205c:	9e 81       	ldd	r25, Y+6	; 0x06
    205e:	00 97       	sbiw	r24, 0x00	; 0
    2060:	69 f7       	brne	.-38     	; 0x203c <LCD_init+0x67a>
    2062:	14 c0       	rjmp	.+40     	; 0x208c <LCD_init+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2064:	6f 81       	ldd	r22, Y+7	; 0x07
    2066:	78 85       	ldd	r23, Y+8	; 0x08
    2068:	89 85       	ldd	r24, Y+9	; 0x09
    206a:	9a 85       	ldd	r25, Y+10	; 0x0a
    206c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	9e 83       	std	Y+6, r25	; 0x06
    2076:	8d 83       	std	Y+5, r24	; 0x05
    2078:	8d 81       	ldd	r24, Y+5	; 0x05
    207a:	9e 81       	ldd	r25, Y+6	; 0x06
    207c:	9a 83       	std	Y+2, r25	; 0x02
    207e:	89 83       	std	Y+1, r24	; 0x01
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	9a 81       	ldd	r25, Y+2	; 0x02
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	f1 f7       	brne	.-4      	; 0x2084 <LCD_init+0x6c2>
    2088:	9a 83       	std	Y+2, r25	; 0x02
    208a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    208c:	c8 5a       	subi	r28, 0xA8	; 168
    208e:	df 4f       	sbci	r29, 0xFF	; 255
    2090:	0f b6       	in	r0, 0x3f	; 63
    2092:	f8 94       	cli
    2094:	de bf       	out	0x3e, r29	; 62
    2096:	0f be       	out	0x3f, r0	; 63
    2098:	cd bf       	out	0x3d, r28	; 61
    209a:	cf 91       	pop	r28
    209c:	df 91       	pop	r29
    209e:	1f 91       	pop	r17
    20a0:	0f 91       	pop	r16
    20a2:	08 95       	ret

000020a4 <LCD_write_data>:
void LCD_write_data(LCD_CFG_t LCD_CFG , u8 data)
{
    20a4:	df 93       	push	r29
    20a6:	cf 93       	push	r28
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
    20ac:	a1 97       	sbiw	r28, 0x21	; 33
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	de bf       	out	0x3e, r29	; 62
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	cd bf       	out	0x3d, r28	; 61
    20b8:	6d 8f       	std	Y+29, r22	; 0x1d
    20ba:	7e 8f       	std	Y+30, r23	; 0x1e
    20bc:	8f 8f       	std	Y+31, r24	; 0x1f
    20be:	98 a3       	std	Y+32, r25	; 0x20
    20c0:	49 a3       	std	Y+33, r20	; 0x21
	/* Set RS to LOW */
	DIO_SET_PIN_VALUE(LCD_CFG.LCD_CNT.GroupControl,
    20c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20c4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20c6:	69 2f       	mov	r22, r25
    20c8:	41 e0       	ldi	r20, 0x01	; 1
    20ca:	0e 94 c0 09 	call	0x1380	; 0x1380 <DIO_SET_PIN_VALUE>
			LCD_CFG.LCD_CNT.RS_PIN,HIGH);
	/* Set E to HIGH  */
	DIO_SET_PIN_VALUE(LCD_CFG.LCD_CNT.GroupControl,
    20ce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20d0:	98 a1       	ldd	r25, Y+32	; 0x20
    20d2:	69 2f       	mov	r22, r25
    20d4:	41 e0       	ldi	r20, 0x01	; 1
    20d6:	0e 94 c0 09 	call	0x1380	; 0x1380 <DIO_SET_PIN_VALUE>
			LCD_CFG.LCD_CNT.E_PIN,HIGH);
	/* Load Command on Data bus */
	DIO_SET_GROUP_VALUE(LCD_CFG.GroupData,data);
    20da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20dc:	69 a1       	ldd	r22, Y+33	; 0x21
    20de:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <DIO_SET_GROUP_VALUE>
	/* Set E to LOW */
	DIO_SET_PIN_VALUE(LCD_CFG.LCD_CNT.GroupControl,
    20e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20e4:	98 a1       	ldd	r25, Y+32	; 0x20
    20e6:	69 2f       	mov	r22, r25
    20e8:	40 e0       	ldi	r20, 0x00	; 0
    20ea:	0e 94 c0 09 	call	0x1380	; 0x1380 <DIO_SET_PIN_VALUE>
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	a0 ea       	ldi	r26, 0xA0	; 160
    20f4:	b0 e4       	ldi	r27, 0x40	; 64
    20f6:	89 8f       	std	Y+25, r24	; 0x19
    20f8:	9a 8f       	std	Y+26, r25	; 0x1a
    20fa:	ab 8f       	std	Y+27, r26	; 0x1b
    20fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2100:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2102:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2104:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	4a ef       	ldi	r20, 0xFA	; 250
    210c:	54 e4       	ldi	r21, 0x44	; 68
    210e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	8d 8b       	std	Y+21, r24	; 0x15
    2118:	9e 8b       	std	Y+22, r25	; 0x16
    211a:	af 8b       	std	Y+23, r26	; 0x17
    211c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    211e:	6d 89       	ldd	r22, Y+21	; 0x15
    2120:	7e 89       	ldd	r23, Y+22	; 0x16
    2122:	8f 89       	ldd	r24, Y+23	; 0x17
    2124:	98 8d       	ldd	r25, Y+24	; 0x18
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	40 e8       	ldi	r20, 0x80	; 128
    212c:	5f e3       	ldi	r21, 0x3F	; 63
    212e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2132:	88 23       	and	r24, r24
    2134:	2c f4       	brge	.+10     	; 0x2140 <LCD_write_data+0x9c>
		__ticks = 1;
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	9c 8b       	std	Y+20, r25	; 0x14
    213c:	8b 8b       	std	Y+19, r24	; 0x13
    213e:	3f c0       	rjmp	.+126    	; 0x21be <LCD_write_data+0x11a>
	else if (__tmp > 65535)
    2140:	6d 89       	ldd	r22, Y+21	; 0x15
    2142:	7e 89       	ldd	r23, Y+22	; 0x16
    2144:	8f 89       	ldd	r24, Y+23	; 0x17
    2146:	98 8d       	ldd	r25, Y+24	; 0x18
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	3f ef       	ldi	r19, 0xFF	; 255
    214c:	4f e7       	ldi	r20, 0x7F	; 127
    214e:	57 e4       	ldi	r21, 0x47	; 71
    2150:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2154:	18 16       	cp	r1, r24
    2156:	4c f5       	brge	.+82     	; 0x21aa <LCD_write_data+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2158:	69 8d       	ldd	r22, Y+25	; 0x19
    215a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    215c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    215e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	40 e2       	ldi	r20, 0x20	; 32
    2166:	51 e4       	ldi	r21, 0x41	; 65
    2168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	bc 01       	movw	r22, r24
    2172:	cd 01       	movw	r24, r26
    2174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	9c 8b       	std	Y+20, r25	; 0x14
    217e:	8b 8b       	std	Y+19, r24	; 0x13
    2180:	0f c0       	rjmp	.+30     	; 0x21a0 <LCD_write_data+0xfc>
    2182:	88 ec       	ldi	r24, 0xC8	; 200
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	9a 8b       	std	Y+18, r25	; 0x12
    2188:	89 8b       	std	Y+17, r24	; 0x11
    218a:	89 89       	ldd	r24, Y+17	; 0x11
    218c:	9a 89       	ldd	r25, Y+18	; 0x12
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	f1 f7       	brne	.-4      	; 0x218e <LCD_write_data+0xea>
    2192:	9a 8b       	std	Y+18, r25	; 0x12
    2194:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2196:	8b 89       	ldd	r24, Y+19	; 0x13
    2198:	9c 89       	ldd	r25, Y+20	; 0x14
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	9c 8b       	std	Y+20, r25	; 0x14
    219e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a0:	8b 89       	ldd	r24, Y+19	; 0x13
    21a2:	9c 89       	ldd	r25, Y+20	; 0x14
    21a4:	00 97       	sbiw	r24, 0x00	; 0
    21a6:	69 f7       	brne	.-38     	; 0x2182 <LCD_write_data+0xde>
    21a8:	14 c0       	rjmp	.+40     	; 0x21d2 <LCD_write_data+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21aa:	6d 89       	ldd	r22, Y+21	; 0x15
    21ac:	7e 89       	ldd	r23, Y+22	; 0x16
    21ae:	8f 89       	ldd	r24, Y+23	; 0x17
    21b0:	98 8d       	ldd	r25, Y+24	; 0x18
    21b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	9c 8b       	std	Y+20, r25	; 0x14
    21bc:	8b 8b       	std	Y+19, r24	; 0x13
    21be:	8b 89       	ldd	r24, Y+19	; 0x13
    21c0:	9c 89       	ldd	r25, Y+20	; 0x14
    21c2:	98 8b       	std	Y+16, r25	; 0x10
    21c4:	8f 87       	std	Y+15, r24	; 0x0f
    21c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c8:	98 89       	ldd	r25, Y+16	; 0x10
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	f1 f7       	brne	.-4      	; 0x21ca <LCD_write_data+0x126>
    21ce:	98 8b       	std	Y+16, r25	; 0x10
    21d0:	8f 87       	std	Y+15, r24	; 0x0f
			LCD_CFG.LCD_CNT.E_PIN,LOW);
	/* Wait for E to settle */
	_delay_ms(5);
	/* Set E to HIGH */
	DIO_SET_PIN_VALUE(LCD_CFG.LCD_CNT.GroupControl,
    21d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21d4:	98 a1       	ldd	r25, Y+32	; 0x20
    21d6:	69 2f       	mov	r22, r25
    21d8:	41 e0       	ldi	r20, 0x01	; 1
    21da:	0e 94 c0 09 	call	0x1380	; 0x1380 <DIO_SET_PIN_VALUE>
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	a0 e2       	ldi	r26, 0x20	; 32
    21e4:	b1 e4       	ldi	r27, 0x41	; 65
    21e6:	8b 87       	std	Y+11, r24	; 0x0b
    21e8:	9c 87       	std	Y+12, r25	; 0x0c
    21ea:	ad 87       	std	Y+13, r26	; 0x0d
    21ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	4a ef       	ldi	r20, 0xFA	; 250
    21fc:	54 e4       	ldi	r21, 0x44	; 68
    21fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	8f 83       	std	Y+7, r24	; 0x07
    2208:	98 87       	std	Y+8, r25	; 0x08
    220a:	a9 87       	std	Y+9, r26	; 0x09
    220c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    220e:	6f 81       	ldd	r22, Y+7	; 0x07
    2210:	78 85       	ldd	r23, Y+8	; 0x08
    2212:	89 85       	ldd	r24, Y+9	; 0x09
    2214:	9a 85       	ldd	r25, Y+10	; 0x0a
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	40 e8       	ldi	r20, 0x80	; 128
    221c:	5f e3       	ldi	r21, 0x3F	; 63
    221e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2222:	88 23       	and	r24, r24
    2224:	2c f4       	brge	.+10     	; 0x2230 <LCD_write_data+0x18c>
		__ticks = 1;
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	9e 83       	std	Y+6, r25	; 0x06
    222c:	8d 83       	std	Y+5, r24	; 0x05
    222e:	3f c0       	rjmp	.+126    	; 0x22ae <LCD_write_data+0x20a>
	else if (__tmp > 65535)
    2230:	6f 81       	ldd	r22, Y+7	; 0x07
    2232:	78 85       	ldd	r23, Y+8	; 0x08
    2234:	89 85       	ldd	r24, Y+9	; 0x09
    2236:	9a 85       	ldd	r25, Y+10	; 0x0a
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	3f ef       	ldi	r19, 0xFF	; 255
    223c:	4f e7       	ldi	r20, 0x7F	; 127
    223e:	57 e4       	ldi	r21, 0x47	; 71
    2240:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2244:	18 16       	cp	r1, r24
    2246:	4c f5       	brge	.+82     	; 0x229a <LCD_write_data+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2248:	6b 85       	ldd	r22, Y+11	; 0x0b
    224a:	7c 85       	ldd	r23, Y+12	; 0x0c
    224c:	8d 85       	ldd	r24, Y+13	; 0x0d
    224e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	40 e2       	ldi	r20, 0x20	; 32
    2256:	51 e4       	ldi	r21, 0x41	; 65
    2258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	bc 01       	movw	r22, r24
    2262:	cd 01       	movw	r24, r26
    2264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	9e 83       	std	Y+6, r25	; 0x06
    226e:	8d 83       	std	Y+5, r24	; 0x05
    2270:	0f c0       	rjmp	.+30     	; 0x2290 <LCD_write_data+0x1ec>
    2272:	88 ec       	ldi	r24, 0xC8	; 200
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	9c 83       	std	Y+4, r25	; 0x04
    2278:	8b 83       	std	Y+3, r24	; 0x03
    227a:	8b 81       	ldd	r24, Y+3	; 0x03
    227c:	9c 81       	ldd	r25, Y+4	; 0x04
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	f1 f7       	brne	.-4      	; 0x227e <LCD_write_data+0x1da>
    2282:	9c 83       	std	Y+4, r25	; 0x04
    2284:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2286:	8d 81       	ldd	r24, Y+5	; 0x05
    2288:	9e 81       	ldd	r25, Y+6	; 0x06
    228a:	01 97       	sbiw	r24, 0x01	; 1
    228c:	9e 83       	std	Y+6, r25	; 0x06
    228e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2290:	8d 81       	ldd	r24, Y+5	; 0x05
    2292:	9e 81       	ldd	r25, Y+6	; 0x06
    2294:	00 97       	sbiw	r24, 0x00	; 0
    2296:	69 f7       	brne	.-38     	; 0x2272 <LCD_write_data+0x1ce>
    2298:	14 c0       	rjmp	.+40     	; 0x22c2 <LCD_write_data+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    229a:	6f 81       	ldd	r22, Y+7	; 0x07
    229c:	78 85       	ldd	r23, Y+8	; 0x08
    229e:	89 85       	ldd	r24, Y+9	; 0x09
    22a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	9e 83       	std	Y+6, r25	; 0x06
    22ac:	8d 83       	std	Y+5, r24	; 0x05
    22ae:	8d 81       	ldd	r24, Y+5	; 0x05
    22b0:	9e 81       	ldd	r25, Y+6	; 0x06
    22b2:	9a 83       	std	Y+2, r25	; 0x02
    22b4:	89 83       	std	Y+1, r24	; 0x01
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ba:	01 97       	sbiw	r24, 0x01	; 1
    22bc:	f1 f7       	brne	.-4      	; 0x22ba <LCD_write_data+0x216>
    22be:	9a 83       	std	Y+2, r25	; 0x02
    22c0:	89 83       	std	Y+1, r24	; 0x01
			LCD_CFG.LCD_CNT.E_PIN,HIGH);
	/* Delay for 10ms to let the LCD execute command */
	_delay_ms(10);
}
    22c2:	a1 96       	adiw	r28, 0x21	; 33
    22c4:	0f b6       	in	r0, 0x3f	; 63
    22c6:	f8 94       	cli
    22c8:	de bf       	out	0x3e, r29	; 62
    22ca:	0f be       	out	0x3f, r0	; 63
    22cc:	cd bf       	out	0x3d, r28	; 61
    22ce:	cf 91       	pop	r28
    22d0:	df 91       	pop	r29
    22d2:	08 95       	ret

000022d4 <LCD_write_command>:
void LCD_write_command(LCD_CFG_t LCD_CFG , u8 command)
{
    22d4:	df 93       	push	r29
    22d6:	cf 93       	push	r28
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
    22dc:	a1 97       	sbiw	r28, 0x21	; 33
    22de:	0f b6       	in	r0, 0x3f	; 63
    22e0:	f8 94       	cli
    22e2:	de bf       	out	0x3e, r29	; 62
    22e4:	0f be       	out	0x3f, r0	; 63
    22e6:	cd bf       	out	0x3d, r28	; 61
    22e8:	6d 8f       	std	Y+29, r22	; 0x1d
    22ea:	7e 8f       	std	Y+30, r23	; 0x1e
    22ec:	8f 8f       	std	Y+31, r24	; 0x1f
    22ee:	98 a3       	std	Y+32, r25	; 0x20
    22f0:	49 a3       	std	Y+33, r20	; 0x21
	/* Set RS to LOW */
	DIO_SET_PIN_VALUE(LCD_CFG.LCD_CNT.GroupControl,
    22f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22f4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22f6:	69 2f       	mov	r22, r25
    22f8:	40 e0       	ldi	r20, 0x00	; 0
    22fa:	0e 94 c0 09 	call	0x1380	; 0x1380 <DIO_SET_PIN_VALUE>
			LCD_CFG.LCD_CNT.RS_PIN,LOW);
	/* Set E to HIGH  */
	DIO_SET_PIN_VALUE(LCD_CFG.LCD_CNT.GroupControl,
    22fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2300:	98 a1       	ldd	r25, Y+32	; 0x20
    2302:	69 2f       	mov	r22, r25
    2304:	41 e0       	ldi	r20, 0x01	; 1
    2306:	0e 94 c0 09 	call	0x1380	; 0x1380 <DIO_SET_PIN_VALUE>
			LCD_CFG.LCD_CNT.E_PIN,HIGH);
	/* Load Command on Data bus */
	DIO_SET_GROUP_VALUE(LCD_CFG.GroupData,command);
    230a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    230c:	69 a1       	ldd	r22, Y+33	; 0x21
    230e:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <DIO_SET_GROUP_VALUE>
	/* Set E to LOW */
	DIO_SET_PIN_VALUE(LCD_CFG.LCD_CNT.GroupControl,
    2312:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2314:	98 a1       	ldd	r25, Y+32	; 0x20
    2316:	69 2f       	mov	r22, r25
    2318:	40 e0       	ldi	r20, 0x00	; 0
    231a:	0e 94 c0 09 	call	0x1380	; 0x1380 <DIO_SET_PIN_VALUE>
    231e:	80 e0       	ldi	r24, 0x00	; 0
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	a0 ea       	ldi	r26, 0xA0	; 160
    2324:	b0 e4       	ldi	r27, 0x40	; 64
    2326:	89 8f       	std	Y+25, r24	; 0x19
    2328:	9a 8f       	std	Y+26, r25	; 0x1a
    232a:	ab 8f       	std	Y+27, r26	; 0x1b
    232c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    232e:	69 8d       	ldd	r22, Y+25	; 0x19
    2330:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2332:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2334:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	4a ef       	ldi	r20, 0xFA	; 250
    233c:	54 e4       	ldi	r21, 0x44	; 68
    233e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	8d 8b       	std	Y+21, r24	; 0x15
    2348:	9e 8b       	std	Y+22, r25	; 0x16
    234a:	af 8b       	std	Y+23, r26	; 0x17
    234c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    234e:	6d 89       	ldd	r22, Y+21	; 0x15
    2350:	7e 89       	ldd	r23, Y+22	; 0x16
    2352:	8f 89       	ldd	r24, Y+23	; 0x17
    2354:	98 8d       	ldd	r25, Y+24	; 0x18
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	40 e8       	ldi	r20, 0x80	; 128
    235c:	5f e3       	ldi	r21, 0x3F	; 63
    235e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2362:	88 23       	and	r24, r24
    2364:	2c f4       	brge	.+10     	; 0x2370 <LCD_write_command+0x9c>
		__ticks = 1;
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	9c 8b       	std	Y+20, r25	; 0x14
    236c:	8b 8b       	std	Y+19, r24	; 0x13
    236e:	3f c0       	rjmp	.+126    	; 0x23ee <LCD_write_command+0x11a>
	else if (__tmp > 65535)
    2370:	6d 89       	ldd	r22, Y+21	; 0x15
    2372:	7e 89       	ldd	r23, Y+22	; 0x16
    2374:	8f 89       	ldd	r24, Y+23	; 0x17
    2376:	98 8d       	ldd	r25, Y+24	; 0x18
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	3f ef       	ldi	r19, 0xFF	; 255
    237c:	4f e7       	ldi	r20, 0x7F	; 127
    237e:	57 e4       	ldi	r21, 0x47	; 71
    2380:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2384:	18 16       	cp	r1, r24
    2386:	4c f5       	brge	.+82     	; 0x23da <LCD_write_command+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2388:	69 8d       	ldd	r22, Y+25	; 0x19
    238a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    238c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    238e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e2       	ldi	r20, 0x20	; 32
    2396:	51 e4       	ldi	r21, 0x41	; 65
    2398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	bc 01       	movw	r22, r24
    23a2:	cd 01       	movw	r24, r26
    23a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	9c 8b       	std	Y+20, r25	; 0x14
    23ae:	8b 8b       	std	Y+19, r24	; 0x13
    23b0:	0f c0       	rjmp	.+30     	; 0x23d0 <LCD_write_command+0xfc>
    23b2:	88 ec       	ldi	r24, 0xC8	; 200
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	9a 8b       	std	Y+18, r25	; 0x12
    23b8:	89 8b       	std	Y+17, r24	; 0x11
    23ba:	89 89       	ldd	r24, Y+17	; 0x11
    23bc:	9a 89       	ldd	r25, Y+18	; 0x12
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	f1 f7       	brne	.-4      	; 0x23be <LCD_write_command+0xea>
    23c2:	9a 8b       	std	Y+18, r25	; 0x12
    23c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c6:	8b 89       	ldd	r24, Y+19	; 0x13
    23c8:	9c 89       	ldd	r25, Y+20	; 0x14
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	9c 8b       	std	Y+20, r25	; 0x14
    23ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d0:	8b 89       	ldd	r24, Y+19	; 0x13
    23d2:	9c 89       	ldd	r25, Y+20	; 0x14
    23d4:	00 97       	sbiw	r24, 0x00	; 0
    23d6:	69 f7       	brne	.-38     	; 0x23b2 <LCD_write_command+0xde>
    23d8:	14 c0       	rjmp	.+40     	; 0x2402 <LCD_write_command+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23da:	6d 89       	ldd	r22, Y+21	; 0x15
    23dc:	7e 89       	ldd	r23, Y+22	; 0x16
    23de:	8f 89       	ldd	r24, Y+23	; 0x17
    23e0:	98 8d       	ldd	r25, Y+24	; 0x18
    23e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	9c 8b       	std	Y+20, r25	; 0x14
    23ec:	8b 8b       	std	Y+19, r24	; 0x13
    23ee:	8b 89       	ldd	r24, Y+19	; 0x13
    23f0:	9c 89       	ldd	r25, Y+20	; 0x14
    23f2:	98 8b       	std	Y+16, r25	; 0x10
    23f4:	8f 87       	std	Y+15, r24	; 0x0f
    23f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    23f8:	98 89       	ldd	r25, Y+16	; 0x10
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	f1 f7       	brne	.-4      	; 0x23fa <LCD_write_command+0x126>
    23fe:	98 8b       	std	Y+16, r25	; 0x10
    2400:	8f 87       	std	Y+15, r24	; 0x0f
			LCD_CFG.LCD_CNT.E_PIN,LOW);
	/* Wait for E to settle */
	_delay_ms(5);
	/* Set E to HIGH */
	DIO_SET_PIN_VALUE(LCD_CFG.LCD_CNT.GroupControl,
    2402:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2404:	98 a1       	ldd	r25, Y+32	; 0x20
    2406:	69 2f       	mov	r22, r25
    2408:	41 e0       	ldi	r20, 0x01	; 1
    240a:	0e 94 c0 09 	call	0x1380	; 0x1380 <DIO_SET_PIN_VALUE>
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	a0 e2       	ldi	r26, 0x20	; 32
    2414:	b1 e4       	ldi	r27, 0x41	; 65
    2416:	8b 87       	std	Y+11, r24	; 0x0b
    2418:	9c 87       	std	Y+12, r25	; 0x0c
    241a:	ad 87       	std	Y+13, r26	; 0x0d
    241c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    241e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2420:	7c 85       	ldd	r23, Y+12	; 0x0c
    2422:	8d 85       	ldd	r24, Y+13	; 0x0d
    2424:	9e 85       	ldd	r25, Y+14	; 0x0e
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	4a ef       	ldi	r20, 0xFA	; 250
    242c:	54 e4       	ldi	r21, 0x44	; 68
    242e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	8f 83       	std	Y+7, r24	; 0x07
    2438:	98 87       	std	Y+8, r25	; 0x08
    243a:	a9 87       	std	Y+9, r26	; 0x09
    243c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    243e:	6f 81       	ldd	r22, Y+7	; 0x07
    2440:	78 85       	ldd	r23, Y+8	; 0x08
    2442:	89 85       	ldd	r24, Y+9	; 0x09
    2444:	9a 85       	ldd	r25, Y+10	; 0x0a
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	40 e8       	ldi	r20, 0x80	; 128
    244c:	5f e3       	ldi	r21, 0x3F	; 63
    244e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2452:	88 23       	and	r24, r24
    2454:	2c f4       	brge	.+10     	; 0x2460 <LCD_write_command+0x18c>
		__ticks = 1;
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	9e 83       	std	Y+6, r25	; 0x06
    245c:	8d 83       	std	Y+5, r24	; 0x05
    245e:	3f c0       	rjmp	.+126    	; 0x24de <LCD_write_command+0x20a>
	else if (__tmp > 65535)
    2460:	6f 81       	ldd	r22, Y+7	; 0x07
    2462:	78 85       	ldd	r23, Y+8	; 0x08
    2464:	89 85       	ldd	r24, Y+9	; 0x09
    2466:	9a 85       	ldd	r25, Y+10	; 0x0a
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	3f ef       	ldi	r19, 0xFF	; 255
    246c:	4f e7       	ldi	r20, 0x7F	; 127
    246e:	57 e4       	ldi	r21, 0x47	; 71
    2470:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2474:	18 16       	cp	r1, r24
    2476:	4c f5       	brge	.+82     	; 0x24ca <LCD_write_command+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2478:	6b 85       	ldd	r22, Y+11	; 0x0b
    247a:	7c 85       	ldd	r23, Y+12	; 0x0c
    247c:	8d 85       	ldd	r24, Y+13	; 0x0d
    247e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	40 e2       	ldi	r20, 0x20	; 32
    2486:	51 e4       	ldi	r21, 0x41	; 65
    2488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	bc 01       	movw	r22, r24
    2492:	cd 01       	movw	r24, r26
    2494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	9e 83       	std	Y+6, r25	; 0x06
    249e:	8d 83       	std	Y+5, r24	; 0x05
    24a0:	0f c0       	rjmp	.+30     	; 0x24c0 <LCD_write_command+0x1ec>
    24a2:	88 ec       	ldi	r24, 0xC8	; 200
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	9c 83       	std	Y+4, r25	; 0x04
    24a8:	8b 83       	std	Y+3, r24	; 0x03
    24aa:	8b 81       	ldd	r24, Y+3	; 0x03
    24ac:	9c 81       	ldd	r25, Y+4	; 0x04
    24ae:	01 97       	sbiw	r24, 0x01	; 1
    24b0:	f1 f7       	brne	.-4      	; 0x24ae <LCD_write_command+0x1da>
    24b2:	9c 83       	std	Y+4, r25	; 0x04
    24b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b6:	8d 81       	ldd	r24, Y+5	; 0x05
    24b8:	9e 81       	ldd	r25, Y+6	; 0x06
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	9e 83       	std	Y+6, r25	; 0x06
    24be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c0:	8d 81       	ldd	r24, Y+5	; 0x05
    24c2:	9e 81       	ldd	r25, Y+6	; 0x06
    24c4:	00 97       	sbiw	r24, 0x00	; 0
    24c6:	69 f7       	brne	.-38     	; 0x24a2 <LCD_write_command+0x1ce>
    24c8:	14 c0       	rjmp	.+40     	; 0x24f2 <LCD_write_command+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ca:	6f 81       	ldd	r22, Y+7	; 0x07
    24cc:	78 85       	ldd	r23, Y+8	; 0x08
    24ce:	89 85       	ldd	r24, Y+9	; 0x09
    24d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	9e 83       	std	Y+6, r25	; 0x06
    24dc:	8d 83       	std	Y+5, r24	; 0x05
    24de:	8d 81       	ldd	r24, Y+5	; 0x05
    24e0:	9e 81       	ldd	r25, Y+6	; 0x06
    24e2:	9a 83       	std	Y+2, r25	; 0x02
    24e4:	89 83       	std	Y+1, r24	; 0x01
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
    24e8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	f1 f7       	brne	.-4      	; 0x24ea <LCD_write_command+0x216>
    24ee:	9a 83       	std	Y+2, r25	; 0x02
    24f0:	89 83       	std	Y+1, r24	; 0x01
			LCD_CFG.LCD_CNT.E_PIN,HIGH);
	/* Delay for 10ms to let the LCD execute command */
	_delay_ms(10);
}
    24f2:	a1 96       	adiw	r28, 0x21	; 33
    24f4:	0f b6       	in	r0, 0x3f	; 63
    24f6:	f8 94       	cli
    24f8:	de bf       	out	0x3e, r29	; 62
    24fa:	0f be       	out	0x3f, r0	; 63
    24fc:	cd bf       	out	0x3d, r28	; 61
    24fe:	cf 91       	pop	r28
    2500:	df 91       	pop	r29
    2502:	08 95       	ret

00002504 <LCD_write_string>:
void LCD_write_string(LCD_CFG_t LCD_CFG , u8* string)
{
    2504:	df 93       	push	r29
    2506:	cf 93       	push	r28
    2508:	cd b7       	in	r28, 0x3d	; 61
    250a:	de b7       	in	r29, 0x3e	; 62
    250c:	65 97       	sbiw	r28, 0x15	; 21
    250e:	0f b6       	in	r0, 0x3f	; 63
    2510:	f8 94       	cli
    2512:	de bf       	out	0x3e, r29	; 62
    2514:	0f be       	out	0x3f, r0	; 63
    2516:	cd bf       	out	0x3d, r28	; 61
    2518:	68 8b       	std	Y+16, r22	; 0x10
    251a:	79 8b       	std	Y+17, r23	; 0x11
    251c:	8a 8b       	std	Y+18, r24	; 0x12
    251e:	9b 8b       	std	Y+19, r25	; 0x13
    2520:	5d 8b       	std	Y+21, r21	; 0x15
    2522:	4c 8b       	std	Y+20, r20	; 0x14
	u8 u8Index = 0;
    2524:	1f 86       	std	Y+15, r1	; 0x0f
    2526:	85 c0       	rjmp	.+266    	; 0x2632 <LCD_write_string+0x12e>
	/* loop until the null character*/
	while (string[u8Index] != '\0')
	{
		/* Write Character on LCD */
		LCD_write_data(LCD_CFG,string[u8Index]);
    2528:	8f 85       	ldd	r24, Y+15	; 0x0f
    252a:	28 2f       	mov	r18, r24
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	8c 89       	ldd	r24, Y+20	; 0x14
    2530:	9d 89       	ldd	r25, Y+21	; 0x15
    2532:	fc 01       	movw	r30, r24
    2534:	e2 0f       	add	r30, r18
    2536:	f3 1f       	adc	r31, r19
    2538:	20 81       	ld	r18, Z
    253a:	68 89       	ldd	r22, Y+16	; 0x10
    253c:	79 89       	ldd	r23, Y+17	; 0x11
    253e:	8a 89       	ldd	r24, Y+18	; 0x12
    2540:	9b 89       	ldd	r25, Y+19	; 0x13
    2542:	42 2f       	mov	r20, r18
    2544:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_write_data>
		/* Increment local loop index */
		u8Index++;
    2548:	8f 85       	ldd	r24, Y+15	; 0x0f
    254a:	8f 5f       	subi	r24, 0xFF	; 255
    254c:	8f 87       	std	Y+15, r24	; 0x0f
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	a0 e0       	ldi	r26, 0x00	; 0
    2554:	b0 e4       	ldi	r27, 0x40	; 64
    2556:	8b 87       	std	Y+11, r24	; 0x0b
    2558:	9c 87       	std	Y+12, r25	; 0x0c
    255a:	ad 87       	std	Y+13, r26	; 0x0d
    255c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    255e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2560:	7c 85       	ldd	r23, Y+12	; 0x0c
    2562:	8d 85       	ldd	r24, Y+13	; 0x0d
    2564:	9e 85       	ldd	r25, Y+14	; 0x0e
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	4a ef       	ldi	r20, 0xFA	; 250
    256c:	54 e4       	ldi	r21, 0x44	; 68
    256e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	8f 83       	std	Y+7, r24	; 0x07
    2578:	98 87       	std	Y+8, r25	; 0x08
    257a:	a9 87       	std	Y+9, r26	; 0x09
    257c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    257e:	6f 81       	ldd	r22, Y+7	; 0x07
    2580:	78 85       	ldd	r23, Y+8	; 0x08
    2582:	89 85       	ldd	r24, Y+9	; 0x09
    2584:	9a 85       	ldd	r25, Y+10	; 0x0a
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	40 e8       	ldi	r20, 0x80	; 128
    258c:	5f e3       	ldi	r21, 0x3F	; 63
    258e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2592:	88 23       	and	r24, r24
    2594:	2c f4       	brge	.+10     	; 0x25a0 <LCD_write_string+0x9c>
		__ticks = 1;
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	9e 83       	std	Y+6, r25	; 0x06
    259c:	8d 83       	std	Y+5, r24	; 0x05
    259e:	3f c0       	rjmp	.+126    	; 0x261e <LCD_write_string+0x11a>
	else if (__tmp > 65535)
    25a0:	6f 81       	ldd	r22, Y+7	; 0x07
    25a2:	78 85       	ldd	r23, Y+8	; 0x08
    25a4:	89 85       	ldd	r24, Y+9	; 0x09
    25a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	3f ef       	ldi	r19, 0xFF	; 255
    25ac:	4f e7       	ldi	r20, 0x7F	; 127
    25ae:	57 e4       	ldi	r21, 0x47	; 71
    25b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25b4:	18 16       	cp	r1, r24
    25b6:	4c f5       	brge	.+82     	; 0x260a <LCD_write_string+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    25bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    25be:	9e 85       	ldd	r25, Y+14	; 0x0e
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	40 e2       	ldi	r20, 0x20	; 32
    25c6:	51 e4       	ldi	r21, 0x41	; 65
    25c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25cc:	dc 01       	movw	r26, r24
    25ce:	cb 01       	movw	r24, r22
    25d0:	bc 01       	movw	r22, r24
    25d2:	cd 01       	movw	r24, r26
    25d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	9e 83       	std	Y+6, r25	; 0x06
    25de:	8d 83       	std	Y+5, r24	; 0x05
    25e0:	0f c0       	rjmp	.+30     	; 0x2600 <LCD_write_string+0xfc>
    25e2:	88 ec       	ldi	r24, 0xC8	; 200
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	9c 83       	std	Y+4, r25	; 0x04
    25e8:	8b 83       	std	Y+3, r24	; 0x03
    25ea:	8b 81       	ldd	r24, Y+3	; 0x03
    25ec:	9c 81       	ldd	r25, Y+4	; 0x04
    25ee:	01 97       	sbiw	r24, 0x01	; 1
    25f0:	f1 f7       	brne	.-4      	; 0x25ee <LCD_write_string+0xea>
    25f2:	9c 83       	std	Y+4, r25	; 0x04
    25f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f6:	8d 81       	ldd	r24, Y+5	; 0x05
    25f8:	9e 81       	ldd	r25, Y+6	; 0x06
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	9e 83       	std	Y+6, r25	; 0x06
    25fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2600:	8d 81       	ldd	r24, Y+5	; 0x05
    2602:	9e 81       	ldd	r25, Y+6	; 0x06
    2604:	00 97       	sbiw	r24, 0x00	; 0
    2606:	69 f7       	brne	.-38     	; 0x25e2 <LCD_write_string+0xde>
    2608:	14 c0       	rjmp	.+40     	; 0x2632 <LCD_write_string+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    260a:	6f 81       	ldd	r22, Y+7	; 0x07
    260c:	78 85       	ldd	r23, Y+8	; 0x08
    260e:	89 85       	ldd	r24, Y+9	; 0x09
    2610:	9a 85       	ldd	r25, Y+10	; 0x0a
    2612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	9e 83       	std	Y+6, r25	; 0x06
    261c:	8d 83       	std	Y+5, r24	; 0x05
    261e:	8d 81       	ldd	r24, Y+5	; 0x05
    2620:	9e 81       	ldd	r25, Y+6	; 0x06
    2622:	9a 83       	std	Y+2, r25	; 0x02
    2624:	89 83       	std	Y+1, r24	; 0x01
    2626:	89 81       	ldd	r24, Y+1	; 0x01
    2628:	9a 81       	ldd	r25, Y+2	; 0x02
    262a:	01 97       	sbiw	r24, 0x01	; 1
    262c:	f1 f7       	brne	.-4      	; 0x262a <LCD_write_string+0x126>
    262e:	9a 83       	std	Y+2, r25	; 0x02
    2630:	89 83       	std	Y+1, r24	; 0x01
}
void LCD_write_string(LCD_CFG_t LCD_CFG , u8* string)
{
	u8 u8Index = 0;
	/* loop until the null character*/
	while (string[u8Index] != '\0')
    2632:	8f 85       	ldd	r24, Y+15	; 0x0f
    2634:	28 2f       	mov	r18, r24
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	8c 89       	ldd	r24, Y+20	; 0x14
    263a:	9d 89       	ldd	r25, Y+21	; 0x15
    263c:	fc 01       	movw	r30, r24
    263e:	e2 0f       	add	r30, r18
    2640:	f3 1f       	adc	r31, r19
    2642:	80 81       	ld	r24, Z
    2644:	88 23       	and	r24, r24
    2646:	09 f0       	breq	.+2      	; 0x264a <LCD_write_string+0x146>
    2648:	6f cf       	rjmp	.-290    	; 0x2528 <LCD_write_string+0x24>
		/* Increment local loop index */
		u8Index++;
		/* Delay to let the LCD show the character */
		_delay_ms(2);
	}
}
    264a:	65 96       	adiw	r28, 0x15	; 21
    264c:	0f b6       	in	r0, 0x3f	; 63
    264e:	f8 94       	cli
    2650:	de bf       	out	0x3e, r29	; 62
    2652:	0f be       	out	0x3f, r0	; 63
    2654:	cd bf       	out	0x3d, r28	; 61
    2656:	cf 91       	pop	r28
    2658:	df 91       	pop	r29
    265a:	08 95       	ret

0000265c <LCD_goto_xy>:
void LCD_goto_xy(LCD_CFG_t LCD_CFG , COL_t col , ROW_t row)
{
    265c:	df 93       	push	r29
    265e:	cf 93       	push	r28
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
    2664:	28 97       	sbiw	r28, 0x08	; 8
    2666:	0f b6       	in	r0, 0x3f	; 63
    2668:	f8 94       	cli
    266a:	de bf       	out	0x3e, r29	; 62
    266c:	0f be       	out	0x3f, r0	; 63
    266e:	cd bf       	out	0x3d, r28	; 61
    2670:	69 83       	std	Y+1, r22	; 0x01
    2672:	7a 83       	std	Y+2, r23	; 0x02
    2674:	8b 83       	std	Y+3, r24	; 0x03
    2676:	9c 83       	std	Y+4, r25	; 0x04
    2678:	4d 83       	std	Y+5, r20	; 0x05
    267a:	2e 83       	std	Y+6, r18	; 0x06
	if (col >= col_0 && col <= col_15)
    267c:	8d 81       	ldd	r24, Y+5	; 0x05
    267e:	80 31       	cpi	r24, 0x10	; 16
    2680:	28 f5       	brcc	.+74     	; 0x26cc <LCD_goto_xy+0x70>
	{
		switch(row)
    2682:	8e 81       	ldd	r24, Y+6	; 0x06
    2684:	28 2f       	mov	r18, r24
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	38 87       	std	Y+8, r19	; 0x08
    268a:	2f 83       	std	Y+7, r18	; 0x07
    268c:	8f 81       	ldd	r24, Y+7	; 0x07
    268e:	98 85       	ldd	r25, Y+8	; 0x08
    2690:	00 97       	sbiw	r24, 0x00	; 0
    2692:	31 f0       	breq	.+12     	; 0x26a0 <LCD_goto_xy+0x44>
    2694:	2f 81       	ldd	r18, Y+7	; 0x07
    2696:	38 85       	ldd	r19, Y+8	; 0x08
    2698:	21 30       	cpi	r18, 0x01	; 1
    269a:	31 05       	cpc	r19, r1
    269c:	61 f0       	breq	.+24     	; 0x26b6 <LCD_goto_xy+0x5a>
    269e:	16 c0       	rjmp	.+44     	; 0x26cc <LCD_goto_xy+0x70>
		{
		case row_0 : LCD_write_command(LCD_CFG ,(lcd_SetCursor | col));
    26a0:	8d 81       	ldd	r24, Y+5	; 0x05
    26a2:	28 2f       	mov	r18, r24
    26a4:	20 68       	ori	r18, 0x80	; 128
    26a6:	69 81       	ldd	r22, Y+1	; 0x01
    26a8:	7a 81       	ldd	r23, Y+2	; 0x02
    26aa:	8b 81       	ldd	r24, Y+3	; 0x03
    26ac:	9c 81       	ldd	r25, Y+4	; 0x04
    26ae:	42 2f       	mov	r20, r18
    26b0:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <LCD_write_command>
    26b4:	0b c0       	rjmp	.+22     	; 0x26cc <LCD_goto_xy+0x70>
			break;
		case row_1 : LCD_write_command(LCD_CFG ,(lcd_SetCursor | (0x40+col)));
    26b6:	8d 81       	ldd	r24, Y+5	; 0x05
    26b8:	80 5c       	subi	r24, 0xC0	; 192
    26ba:	80 68       	ori	r24, 0x80	; 128
    26bc:	28 2f       	mov	r18, r24
    26be:	69 81       	ldd	r22, Y+1	; 0x01
    26c0:	7a 81       	ldd	r23, Y+2	; 0x02
    26c2:	8b 81       	ldd	r24, Y+3	; 0x03
    26c4:	9c 81       	ldd	r25, Y+4	; 0x04
    26c6:	42 2f       	mov	r20, r18
    26c8:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <LCD_write_command>
			break;
		default:
			break;
		}
	}
}
    26cc:	28 96       	adiw	r28, 0x08	; 8
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	f8 94       	cli
    26d2:	de bf       	out	0x3e, r29	; 62
    26d4:	0f be       	out	0x3f, r0	; 63
    26d6:	cd bf       	out	0x3d, r28	; 61
    26d8:	cf 91       	pop	r28
    26da:	df 91       	pop	r29
    26dc:	08 95       	ret

000026de <KeyPad_init>:
		{7 , 8 , 9 , 'C'},
		{'#' , 0 , '*' , 'D'}
};

void KeyPad_init(KeyPad_CFG_t KeyPad_CFG)
{
    26de:	df 93       	push	r29
    26e0:	cf 93       	push	r28
    26e2:	00 d0       	rcall	.+0      	; 0x26e4 <KeyPad_init+0x6>
    26e4:	0f 92       	push	r0
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62
    26ea:	69 83       	std	Y+1, r22	; 0x01
    26ec:	7a 83       	std	Y+2, r23	; 0x02
    26ee:	8b 83       	std	Y+3, r24	; 0x03

		DIO_SET_GROUP_DIR(KeyPad_CFG.GroupID,0x0F);
    26f0:	89 81       	ldd	r24, Y+1	; 0x01
    26f2:	6f e0       	ldi	r22, 0x0F	; 15
    26f4:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <DIO_SET_GROUP_DIR>

}
    26f8:	0f 90       	pop	r0
    26fa:	0f 90       	pop	r0
    26fc:	0f 90       	pop	r0
    26fe:	cf 91       	pop	r28
    2700:	df 91       	pop	r29
    2702:	08 95       	ret

00002704 <KeyPad_get_KeyPressed>:
 * C2 --> pin5
 * C3 --> pin6
 * C4 --> pin7
 */
u8 KeyPad_get_KeyPressed(KeyPad_CFG_t KeyPad_CFG)
{
    2704:	df 93       	push	r29
    2706:	cf 93       	push	r28
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
    270c:	a2 97       	sbiw	r28, 0x22	; 34
    270e:	0f b6       	in	r0, 0x3f	; 63
    2710:	f8 94       	cli
    2712:	de bf       	out	0x3e, r29	; 62
    2714:	0f be       	out	0x3f, r0	; 63
    2716:	cd bf       	out	0x3d, r28	; 61
    2718:	68 a3       	std	Y+32, r22	; 0x20
    271a:	79 a3       	std	Y+33, r23	; 0x21
    271c:	8a a3       	std	Y+34, r24	; 0x22
	u8 row=0;
    271e:	1f 8e       	std	Y+31, r1	; 0x1f
	u8 col = 0;
    2720:	1e 8e       	std	Y+30, r1	; 0x1e
	u8 keyNum = 255;
    2722:	8f ef       	ldi	r24, 0xFF	; 255
    2724:	8d 8f       	std	Y+29, r24	; 0x1d
	for ( row = 0 ; row <KeyPad_CFG.Row_num ;row++)
    2726:	1f 8e       	std	Y+31, r1	; 0x1f
    2728:	27 c1       	rjmp	.+590    	; 0x2978 <KeyPad_get_KeyPressed+0x274>
	{
		DIO_SET_GROUP_VALUE(KeyPad_CFG.GroupID , (~(0b00000001 << row)));
    272a:	48 a1       	ldd	r20, Y+32	; 0x20
    272c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    272e:	28 2f       	mov	r18, r24
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	02 c0       	rjmp	.+4      	; 0x273c <KeyPad_get_KeyPressed+0x38>
    2738:	88 0f       	add	r24, r24
    273a:	99 1f       	adc	r25, r25
    273c:	2a 95       	dec	r18
    273e:	e2 f7       	brpl	.-8      	; 0x2738 <KeyPad_get_KeyPressed+0x34>
    2740:	98 2f       	mov	r25, r24
    2742:	90 95       	com	r25
    2744:	84 2f       	mov	r24, r20
    2746:	69 2f       	mov	r22, r25
    2748:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <DIO_SET_GROUP_VALUE>
    274c:	80 e0       	ldi	r24, 0x00	; 0
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	a0 e2       	ldi	r26, 0x20	; 32
    2752:	b1 e4       	ldi	r27, 0x41	; 65
    2754:	89 8f       	std	Y+25, r24	; 0x19
    2756:	9a 8f       	std	Y+26, r25	; 0x1a
    2758:	ab 8f       	std	Y+27, r26	; 0x1b
    275a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    275c:	69 8d       	ldd	r22, Y+25	; 0x19
    275e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2760:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2762:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	4a ef       	ldi	r20, 0xFA	; 250
    276a:	54 e4       	ldi	r21, 0x44	; 68
    276c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	8d 8b       	std	Y+21, r24	; 0x15
    2776:	9e 8b       	std	Y+22, r25	; 0x16
    2778:	af 8b       	std	Y+23, r26	; 0x17
    277a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    277c:	6d 89       	ldd	r22, Y+21	; 0x15
    277e:	7e 89       	ldd	r23, Y+22	; 0x16
    2780:	8f 89       	ldd	r24, Y+23	; 0x17
    2782:	98 8d       	ldd	r25, Y+24	; 0x18
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	40 e8       	ldi	r20, 0x80	; 128
    278a:	5f e3       	ldi	r21, 0x3F	; 63
    278c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2790:	88 23       	and	r24, r24
    2792:	2c f4       	brge	.+10     	; 0x279e <KeyPad_get_KeyPressed+0x9a>
		__ticks = 1;
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	9c 8b       	std	Y+20, r25	; 0x14
    279a:	8b 8b       	std	Y+19, r24	; 0x13
    279c:	3f c0       	rjmp	.+126    	; 0x281c <KeyPad_get_KeyPressed+0x118>
	else if (__tmp > 65535)
    279e:	6d 89       	ldd	r22, Y+21	; 0x15
    27a0:	7e 89       	ldd	r23, Y+22	; 0x16
    27a2:	8f 89       	ldd	r24, Y+23	; 0x17
    27a4:	98 8d       	ldd	r25, Y+24	; 0x18
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	3f ef       	ldi	r19, 0xFF	; 255
    27aa:	4f e7       	ldi	r20, 0x7F	; 127
    27ac:	57 e4       	ldi	r21, 0x47	; 71
    27ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27b2:	18 16       	cp	r1, r24
    27b4:	4c f5       	brge	.+82     	; 0x2808 <KeyPad_get_KeyPressed+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b6:	69 8d       	ldd	r22, Y+25	; 0x19
    27b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	40 e2       	ldi	r20, 0x20	; 32
    27c4:	51 e4       	ldi	r21, 0x41	; 65
    27c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	bc 01       	movw	r22, r24
    27d0:	cd 01       	movw	r24, r26
    27d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	9c 8b       	std	Y+20, r25	; 0x14
    27dc:	8b 8b       	std	Y+19, r24	; 0x13
    27de:	0f c0       	rjmp	.+30     	; 0x27fe <KeyPad_get_KeyPressed+0xfa>
    27e0:	88 ec       	ldi	r24, 0xC8	; 200
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	9a 8b       	std	Y+18, r25	; 0x12
    27e6:	89 8b       	std	Y+17, r24	; 0x11
    27e8:	89 89       	ldd	r24, Y+17	; 0x11
    27ea:	9a 89       	ldd	r25, Y+18	; 0x12
    27ec:	01 97       	sbiw	r24, 0x01	; 1
    27ee:	f1 f7       	brne	.-4      	; 0x27ec <KeyPad_get_KeyPressed+0xe8>
    27f0:	9a 8b       	std	Y+18, r25	; 0x12
    27f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f4:	8b 89       	ldd	r24, Y+19	; 0x13
    27f6:	9c 89       	ldd	r25, Y+20	; 0x14
    27f8:	01 97       	sbiw	r24, 0x01	; 1
    27fa:	9c 8b       	std	Y+20, r25	; 0x14
    27fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2800:	9c 89       	ldd	r25, Y+20	; 0x14
    2802:	00 97       	sbiw	r24, 0x00	; 0
    2804:	69 f7       	brne	.-38     	; 0x27e0 <KeyPad_get_KeyPressed+0xdc>
    2806:	14 c0       	rjmp	.+40     	; 0x2830 <KeyPad_get_KeyPressed+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2808:	6d 89       	ldd	r22, Y+21	; 0x15
    280a:	7e 89       	ldd	r23, Y+22	; 0x16
    280c:	8f 89       	ldd	r24, Y+23	; 0x17
    280e:	98 8d       	ldd	r25, Y+24	; 0x18
    2810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	9c 8b       	std	Y+20, r25	; 0x14
    281a:	8b 8b       	std	Y+19, r24	; 0x13
    281c:	8b 89       	ldd	r24, Y+19	; 0x13
    281e:	9c 89       	ldd	r25, Y+20	; 0x14
    2820:	98 8b       	std	Y+16, r25	; 0x10
    2822:	8f 87       	std	Y+15, r24	; 0x0f
    2824:	8f 85       	ldd	r24, Y+15	; 0x0f
    2826:	98 89       	ldd	r25, Y+16	; 0x10
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	f1 f7       	brne	.-4      	; 0x2828 <KeyPad_get_KeyPressed+0x124>
    282c:	98 8b       	std	Y+16, r25	; 0x10
    282e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		for(col = 0 ; col < KeyPad_CFG.Col_num ; col++)
    2830:	1e 8e       	std	Y+30, r1	; 0x1e
    2832:	29 c0       	rjmp	.+82     	; 0x2886 <KeyPad_get_KeyPressed+0x182>
		{
			if(!(DIO_GET_GROUP_VALUE(KeyPad_CFG.GroupID) & (1<< (col+4))) )
    2834:	88 a1       	ldd	r24, Y+32	; 0x20
    2836:	0e 94 31 0c 	call	0x1862	; 0x1862 <DIO_GET_GROUP_VALUE>
    283a:	28 2f       	mov	r18, r24
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2840:	88 2f       	mov	r24, r24
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	04 96       	adiw	r24, 0x04	; 4
    2846:	a9 01       	movw	r20, r18
    2848:	02 c0       	rjmp	.+4      	; 0x284e <KeyPad_get_KeyPressed+0x14a>
    284a:	55 95       	asr	r21
    284c:	47 95       	ror	r20
    284e:	8a 95       	dec	r24
    2850:	e2 f7       	brpl	.-8      	; 0x284a <KeyPad_get_KeyPressed+0x146>
    2852:	ca 01       	movw	r24, r20
    2854:	81 70       	andi	r24, 0x01	; 1
    2856:	90 70       	andi	r25, 0x00	; 0
    2858:	00 97       	sbiw	r24, 0x00	; 0
    285a:	91 f4       	brne	.+36     	; 0x2880 <KeyPad_get_KeyPressed+0x17c>
			{
				keyNum =  KeyPad_Arr[row][col];
    285c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    285e:	48 2f       	mov	r20, r24
    2860:	50 e0       	ldi	r21, 0x00	; 0
    2862:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2864:	28 2f       	mov	r18, r24
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	ca 01       	movw	r24, r20
    286a:	88 0f       	add	r24, r24
    286c:	99 1f       	adc	r25, r25
    286e:	88 0f       	add	r24, r24
    2870:	99 1f       	adc	r25, r25
    2872:	82 0f       	add	r24, r18
    2874:	93 1f       	adc	r25, r19
    2876:	fc 01       	movw	r30, r24
    2878:	ec 5f       	subi	r30, 0xFC	; 252
    287a:	fd 4f       	sbci	r31, 0xFD	; 253
    287c:	80 81       	ld	r24, Z
    287e:	8d 8f       	std	Y+29, r24	; 0x1d
	u8 keyNum = 255;
	for ( row = 0 ; row <KeyPad_CFG.Row_num ;row++)
	{
		DIO_SET_GROUP_VALUE(KeyPad_CFG.GroupID , (~(0b00000001 << row)));
		_delay_ms(10);
		for(col = 0 ; col < KeyPad_CFG.Col_num ; col++)
    2880:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2882:	8f 5f       	subi	r24, 0xFF	; 255
    2884:	8e 8f       	std	Y+30, r24	; 0x1e
    2886:	9a a1       	ldd	r25, Y+34	; 0x22
    2888:	8e 8d       	ldd	r24, Y+30	; 0x1e
    288a:	89 17       	cp	r24, r25
    288c:	98 f2       	brcs	.-90     	; 0x2834 <KeyPad_get_KeyPressed+0x130>
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	a0 e2       	ldi	r26, 0x20	; 32
    2894:	b1 e4       	ldi	r27, 0x41	; 65
    2896:	8b 87       	std	Y+11, r24	; 0x0b
    2898:	9c 87       	std	Y+12, r25	; 0x0c
    289a:	ad 87       	std	Y+13, r26	; 0x0d
    289c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    289e:	6b 85       	ldd	r22, Y+11	; 0x0b
    28a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    28a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	4a ef       	ldi	r20, 0xFA	; 250
    28ac:	54 e4       	ldi	r21, 0x44	; 68
    28ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	8f 83       	std	Y+7, r24	; 0x07
    28b8:	98 87       	std	Y+8, r25	; 0x08
    28ba:	a9 87       	std	Y+9, r26	; 0x09
    28bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28be:	6f 81       	ldd	r22, Y+7	; 0x07
    28c0:	78 85       	ldd	r23, Y+8	; 0x08
    28c2:	89 85       	ldd	r24, Y+9	; 0x09
    28c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	40 e8       	ldi	r20, 0x80	; 128
    28cc:	5f e3       	ldi	r21, 0x3F	; 63
    28ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28d2:	88 23       	and	r24, r24
    28d4:	2c f4       	brge	.+10     	; 0x28e0 <KeyPad_get_KeyPressed+0x1dc>
		__ticks = 1;
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	9e 83       	std	Y+6, r25	; 0x06
    28dc:	8d 83       	std	Y+5, r24	; 0x05
    28de:	3f c0       	rjmp	.+126    	; 0x295e <KeyPad_get_KeyPressed+0x25a>
	else if (__tmp > 65535)
    28e0:	6f 81       	ldd	r22, Y+7	; 0x07
    28e2:	78 85       	ldd	r23, Y+8	; 0x08
    28e4:	89 85       	ldd	r24, Y+9	; 0x09
    28e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	3f ef       	ldi	r19, 0xFF	; 255
    28ec:	4f e7       	ldi	r20, 0x7F	; 127
    28ee:	57 e4       	ldi	r21, 0x47	; 71
    28f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28f4:	18 16       	cp	r1, r24
    28f6:	4c f5       	brge	.+82     	; 0x294a <KeyPad_get_KeyPressed+0x246>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    28fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    28fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    28fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	40 e2       	ldi	r20, 0x20	; 32
    2906:	51 e4       	ldi	r21, 0x41	; 65
    2908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	bc 01       	movw	r22, r24
    2912:	cd 01       	movw	r24, r26
    2914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	9e 83       	std	Y+6, r25	; 0x06
    291e:	8d 83       	std	Y+5, r24	; 0x05
    2920:	0f c0       	rjmp	.+30     	; 0x2940 <KeyPad_get_KeyPressed+0x23c>
    2922:	88 ec       	ldi	r24, 0xC8	; 200
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	9c 83       	std	Y+4, r25	; 0x04
    2928:	8b 83       	std	Y+3, r24	; 0x03
    292a:	8b 81       	ldd	r24, Y+3	; 0x03
    292c:	9c 81       	ldd	r25, Y+4	; 0x04
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	f1 f7       	brne	.-4      	; 0x292e <KeyPad_get_KeyPressed+0x22a>
    2932:	9c 83       	std	Y+4, r25	; 0x04
    2934:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2936:	8d 81       	ldd	r24, Y+5	; 0x05
    2938:	9e 81       	ldd	r25, Y+6	; 0x06
    293a:	01 97       	sbiw	r24, 0x01	; 1
    293c:	9e 83       	std	Y+6, r25	; 0x06
    293e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2940:	8d 81       	ldd	r24, Y+5	; 0x05
    2942:	9e 81       	ldd	r25, Y+6	; 0x06
    2944:	00 97       	sbiw	r24, 0x00	; 0
    2946:	69 f7       	brne	.-38     	; 0x2922 <KeyPad_get_KeyPressed+0x21e>
    2948:	14 c0       	rjmp	.+40     	; 0x2972 <KeyPad_get_KeyPressed+0x26e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    294a:	6f 81       	ldd	r22, Y+7	; 0x07
    294c:	78 85       	ldd	r23, Y+8	; 0x08
    294e:	89 85       	ldd	r24, Y+9	; 0x09
    2950:	9a 85       	ldd	r25, Y+10	; 0x0a
    2952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2956:	dc 01       	movw	r26, r24
    2958:	cb 01       	movw	r24, r22
    295a:	9e 83       	std	Y+6, r25	; 0x06
    295c:	8d 83       	std	Y+5, r24	; 0x05
    295e:	8d 81       	ldd	r24, Y+5	; 0x05
    2960:	9e 81       	ldd	r25, Y+6	; 0x06
    2962:	9a 83       	std	Y+2, r25	; 0x02
    2964:	89 83       	std	Y+1, r24	; 0x01
    2966:	89 81       	ldd	r24, Y+1	; 0x01
    2968:	9a 81       	ldd	r25, Y+2	; 0x02
    296a:	01 97       	sbiw	r24, 0x01	; 1
    296c:	f1 f7       	brne	.-4      	; 0x296a <KeyPad_get_KeyPressed+0x266>
    296e:	9a 83       	std	Y+2, r25	; 0x02
    2970:	89 83       	std	Y+1, r24	; 0x01
u8 KeyPad_get_KeyPressed(KeyPad_CFG_t KeyPad_CFG)
{
	u8 row=0;
	u8 col = 0;
	u8 keyNum = 255;
	for ( row = 0 ; row <KeyPad_CFG.Row_num ;row++)
    2972:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2974:	8f 5f       	subi	r24, 0xFF	; 255
    2976:	8f 8f       	std	Y+31, r24	; 0x1f
    2978:	99 a1       	ldd	r25, Y+33	; 0x21
    297a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    297c:	89 17       	cp	r24, r25
    297e:	08 f4       	brcc	.+2      	; 0x2982 <KeyPad_get_KeyPressed+0x27e>
    2980:	d4 ce       	rjmp	.-600    	; 0x272a <KeyPad_get_KeyPressed+0x26>
				keyNum =  KeyPad_Arr[row][col];
			}
		}
		_delay_ms(10);
	}
	return keyNum;
    2982:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    2984:	a2 96       	adiw	r28, 0x22	; 34
    2986:	0f b6       	in	r0, 0x3f	; 63
    2988:	f8 94       	cli
    298a:	de bf       	out	0x3e, r29	; 62
    298c:	0f be       	out	0x3f, r0	; 63
    298e:	cd bf       	out	0x3d, r28	; 61
    2990:	cf 91       	pop	r28
    2992:	df 91       	pop	r29
    2994:	08 95       	ret

00002996 <OpenDoor>:
	"USER9",
	"USER10"
};

void OpenDoor()
{
    2996:	df 93       	push	r29
    2998:	cf 93       	push	r28
    299a:	cd b7       	in	r28, 0x3d	; 61
    299c:	de b7       	in	r29, 0x3e	; 62
    299e:	6c 97       	sbiw	r28, 0x1c	; 28
    29a0:	0f b6       	in	r0, 0x3f	; 63
    29a2:	f8 94       	cli
    29a4:	de bf       	out	0x3e, r29	; 62
    29a6:	0f be       	out	0x3f, r0	; 63
    29a8:	cd bf       	out	0x3d, r28	; 61
	DIO_SET_PIN_VALUE(GROUPA,PIN_0,HIGH);//Solenoid ON
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	60 e0       	ldi	r22, 0x00	; 0
    29ae:	41 e0       	ldi	r20, 0x01	; 1
    29b0:	0e 94 c0 09 	call	0x1380	; 0x1380 <DIO_SET_PIN_VALUE>
    29b4:	80 e0       	ldi	r24, 0x00	; 0
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	aa e7       	ldi	r26, 0x7A	; 122
    29ba:	b4 e4       	ldi	r27, 0x44	; 68
    29bc:	89 8f       	std	Y+25, r24	; 0x19
    29be:	9a 8f       	std	Y+26, r25	; 0x1a
    29c0:	ab 8f       	std	Y+27, r26	; 0x1b
    29c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c4:	69 8d       	ldd	r22, Y+25	; 0x19
    29c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	4a ef       	ldi	r20, 0xFA	; 250
    29d2:	54 e4       	ldi	r21, 0x44	; 68
    29d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	8d 8b       	std	Y+21, r24	; 0x15
    29de:	9e 8b       	std	Y+22, r25	; 0x16
    29e0:	af 8b       	std	Y+23, r26	; 0x17
    29e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29e4:	6d 89       	ldd	r22, Y+21	; 0x15
    29e6:	7e 89       	ldd	r23, Y+22	; 0x16
    29e8:	8f 89       	ldd	r24, Y+23	; 0x17
    29ea:	98 8d       	ldd	r25, Y+24	; 0x18
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	40 e8       	ldi	r20, 0x80	; 128
    29f2:	5f e3       	ldi	r21, 0x3F	; 63
    29f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29f8:	88 23       	and	r24, r24
    29fa:	2c f4       	brge	.+10     	; 0x2a06 <OpenDoor+0x70>
		__ticks = 1;
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	9c 8b       	std	Y+20, r25	; 0x14
    2a02:	8b 8b       	std	Y+19, r24	; 0x13
    2a04:	3f c0       	rjmp	.+126    	; 0x2a84 <OpenDoor+0xee>
	else if (__tmp > 65535)
    2a06:	6d 89       	ldd	r22, Y+21	; 0x15
    2a08:	7e 89       	ldd	r23, Y+22	; 0x16
    2a0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	3f ef       	ldi	r19, 0xFF	; 255
    2a12:	4f e7       	ldi	r20, 0x7F	; 127
    2a14:	57 e4       	ldi	r21, 0x47	; 71
    2a16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a1a:	18 16       	cp	r1, r24
    2a1c:	4c f5       	brge	.+82     	; 0x2a70 <OpenDoor+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a1e:	69 8d       	ldd	r22, Y+25	; 0x19
    2a20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	40 e2       	ldi	r20, 0x20	; 32
    2a2c:	51 e4       	ldi	r21, 0x41	; 65
    2a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	bc 01       	movw	r22, r24
    2a38:	cd 01       	movw	r24, r26
    2a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	9c 8b       	std	Y+20, r25	; 0x14
    2a44:	8b 8b       	std	Y+19, r24	; 0x13
    2a46:	0f c0       	rjmp	.+30     	; 0x2a66 <OpenDoor+0xd0>
    2a48:	88 ec       	ldi	r24, 0xC8	; 200
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	9a 8b       	std	Y+18, r25	; 0x12
    2a4e:	89 8b       	std	Y+17, r24	; 0x11
    2a50:	89 89       	ldd	r24, Y+17	; 0x11
    2a52:	9a 89       	ldd	r25, Y+18	; 0x12
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	f1 f7       	brne	.-4      	; 0x2a54 <OpenDoor+0xbe>
    2a58:	9a 8b       	std	Y+18, r25	; 0x12
    2a5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a5e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a60:	01 97       	sbiw	r24, 0x01	; 1
    2a62:	9c 8b       	std	Y+20, r25	; 0x14
    2a64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a66:	8b 89       	ldd	r24, Y+19	; 0x13
    2a68:	9c 89       	ldd	r25, Y+20	; 0x14
    2a6a:	00 97       	sbiw	r24, 0x00	; 0
    2a6c:	69 f7       	brne	.-38     	; 0x2a48 <OpenDoor+0xb2>
    2a6e:	14 c0       	rjmp	.+40     	; 0x2a98 <OpenDoor+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a70:	6d 89       	ldd	r22, Y+21	; 0x15
    2a72:	7e 89       	ldd	r23, Y+22	; 0x16
    2a74:	8f 89       	ldd	r24, Y+23	; 0x17
    2a76:	98 8d       	ldd	r25, Y+24	; 0x18
    2a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	9c 8b       	std	Y+20, r25	; 0x14
    2a82:	8b 8b       	std	Y+19, r24	; 0x13
    2a84:	8b 89       	ldd	r24, Y+19	; 0x13
    2a86:	9c 89       	ldd	r25, Y+20	; 0x14
    2a88:	98 8b       	std	Y+16, r25	; 0x10
    2a8a:	8f 87       	std	Y+15, r24	; 0x0f
    2a8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a8e:	98 89       	ldd	r25, Y+16	; 0x10
    2a90:	01 97       	sbiw	r24, 0x01	; 1
    2a92:	f1 f7       	brne	.-4      	; 0x2a90 <OpenDoor+0xfa>
    2a94:	98 8b       	std	Y+16, r25	; 0x10
    2a96:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	DIO_SET_PIN_VALUE(GROUPA,PIN_0,LOW);//Solenoid OFF
    2a98:	80 e0       	ldi	r24, 0x00	; 0
    2a9a:	60 e0       	ldi	r22, 0x00	; 0
    2a9c:	40 e0       	ldi	r20, 0x00	; 0
    2a9e:	0e 94 c0 09 	call	0x1380	; 0x1380 <DIO_SET_PIN_VALUE>
    2aa2:	80 e0       	ldi	r24, 0x00	; 0
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	aa e7       	ldi	r26, 0x7A	; 122
    2aa8:	b4 e4       	ldi	r27, 0x44	; 68
    2aaa:	8b 87       	std	Y+11, r24	; 0x0b
    2aac:	9c 87       	std	Y+12, r25	; 0x0c
    2aae:	ad 87       	std	Y+13, r26	; 0x0d
    2ab0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ab2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ab4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aba:	20 e0       	ldi	r18, 0x00	; 0
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	4a ef       	ldi	r20, 0xFA	; 250
    2ac0:	54 e4       	ldi	r21, 0x44	; 68
    2ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	8f 83       	std	Y+7, r24	; 0x07
    2acc:	98 87       	std	Y+8, r25	; 0x08
    2ace:	a9 87       	std	Y+9, r26	; 0x09
    2ad0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ad2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ad4:	78 85       	ldd	r23, Y+8	; 0x08
    2ad6:	89 85       	ldd	r24, Y+9	; 0x09
    2ad8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ada:	20 e0       	ldi	r18, 0x00	; 0
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	40 e8       	ldi	r20, 0x80	; 128
    2ae0:	5f e3       	ldi	r21, 0x3F	; 63
    2ae2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ae6:	88 23       	and	r24, r24
    2ae8:	2c f4       	brge	.+10     	; 0x2af4 <OpenDoor+0x15e>
		__ticks = 1;
    2aea:	81 e0       	ldi	r24, 0x01	; 1
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	9e 83       	std	Y+6, r25	; 0x06
    2af0:	8d 83       	std	Y+5, r24	; 0x05
    2af2:	3f c0       	rjmp	.+126    	; 0x2b72 <OpenDoor+0x1dc>
	else if (__tmp > 65535)
    2af4:	6f 81       	ldd	r22, Y+7	; 0x07
    2af6:	78 85       	ldd	r23, Y+8	; 0x08
    2af8:	89 85       	ldd	r24, Y+9	; 0x09
    2afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	3f ef       	ldi	r19, 0xFF	; 255
    2b00:	4f e7       	ldi	r20, 0x7F	; 127
    2b02:	57 e4       	ldi	r21, 0x47	; 71
    2b04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b08:	18 16       	cp	r1, r24
    2b0a:	4c f5       	brge	.+82     	; 0x2b5e <OpenDoor+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	40 e2       	ldi	r20, 0x20	; 32
    2b1a:	51 e4       	ldi	r21, 0x41	; 65
    2b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	bc 01       	movw	r22, r24
    2b26:	cd 01       	movw	r24, r26
    2b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b2c:	dc 01       	movw	r26, r24
    2b2e:	cb 01       	movw	r24, r22
    2b30:	9e 83       	std	Y+6, r25	; 0x06
    2b32:	8d 83       	std	Y+5, r24	; 0x05
    2b34:	0f c0       	rjmp	.+30     	; 0x2b54 <OpenDoor+0x1be>
    2b36:	88 ec       	ldi	r24, 0xC8	; 200
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	9c 83       	std	Y+4, r25	; 0x04
    2b3c:	8b 83       	std	Y+3, r24	; 0x03
    2b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b40:	9c 81       	ldd	r25, Y+4	; 0x04
    2b42:	01 97       	sbiw	r24, 0x01	; 1
    2b44:	f1 f7       	brne	.-4      	; 0x2b42 <OpenDoor+0x1ac>
    2b46:	9c 83       	std	Y+4, r25	; 0x04
    2b48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4e:	01 97       	sbiw	r24, 0x01	; 1
    2b50:	9e 83       	std	Y+6, r25	; 0x06
    2b52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b54:	8d 81       	ldd	r24, Y+5	; 0x05
    2b56:	9e 81       	ldd	r25, Y+6	; 0x06
    2b58:	00 97       	sbiw	r24, 0x00	; 0
    2b5a:	69 f7       	brne	.-38     	; 0x2b36 <OpenDoor+0x1a0>
    2b5c:	14 c0       	rjmp	.+40     	; 0x2b86 <OpenDoor+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b60:	78 85       	ldd	r23, Y+8	; 0x08
    2b62:	89 85       	ldd	r24, Y+9	; 0x09
    2b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	9e 83       	std	Y+6, r25	; 0x06
    2b70:	8d 83       	std	Y+5, r24	; 0x05
    2b72:	8d 81       	ldd	r24, Y+5	; 0x05
    2b74:	9e 81       	ldd	r25, Y+6	; 0x06
    2b76:	9a 83       	std	Y+2, r25	; 0x02
    2b78:	89 83       	std	Y+1, r24	; 0x01
    2b7a:	89 81       	ldd	r24, Y+1	; 0x01
    2b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7e:	01 97       	sbiw	r24, 0x01	; 1
    2b80:	f1 f7       	brne	.-4      	; 0x2b7e <OpenDoor+0x1e8>
    2b82:	9a 83       	std	Y+2, r25	; 0x02
    2b84:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    2b86:	6c 96       	adiw	r28, 0x1c	; 28
    2b88:	0f b6       	in	r0, 0x3f	; 63
    2b8a:	f8 94       	cli
    2b8c:	de bf       	out	0x3e, r29	; 62
    2b8e:	0f be       	out	0x3f, r0	; 63
    2b90:	cd bf       	out	0x3d, r28	; 61
    2b92:	cf 91       	pop	r28
    2b94:	df 91       	pop	r29
    2b96:	08 95       	ret

00002b98 <LIGHTON>:
void LIGHTON()
{
    2b98:	df 93       	push	r29
    2b9a:	cf 93       	push	r28
    2b9c:	cd b7       	in	r28, 0x3d	; 61
    2b9e:	de b7       	in	r29, 0x3e	; 62
    2ba0:	2e 97       	sbiw	r28, 0x0e	; 14
    2ba2:	0f b6       	in	r0, 0x3f	; 63
    2ba4:	f8 94       	cli
    2ba6:	de bf       	out	0x3e, r29	; 62
    2ba8:	0f be       	out	0x3f, r0	; 63
    2baa:	cd bf       	out	0x3d, r28	; 61
	DIO_SET_PIN_VALUE(GROUPA,PIN_1,HIGH);//LIGHT ON
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	61 e0       	ldi	r22, 0x01	; 1
    2bb0:	41 e0       	ldi	r20, 0x01	; 1
    2bb2:	0e 94 c0 09 	call	0x1380	; 0x1380 <DIO_SET_PIN_VALUE>
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	aa e7       	ldi	r26, 0x7A	; 122
    2bbc:	b4 e4       	ldi	r27, 0x44	; 68
    2bbe:	8b 87       	std	Y+11, r24	; 0x0b
    2bc0:	9c 87       	std	Y+12, r25	; 0x0c
    2bc2:	ad 87       	std	Y+13, r26	; 0x0d
    2bc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bca:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	4a ef       	ldi	r20, 0xFA	; 250
    2bd4:	54 e4       	ldi	r21, 0x44	; 68
    2bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	8f 83       	std	Y+7, r24	; 0x07
    2be0:	98 87       	std	Y+8, r25	; 0x08
    2be2:	a9 87       	std	Y+9, r26	; 0x09
    2be4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2be6:	6f 81       	ldd	r22, Y+7	; 0x07
    2be8:	78 85       	ldd	r23, Y+8	; 0x08
    2bea:	89 85       	ldd	r24, Y+9	; 0x09
    2bec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	40 e8       	ldi	r20, 0x80	; 128
    2bf4:	5f e3       	ldi	r21, 0x3F	; 63
    2bf6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bfa:	88 23       	and	r24, r24
    2bfc:	2c f4       	brge	.+10     	; 0x2c08 <LIGHTON+0x70>
		__ticks = 1;
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	9e 83       	std	Y+6, r25	; 0x06
    2c04:	8d 83       	std	Y+5, r24	; 0x05
    2c06:	3f c0       	rjmp	.+126    	; 0x2c86 <LIGHTON+0xee>
	else if (__tmp > 65535)
    2c08:	6f 81       	ldd	r22, Y+7	; 0x07
    2c0a:	78 85       	ldd	r23, Y+8	; 0x08
    2c0c:	89 85       	ldd	r24, Y+9	; 0x09
    2c0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	3f ef       	ldi	r19, 0xFF	; 255
    2c14:	4f e7       	ldi	r20, 0x7F	; 127
    2c16:	57 e4       	ldi	r21, 0x47	; 71
    2c18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c1c:	18 16       	cp	r1, r24
    2c1e:	4c f5       	brge	.+82     	; 0x2c72 <LIGHTON+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c20:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c22:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	40 e2       	ldi	r20, 0x20	; 32
    2c2e:	51 e4       	ldi	r21, 0x41	; 65
    2c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	bc 01       	movw	r22, r24
    2c3a:	cd 01       	movw	r24, r26
    2c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c40:	dc 01       	movw	r26, r24
    2c42:	cb 01       	movw	r24, r22
    2c44:	9e 83       	std	Y+6, r25	; 0x06
    2c46:	8d 83       	std	Y+5, r24	; 0x05
    2c48:	0f c0       	rjmp	.+30     	; 0x2c68 <LIGHTON+0xd0>
    2c4a:	88 ec       	ldi	r24, 0xC8	; 200
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	9c 83       	std	Y+4, r25	; 0x04
    2c50:	8b 83       	std	Y+3, r24	; 0x03
    2c52:	8b 81       	ldd	r24, Y+3	; 0x03
    2c54:	9c 81       	ldd	r25, Y+4	; 0x04
    2c56:	01 97       	sbiw	r24, 0x01	; 1
    2c58:	f1 f7       	brne	.-4      	; 0x2c56 <LIGHTON+0xbe>
    2c5a:	9c 83       	std	Y+4, r25	; 0x04
    2c5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c60:	9e 81       	ldd	r25, Y+6	; 0x06
    2c62:	01 97       	sbiw	r24, 0x01	; 1
    2c64:	9e 83       	std	Y+6, r25	; 0x06
    2c66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c68:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c6c:	00 97       	sbiw	r24, 0x00	; 0
    2c6e:	69 f7       	brne	.-38     	; 0x2c4a <LIGHTON+0xb2>
    2c70:	14 c0       	rjmp	.+40     	; 0x2c9a <LIGHTON+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c72:	6f 81       	ldd	r22, Y+7	; 0x07
    2c74:	78 85       	ldd	r23, Y+8	; 0x08
    2c76:	89 85       	ldd	r24, Y+9	; 0x09
    2c78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7e:	dc 01       	movw	r26, r24
    2c80:	cb 01       	movw	r24, r22
    2c82:	9e 83       	std	Y+6, r25	; 0x06
    2c84:	8d 83       	std	Y+5, r24	; 0x05
    2c86:	8d 81       	ldd	r24, Y+5	; 0x05
    2c88:	9e 81       	ldd	r25, Y+6	; 0x06
    2c8a:	9a 83       	std	Y+2, r25	; 0x02
    2c8c:	89 83       	std	Y+1, r24	; 0x01
    2c8e:	89 81       	ldd	r24, Y+1	; 0x01
    2c90:	9a 81       	ldd	r25, Y+2	; 0x02
    2c92:	01 97       	sbiw	r24, 0x01	; 1
    2c94:	f1 f7       	brne	.-4      	; 0x2c92 <LIGHTON+0xfa>
    2c96:	9a 83       	std	Y+2, r25	; 0x02
    2c98:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    2c9a:	2e 96       	adiw	r28, 0x0e	; 14
    2c9c:	0f b6       	in	r0, 0x3f	; 63
    2c9e:	f8 94       	cli
    2ca0:	de bf       	out	0x3e, r29	; 62
    2ca2:	0f be       	out	0x3f, r0	; 63
    2ca4:	cd bf       	out	0x3d, r28	; 61
    2ca6:	cf 91       	pop	r28
    2ca8:	df 91       	pop	r29
    2caa:	08 95       	ret

00002cac <LIGHTOFF>:
void LIGHTOFF()
{
    2cac:	df 93       	push	r29
    2cae:	cf 93       	push	r28
    2cb0:	cd b7       	in	r28, 0x3d	; 61
    2cb2:	de b7       	in	r29, 0x3e	; 62
    2cb4:	2e 97       	sbiw	r28, 0x0e	; 14
    2cb6:	0f b6       	in	r0, 0x3f	; 63
    2cb8:	f8 94       	cli
    2cba:	de bf       	out	0x3e, r29	; 62
    2cbc:	0f be       	out	0x3f, r0	; 63
    2cbe:	cd bf       	out	0x3d, r28	; 61
	DIO_SET_PIN_VALUE(GROUPA,PIN_1,LOW);//LIGHT OFF
    2cc0:	80 e0       	ldi	r24, 0x00	; 0
    2cc2:	61 e0       	ldi	r22, 0x01	; 1
    2cc4:	40 e0       	ldi	r20, 0x00	; 0
    2cc6:	0e 94 c0 09 	call	0x1380	; 0x1380 <DIO_SET_PIN_VALUE>
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	aa e7       	ldi	r26, 0x7A	; 122
    2cd0:	b4 e4       	ldi	r27, 0x44	; 68
    2cd2:	8b 87       	std	Y+11, r24	; 0x0b
    2cd4:	9c 87       	std	Y+12, r25	; 0x0c
    2cd6:	ad 87       	std	Y+13, r26	; 0x0d
    2cd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cda:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cde:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ce0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	4a ef       	ldi	r20, 0xFA	; 250
    2ce8:	54 e4       	ldi	r21, 0x44	; 68
    2cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	8f 83       	std	Y+7, r24	; 0x07
    2cf4:	98 87       	std	Y+8, r25	; 0x08
    2cf6:	a9 87       	std	Y+9, r26	; 0x09
    2cf8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cfa:	6f 81       	ldd	r22, Y+7	; 0x07
    2cfc:	78 85       	ldd	r23, Y+8	; 0x08
    2cfe:	89 85       	ldd	r24, Y+9	; 0x09
    2d00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d02:	20 e0       	ldi	r18, 0x00	; 0
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	40 e8       	ldi	r20, 0x80	; 128
    2d08:	5f e3       	ldi	r21, 0x3F	; 63
    2d0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d0e:	88 23       	and	r24, r24
    2d10:	2c f4       	brge	.+10     	; 0x2d1c <LIGHTOFF+0x70>
		__ticks = 1;
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	9e 83       	std	Y+6, r25	; 0x06
    2d18:	8d 83       	std	Y+5, r24	; 0x05
    2d1a:	3f c0       	rjmp	.+126    	; 0x2d9a <LIGHTOFF+0xee>
	else if (__tmp > 65535)
    2d1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d1e:	78 85       	ldd	r23, Y+8	; 0x08
    2d20:	89 85       	ldd	r24, Y+9	; 0x09
    2d22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	3f ef       	ldi	r19, 0xFF	; 255
    2d28:	4f e7       	ldi	r20, 0x7F	; 127
    2d2a:	57 e4       	ldi	r21, 0x47	; 71
    2d2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d30:	18 16       	cp	r1, r24
    2d32:	4c f5       	brge	.+82     	; 0x2d86 <LIGHTOFF+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d34:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d36:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d3c:	20 e0       	ldi	r18, 0x00	; 0
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	40 e2       	ldi	r20, 0x20	; 32
    2d42:	51 e4       	ldi	r21, 0x41	; 65
    2d44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d48:	dc 01       	movw	r26, r24
    2d4a:	cb 01       	movw	r24, r22
    2d4c:	bc 01       	movw	r22, r24
    2d4e:	cd 01       	movw	r24, r26
    2d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	9e 83       	std	Y+6, r25	; 0x06
    2d5a:	8d 83       	std	Y+5, r24	; 0x05
    2d5c:	0f c0       	rjmp	.+30     	; 0x2d7c <LIGHTOFF+0xd0>
    2d5e:	88 ec       	ldi	r24, 0xC8	; 200
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	9c 83       	std	Y+4, r25	; 0x04
    2d64:	8b 83       	std	Y+3, r24	; 0x03
    2d66:	8b 81       	ldd	r24, Y+3	; 0x03
    2d68:	9c 81       	ldd	r25, Y+4	; 0x04
    2d6a:	01 97       	sbiw	r24, 0x01	; 1
    2d6c:	f1 f7       	brne	.-4      	; 0x2d6a <LIGHTOFF+0xbe>
    2d6e:	9c 83       	std	Y+4, r25	; 0x04
    2d70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d72:	8d 81       	ldd	r24, Y+5	; 0x05
    2d74:	9e 81       	ldd	r25, Y+6	; 0x06
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	9e 83       	std	Y+6, r25	; 0x06
    2d7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d80:	00 97       	sbiw	r24, 0x00	; 0
    2d82:	69 f7       	brne	.-38     	; 0x2d5e <LIGHTOFF+0xb2>
    2d84:	14 c0       	rjmp	.+40     	; 0x2dae <LIGHTOFF+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d86:	6f 81       	ldd	r22, Y+7	; 0x07
    2d88:	78 85       	ldd	r23, Y+8	; 0x08
    2d8a:	89 85       	ldd	r24, Y+9	; 0x09
    2d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d92:	dc 01       	movw	r26, r24
    2d94:	cb 01       	movw	r24, r22
    2d96:	9e 83       	std	Y+6, r25	; 0x06
    2d98:	8d 83       	std	Y+5, r24	; 0x05
    2d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d9e:	9a 83       	std	Y+2, r25	; 0x02
    2da0:	89 83       	std	Y+1, r24	; 0x01
    2da2:	89 81       	ldd	r24, Y+1	; 0x01
    2da4:	9a 81       	ldd	r25, Y+2	; 0x02
    2da6:	01 97       	sbiw	r24, 0x01	; 1
    2da8:	f1 f7       	brne	.-4      	; 0x2da6 <LIGHTOFF+0xfa>
    2daa:	9a 83       	std	Y+2, r25	; 0x02
    2dac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    2dae:	2e 96       	adiw	r28, 0x0e	; 14
    2db0:	0f b6       	in	r0, 0x3f	; 63
    2db2:	f8 94       	cli
    2db4:	de bf       	out	0x3e, r29	; 62
    2db6:	0f be       	out	0x3f, r0	; 63
    2db8:	cd bf       	out	0x3d, r28	; 61
    2dba:	cf 91       	pop	r28
    2dbc:	df 91       	pop	r29
    2dbe:	08 95       	ret

00002dc0 <AlarmON>:
void AlarmON()
{
    2dc0:	df 93       	push	r29
    2dc2:	cf 93       	push	r28
    2dc4:	00 d0       	rcall	.+0      	; 0x2dc6 <AlarmON+0x6>
    2dc6:	00 d0       	rcall	.+0      	; 0x2dc8 <AlarmON+0x8>
    2dc8:	0f 92       	push	r0
    2dca:	cd b7       	in	r28, 0x3d	; 61
    2dcc:	de b7       	in	r29, 0x3e	; 62
	TIMER0_Config_t timer0;
	timer0.Is_interrupt = INT_DISABLE;
    2dce:	1c 82       	std	Y+4, r1	; 0x04
	timer0.mode = CTC;
    2dd0:	81 e0       	ldi	r24, 0x01	; 1
    2dd2:	8a 83       	std	Y+2, r24	; 0x02
	timer0.prescale= pre_1024;
    2dd4:	85 e0       	ldi	r24, 0x05	; 5
    2dd6:	89 83       	std	Y+1, r24	; 0x01
	timer0.timer_init_value = 0;
    2dd8:	1d 82       	std	Y+5, r1	; 0x05
	timer0.OC0 = OC0_TOG;
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	8b 83       	std	Y+3, r24	; 0x03
	Timer0_Set_OCR(255);
    2dde:	8f ef       	ldi	r24, 0xFF	; 255
    2de0:	0e 94 41 08 	call	0x1082	; 0x1082 <Timer0_Set_OCR>
	Timer0_Start(timer0);
    2de4:	49 81       	ldd	r20, Y+1	; 0x01
    2de6:	5a 81       	ldd	r21, Y+2	; 0x02
    2de8:	6b 81       	ldd	r22, Y+3	; 0x03
    2dea:	7c 81       	ldd	r23, Y+4	; 0x04
    2dec:	8d 81       	ldd	r24, Y+5	; 0x05
    2dee:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <Timer0_Start>
}
    2df2:	0f 90       	pop	r0
    2df4:	0f 90       	pop	r0
    2df6:	0f 90       	pop	r0
    2df8:	0f 90       	pop	r0
    2dfa:	0f 90       	pop	r0
    2dfc:	cf 91       	pop	r28
    2dfe:	df 91       	pop	r29
    2e00:	08 95       	ret

00002e02 <AlarmOFF>:
void AlarmOFF()
{
    2e02:	df 93       	push	r29
    2e04:	cf 93       	push	r28
    2e06:	cd b7       	in	r28, 0x3d	; 61
    2e08:	de b7       	in	r29, 0x3e	; 62
	Timer0_Stop();
    2e0a:	0e 94 4f 08 	call	0x109e	; 0x109e <Timer0_Stop>
	DIO_SET_PIN_VALUE(GROUPB,PIN_3,LOW);//BUZZER OFF
    2e0e:	81 e0       	ldi	r24, 0x01	; 1
    2e10:	63 e0       	ldi	r22, 0x03	; 3
    2e12:	40 e0       	ldi	r20, 0x00	; 0
    2e14:	0e 94 c0 09 	call	0x1380	; 0x1380 <DIO_SET_PIN_VALUE>
}
    2e18:	cf 91       	pop	r28
    2e1a:	df 91       	pop	r29
    2e1c:	08 95       	ret

00002e1e <main>:
int main(void)
{
    2e1e:	df 93       	push	r29
    2e20:	cf 93       	push	r28
    2e22:	cd b7       	in	r28, 0x3d	; 61
    2e24:	de b7       	in	r29, 0x3e	; 62
    2e26:	c9 5f       	subi	r28, 0xF9	; 249
    2e28:	d0 40       	sbci	r29, 0x00	; 0
    2e2a:	0f b6       	in	r0, 0x3f	; 63
    2e2c:	f8 94       	cli
    2e2e:	de bf       	out	0x3e, r29	; 62
    2e30:	0f be       	out	0x3f, r0	; 63
    2e32:	cd bf       	out	0x3d, r28	; 61
	u8 ReceivedChar = 0x00;
    2e34:	1c 86       	std	Y+12, r1	; 0x0c
	char ReceiveBuffer[100];
	char UserName[15];
	char Validate = 0;
    2e36:	1b 86       	std	Y+11, r1	; 0x0b
	char Password[10];
	char Operation[10];
	u8 ReceiveIndex = 0;
    2e38:	1a 86       	std	Y+10, r1	; 0x0a
	u8 SliceIndex = 0;
    2e3a:	19 86       	std	Y+9, r1	; 0x09
	char* COMMAND;
	char Slice[100];
	char* pch;
	char ALarm = 0;
    2e3c:	1c 82       	std	Y+4, r1	; 0x04
	char Try = 0;
    2e3e:	1b 82       	std	Y+3, r1	; 0x03
	DIO_SET_PIN_DIR(GROUPA,PIN_0,OUTPUT);//DOOR Solenoid
    2e40:	80 e0       	ldi	r24, 0x00	; 0
    2e42:	60 e0       	ldi	r22, 0x00	; 0
    2e44:	41 e0       	ldi	r20, 0x01	; 1
    2e46:	0e 94 c0 08 	call	0x1180	; 0x1180 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR(GROUPA,PIN_1,OUTPUT);//Light Bulb
    2e4a:	80 e0       	ldi	r24, 0x00	; 0
    2e4c:	61 e0       	ldi	r22, 0x01	; 1
    2e4e:	41 e0       	ldi	r20, 0x01	; 1
    2e50:	0e 94 c0 08 	call	0x1180	; 0x1180 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR(GROUPB,PIN_3,OUTPUT);//BUZZER law 3mal 3 mrat 8alat
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	63 e0       	ldi	r22, 0x03	; 3
    2e58:	41 e0       	ldi	r20, 0x01	; 1
    2e5a:	0e 94 c0 08 	call	0x1180	; 0x1180 <DIO_SET_PIN_DIR>
	UART_init(9600);
    2e5e:	80 e8       	ldi	r24, 0x80	; 128
    2e60:	95 e2       	ldi	r25, 0x25	; 37
    2e62:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_init>
	UART_Print("System Start....\r\n");
    2e66:	80 e6       	ldi	r24, 0x60	; 96
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	0e 94 c8 07 	call	0xf90	; 0xf90 <UART_Print>
	while(1)
	{
		ReceivedChar = UART_read();
    2e6e:	0e 94 b3 07 	call	0xf66	; 0xf66 <UART_read>
    2e72:	8c 87       	std	Y+12, r24	; 0x0c
		ReceiveBuffer[ReceiveIndex++] = ReceivedChar;
    2e74:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e76:	28 2f       	mov	r18, r24
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	ce 01       	movw	r24, r28
    2e7c:	0d 96       	adiw	r24, 0x0d	; 13
    2e7e:	fc 01       	movw	r30, r24
    2e80:	e2 0f       	add	r30, r18
    2e82:	f3 1f       	adc	r31, r19
    2e84:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e86:	80 83       	st	Z, r24
    2e88:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e8a:	8f 5f       	subi	r24, 0xFF	; 255
    2e8c:	8a 87       	std	Y+10, r24	; 0x0a
		if(ReceivedChar == '\r')//New Command Received
    2e8e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e90:	8d 30       	cpi	r24, 0x0D	; 13
    2e92:	09 f0       	breq	.+2      	; 0x2e96 <main+0x78>
    2e94:	6d c1       	rjmp	.+730    	; 0x3170 <main+0x352>
			 *LOG USERNAME PASSWORD OFF
			 *LOG USER1 USER2 OPEN
			 *LOG USER1 USER1 OPEN
			 */
			//1-Search For LOG
			COMMAND = strstr(ReceiveBuffer, "LOG");
    2e96:	ce 01       	movw	r24, r28
    2e98:	0d 96       	adiw	r24, 0x0d	; 13
    2e9a:	23 e7       	ldi	r18, 0x73	; 115
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	b9 01       	movw	r22, r18
    2ea0:	0e 94 10 19 	call	0x3220	; 0x3220 <strstr>
    2ea4:	98 87       	std	Y+8, r25	; 0x08
    2ea6:	8f 83       	std	Y+7, r24	; 0x07
			if(COMMAND != NULL)
    2ea8:	8f 81       	ldd	r24, Y+7	; 0x07
    2eaa:	98 85       	ldd	r25, Y+8	; 0x08
    2eac:	00 97       	sbiw	r24, 0x00	; 0
    2eae:	09 f4       	brne	.+2      	; 0x2eb2 <main+0x94>
    2eb0:	51 c1       	rjmp	.+674    	; 0x3154 <main+0x336>
			{
				memset(UserName,'\0',15);
    2eb2:	ce 01       	movw	r24, r28
    2eb4:	8f 58       	subi	r24, 0x8F	; 143
    2eb6:	9f 4f       	sbci	r25, 0xFF	; 255
    2eb8:	60 e0       	ldi	r22, 0x00	; 0
    2eba:	70 e0       	ldi	r23, 0x00	; 0
    2ebc:	4f e0       	ldi	r20, 0x0F	; 15
    2ebe:	50 e0       	ldi	r21, 0x00	; 0
    2ec0:	0e 94 02 19 	call	0x3204	; 0x3204 <memset>
				memset(Password,'\0',10);
    2ec4:	ce 01       	movw	r24, r28
    2ec6:	80 58       	subi	r24, 0x80	; 128
    2ec8:	9f 4f       	sbci	r25, 0xFF	; 255
    2eca:	60 e0       	ldi	r22, 0x00	; 0
    2ecc:	70 e0       	ldi	r23, 0x00	; 0
    2ece:	4a e0       	ldi	r20, 0x0A	; 10
    2ed0:	50 e0       	ldi	r21, 0x00	; 0
    2ed2:	0e 94 02 19 	call	0x3204	; 0x3204 <memset>
				memset(Operation,'\0',10);
    2ed6:	ce 01       	movw	r24, r28
    2ed8:	86 57       	subi	r24, 0x76	; 118
    2eda:	9f 4f       	sbci	r25, 0xFF	; 255
    2edc:	60 e0       	ldi	r22, 0x00	; 0
    2ede:	70 e0       	ldi	r23, 0x00	; 0
    2ee0:	4a e0       	ldi	r20, 0x0A	; 10
    2ee2:	50 e0       	ldi	r21, 0x00	; 0
    2ee4:	0e 94 02 19 	call	0x3204	; 0x3204 <memset>
				//2-SPLIT COMMAND BY SPACE
				pch = strtok (ReceiveBuffer," ");
    2ee8:	ce 01       	movw	r24, r28
    2eea:	0d 96       	adiw	r24, 0x0d	; 13
    2eec:	27 e7       	ldi	r18, 0x77	; 119
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	b9 01       	movw	r22, r18
    2ef2:	0e 94 fd 18 	call	0x31fa	; 0x31fa <strtok>
    2ef6:	9e 83       	std	Y+6, r25	; 0x06
    2ef8:	8d 83       	std	Y+5, r24	; 0x05
				SliceIndex = 0;
    2efa:	19 86       	std	Y+9, r1	; 0x09
    2efc:	54 c0       	rjmp	.+168    	; 0x2fa6 <main+0x188>
				while (pch != NULL)
				{
					switch(SliceIndex)
    2efe:	89 85       	ldd	r24, Y+9	; 0x09
    2f00:	28 2f       	mov	r18, r24
    2f02:	30 e0       	ldi	r19, 0x00	; 0
    2f04:	c8 50       	subi	r28, 0x08	; 8
    2f06:	df 4f       	sbci	r29, 0xFF	; 255
    2f08:	39 83       	std	Y+1, r19	; 0x01
    2f0a:	28 83       	st	Y, r18
    2f0c:	c8 5f       	subi	r28, 0xF8	; 248
    2f0e:	d0 40       	sbci	r29, 0x00	; 0
    2f10:	c8 50       	subi	r28, 0x08	; 8
    2f12:	df 4f       	sbci	r29, 0xFF	; 255
    2f14:	88 81       	ld	r24, Y
    2f16:	99 81       	ldd	r25, Y+1	; 0x01
    2f18:	c8 5f       	subi	r28, 0xF8	; 248
    2f1a:	d0 40       	sbci	r29, 0x00	; 0
    2f1c:	81 30       	cpi	r24, 0x01	; 1
    2f1e:	91 05       	cpc	r25, r1
    2f20:	e1 f0       	breq	.+56     	; 0x2f5a <main+0x13c>
    2f22:	c8 50       	subi	r28, 0x08	; 8
    2f24:	df 4f       	sbci	r29, 0xFF	; 255
    2f26:	28 81       	ld	r18, Y
    2f28:	39 81       	ldd	r19, Y+1	; 0x01
    2f2a:	c8 5f       	subi	r28, 0xF8	; 248
    2f2c:	d0 40       	sbci	r29, 0x00	; 0
    2f2e:	22 30       	cpi	r18, 0x02	; 2
    2f30:	31 05       	cpc	r19, r1
    2f32:	6c f1       	brlt	.+90     	; 0x2f8e <main+0x170>
    2f34:	c8 50       	subi	r28, 0x08	; 8
    2f36:	df 4f       	sbci	r29, 0xFF	; 255
    2f38:	88 81       	ld	r24, Y
    2f3a:	99 81       	ldd	r25, Y+1	; 0x01
    2f3c:	c8 5f       	subi	r28, 0xF8	; 248
    2f3e:	d0 40       	sbci	r29, 0x00	; 0
    2f40:	82 30       	cpi	r24, 0x02	; 2
    2f42:	91 05       	cpc	r25, r1
    2f44:	99 f0       	breq	.+38     	; 0x2f6c <main+0x14e>
    2f46:	c8 50       	subi	r28, 0x08	; 8
    2f48:	df 4f       	sbci	r29, 0xFF	; 255
    2f4a:	28 81       	ld	r18, Y
    2f4c:	39 81       	ldd	r19, Y+1	; 0x01
    2f4e:	c8 5f       	subi	r28, 0xF8	; 248
    2f50:	d0 40       	sbci	r29, 0x00	; 0
    2f52:	23 30       	cpi	r18, 0x03	; 3
    2f54:	31 05       	cpc	r19, r1
    2f56:	99 f0       	breq	.+38     	; 0x2f7e <main+0x160>
    2f58:	1a c0       	rjmp	.+52     	; 0x2f8e <main+0x170>
					{
					case 0:
						break;
					case 1:
						strcpy(UserName,pch);
    2f5a:	ce 01       	movw	r24, r28
    2f5c:	8f 58       	subi	r24, 0x8F	; 143
    2f5e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f60:	2d 81       	ldd	r18, Y+5	; 0x05
    2f62:	3e 81       	ldd	r19, Y+6	; 0x06
    2f64:	b9 01       	movw	r22, r18
    2f66:	0e 94 09 19 	call	0x3212	; 0x3212 <strcpy>
    2f6a:	11 c0       	rjmp	.+34     	; 0x2f8e <main+0x170>
						break;
					case 2:
						strcpy(Password,pch);
    2f6c:	ce 01       	movw	r24, r28
    2f6e:	80 58       	subi	r24, 0x80	; 128
    2f70:	9f 4f       	sbci	r25, 0xFF	; 255
    2f72:	2d 81       	ldd	r18, Y+5	; 0x05
    2f74:	3e 81       	ldd	r19, Y+6	; 0x06
    2f76:	b9 01       	movw	r22, r18
    2f78:	0e 94 09 19 	call	0x3212	; 0x3212 <strcpy>
    2f7c:	08 c0       	rjmp	.+16     	; 0x2f8e <main+0x170>
						break;
					case 3:
						strcpy(Operation,pch);
    2f7e:	ce 01       	movw	r24, r28
    2f80:	86 57       	subi	r24, 0x76	; 118
    2f82:	9f 4f       	sbci	r25, 0xFF	; 255
    2f84:	2d 81       	ldd	r18, Y+5	; 0x05
    2f86:	3e 81       	ldd	r19, Y+6	; 0x06
    2f88:	b9 01       	movw	r22, r18
    2f8a:	0e 94 09 19 	call	0x3212	; 0x3212 <strcpy>
						break;
					default:
						break;
					}
					pch = strtok (NULL, " ");
    2f8e:	27 e7       	ldi	r18, 0x77	; 119
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	80 e0       	ldi	r24, 0x00	; 0
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	b9 01       	movw	r22, r18
    2f98:	0e 94 fd 18 	call	0x31fa	; 0x31fa <strtok>
    2f9c:	9e 83       	std	Y+6, r25	; 0x06
    2f9e:	8d 83       	std	Y+5, r24	; 0x05
					SliceIndex++;
    2fa0:	89 85       	ldd	r24, Y+9	; 0x09
    2fa2:	8f 5f       	subi	r24, 0xFF	; 255
    2fa4:	89 87       	std	Y+9, r24	; 0x09
				memset(Password,'\0',10);
				memset(Operation,'\0',10);
				//2-SPLIT COMMAND BY SPACE
				pch = strtok (ReceiveBuffer," ");
				SliceIndex = 0;
				while (pch != NULL)
    2fa6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa8:	9e 81       	ldd	r25, Y+6	; 0x06
    2faa:	00 97       	sbiw	r24, 0x00	; 0
    2fac:	09 f0       	breq	.+2      	; 0x2fb0 <main+0x192>
    2fae:	a7 cf       	rjmp	.-178    	; 0x2efe <main+0xe0>
					}
					pch = strtok (NULL, " ");
					SliceIndex++;
				};

				if(SliceIndex != 4)
    2fb0:	89 85       	ldd	r24, Y+9	; 0x09
    2fb2:	84 30       	cpi	r24, 0x04	; 4
    2fb4:	29 f0       	breq	.+10     	; 0x2fc0 <main+0x1a2>
				{
					UART_Print("BAD COMMAND\r\n");
    2fb6:	89 e7       	ldi	r24, 0x79	; 121
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	0e 94 c8 07 	call	0xf90	; 0xf90 <UART_Print>
    2fbe:	ce c0       	rjmp	.+412    	; 0x315c <main+0x33e>
				}
				else
				{
					memset(Slice,100,'\0');
					//LOG USERNAME PASSWORD OPEN
					snprintf (Slice,100,"USER NAME : %s\r\nPassword  : %s\r\nOPERATION : %s\r\n",UserName,Password,Operation);
    2fc0:	8d b7       	in	r24, 0x3d	; 61
    2fc2:	9e b7       	in	r25, 0x3e	; 62
    2fc4:	0c 97       	sbiw	r24, 0x0c	; 12
    2fc6:	0f b6       	in	r0, 0x3f	; 63
    2fc8:	f8 94       	cli
    2fca:	9e bf       	out	0x3e, r25	; 62
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	8d bf       	out	0x3d, r24	; 61
    2fd0:	ed b7       	in	r30, 0x3d	; 61
    2fd2:	fe b7       	in	r31, 0x3e	; 62
    2fd4:	31 96       	adiw	r30, 0x01	; 1
    2fd6:	ce 01       	movw	r24, r28
    2fd8:	8c 56       	subi	r24, 0x6C	; 108
    2fda:	9f 4f       	sbci	r25, 0xFF	; 255
    2fdc:	91 83       	std	Z+1, r25	; 0x01
    2fde:	80 83       	st	Z, r24
    2fe0:	84 e6       	ldi	r24, 0x64	; 100
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	93 83       	std	Z+3, r25	; 0x03
    2fe6:	82 83       	std	Z+2, r24	; 0x02
    2fe8:	87 e8       	ldi	r24, 0x87	; 135
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	95 83       	std	Z+5, r25	; 0x05
    2fee:	84 83       	std	Z+4, r24	; 0x04
    2ff0:	ce 01       	movw	r24, r28
    2ff2:	8f 58       	subi	r24, 0x8F	; 143
    2ff4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ff6:	97 83       	std	Z+7, r25	; 0x07
    2ff8:	86 83       	std	Z+6, r24	; 0x06
    2ffa:	ce 01       	movw	r24, r28
    2ffc:	80 58       	subi	r24, 0x80	; 128
    2ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    3000:	91 87       	std	Z+9, r25	; 0x09
    3002:	80 87       	std	Z+8, r24	; 0x08
    3004:	ce 01       	movw	r24, r28
    3006:	86 57       	subi	r24, 0x76	; 118
    3008:	9f 4f       	sbci	r25, 0xFF	; 255
    300a:	93 87       	std	Z+11, r25	; 0x0b
    300c:	82 87       	std	Z+10, r24	; 0x0a
    300e:	0e 94 51 19 	call	0x32a2	; 0x32a2 <snprintf>
    3012:	2d b7       	in	r18, 0x3d	; 61
    3014:	3e b7       	in	r19, 0x3e	; 62
    3016:	24 5f       	subi	r18, 0xF4	; 244
    3018:	3f 4f       	sbci	r19, 0xFF	; 255
    301a:	0f b6       	in	r0, 0x3f	; 63
    301c:	f8 94       	cli
    301e:	3e bf       	out	0x3e, r19	; 62
    3020:	0f be       	out	0x3f, r0	; 63
    3022:	2d bf       	out	0x3d, r18	; 61
					UART_Print(Slice);
    3024:	ce 01       	movw	r24, r28
    3026:	8c 56       	subi	r24, 0x6C	; 108
    3028:	9f 4f       	sbci	r25, 0xFF	; 255
    302a:	0e 94 c8 07 	call	0xf90	; 0xf90 <UART_Print>
					//3-Validate Login
					Validate = 0;
    302e:	1b 86       	std	Y+11, r1	; 0x0b
					for(int i=0;i<10;i++)
    3030:	1a 82       	std	Y+2, r1	; 0x02
    3032:	19 82       	std	Y+1, r1	; 0x01
    3034:	77 c0       	rjmp	.+238    	; 0x3124 <main+0x306>
					{
						if(strstr(UserName,UserNames[i]) != NULL)
    3036:	44 e1       	ldi	r20, 0x14	; 20
    3038:	52 e0       	ldi	r21, 0x02	; 2
    303a:	29 81       	ldd	r18, Y+1	; 0x01
    303c:	3a 81       	ldd	r19, Y+2	; 0x02
    303e:	c9 01       	movw	r24, r18
    3040:	88 0f       	add	r24, r24
    3042:	99 1f       	adc	r25, r25
    3044:	82 0f       	add	r24, r18
    3046:	93 1f       	adc	r25, r19
    3048:	9c 01       	movw	r18, r24
    304a:	22 0f       	add	r18, r18
    304c:	33 1f       	adc	r19, r19
    304e:	22 0f       	add	r18, r18
    3050:	33 1f       	adc	r19, r19
    3052:	82 0f       	add	r24, r18
    3054:	93 1f       	adc	r25, r19
    3056:	9a 01       	movw	r18, r20
    3058:	28 0f       	add	r18, r24
    305a:	39 1f       	adc	r19, r25
    305c:	ce 01       	movw	r24, r28
    305e:	8f 58       	subi	r24, 0x8F	; 143
    3060:	9f 4f       	sbci	r25, 0xFF	; 255
    3062:	b9 01       	movw	r22, r18
    3064:	0e 94 10 19 	call	0x3220	; 0x3220 <strstr>
    3068:	00 97       	sbiw	r24, 0x00	; 0
    306a:	09 f4       	brne	.+2      	; 0x306e <main+0x250>
    306c:	56 c0       	rjmp	.+172    	; 0x311a <main+0x2fc>
						{
							if(strstr(Password,Passwords[i]) != NULL)
    306e:	4a ea       	ldi	r20, 0xAA	; 170
    3070:	52 e0       	ldi	r21, 0x02	; 2
    3072:	89 81       	ldd	r24, Y+1	; 0x01
    3074:	9a 81       	ldd	r25, Y+2	; 0x02
    3076:	9c 01       	movw	r18, r24
    3078:	22 0f       	add	r18, r18
    307a:	33 1f       	adc	r19, r19
    307c:	c9 01       	movw	r24, r18
    307e:	88 0f       	add	r24, r24
    3080:	99 1f       	adc	r25, r25
    3082:	88 0f       	add	r24, r24
    3084:	99 1f       	adc	r25, r25
    3086:	82 0f       	add	r24, r18
    3088:	93 1f       	adc	r25, r19
    308a:	9a 01       	movw	r18, r20
    308c:	28 0f       	add	r18, r24
    308e:	39 1f       	adc	r19, r25
    3090:	ce 01       	movw	r24, r28
    3092:	80 58       	subi	r24, 0x80	; 128
    3094:	9f 4f       	sbci	r25, 0xFF	; 255
    3096:	b9 01       	movw	r22, r18
    3098:	0e 94 10 19 	call	0x3220	; 0x3220 <strstr>
    309c:	00 97       	sbiw	r24, 0x00	; 0
    309e:	e9 f1       	breq	.+122    	; 0x311a <main+0x2fc>
							{
								Validate = 1;
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	8b 87       	std	Y+11, r24	; 0x0b
								ALarm = 0;
    30a4:	1c 82       	std	Y+4, r1	; 0x04
								Try = 0;
    30a6:	1b 82       	std	Y+3, r1	; 0x03
								AlarmOFF();
    30a8:	0e 94 01 17 	call	0x2e02	; 0x2e02 <AlarmOFF>
								//4-Execute Operation
								if(strstr(Operation,"OPEN") != NULL)
    30ac:	ce 01       	movw	r24, r28
    30ae:	86 57       	subi	r24, 0x76	; 118
    30b0:	9f 4f       	sbci	r25, 0xFF	; 255
    30b2:	28 eb       	ldi	r18, 0xB8	; 184
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	b9 01       	movw	r22, r18
    30b8:	0e 94 10 19 	call	0x3220	; 0x3220 <strstr>
    30bc:	00 97       	sbiw	r24, 0x00	; 0
    30be:	39 f0       	breq	.+14     	; 0x30ce <main+0x2b0>
								{
									OpenDoor();
    30c0:	0e 94 cb 14 	call	0x2996	; 0x2996 <OpenDoor>
									UART_Print("OK\r\n");
    30c4:	8d eb       	ldi	r24, 0xBD	; 189
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	0e 94 c8 07 	call	0xf90	; 0xf90 <UART_Print>
    30cc:	26 c0       	rjmp	.+76     	; 0x311a <main+0x2fc>
								}
								else if(strstr(Operation,"ON") != NULL)
    30ce:	ce 01       	movw	r24, r28
    30d0:	86 57       	subi	r24, 0x76	; 118
    30d2:	9f 4f       	sbci	r25, 0xFF	; 255
    30d4:	22 ec       	ldi	r18, 0xC2	; 194
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	b9 01       	movw	r22, r18
    30da:	0e 94 10 19 	call	0x3220	; 0x3220 <strstr>
    30de:	00 97       	sbiw	r24, 0x00	; 0
    30e0:	39 f0       	breq	.+14     	; 0x30f0 <main+0x2d2>
								{
									LIGHTON();
    30e2:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LIGHTON>
									UART_Print("OK\r\n");
    30e6:	8d eb       	ldi	r24, 0xBD	; 189
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	0e 94 c8 07 	call	0xf90	; 0xf90 <UART_Print>
    30ee:	15 c0       	rjmp	.+42     	; 0x311a <main+0x2fc>
								}
								else if(strstr(Operation,"OFF") != NULL)
    30f0:	ce 01       	movw	r24, r28
    30f2:	86 57       	subi	r24, 0x76	; 118
    30f4:	9f 4f       	sbci	r25, 0xFF	; 255
    30f6:	25 ec       	ldi	r18, 0xC5	; 197
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	b9 01       	movw	r22, r18
    30fc:	0e 94 10 19 	call	0x3220	; 0x3220 <strstr>
    3100:	00 97       	sbiw	r24, 0x00	; 0
    3102:	39 f0       	breq	.+14     	; 0x3112 <main+0x2f4>
								{
									LIGHTOFF();
    3104:	0e 94 56 16 	call	0x2cac	; 0x2cac <LIGHTOFF>
									UART_Print("OK\r\n");
    3108:	8d eb       	ldi	r24, 0xBD	; 189
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	0e 94 c8 07 	call	0xf90	; 0xf90 <UART_Print>
    3110:	04 c0       	rjmp	.+8      	; 0x311a <main+0x2fc>
								}
								else
								{
									UART_Print("Operation Fail!!\r\n");
    3112:	89 ec       	ldi	r24, 0xC9	; 201
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	0e 94 c8 07 	call	0xf90	; 0xf90 <UART_Print>
					//LOG USERNAME PASSWORD OPEN
					snprintf (Slice,100,"USER NAME : %s\r\nPassword  : %s\r\nOPERATION : %s\r\n",UserName,Password,Operation);
					UART_Print(Slice);
					//3-Validate Login
					Validate = 0;
					for(int i=0;i<10;i++)
    311a:	89 81       	ldd	r24, Y+1	; 0x01
    311c:	9a 81       	ldd	r25, Y+2	; 0x02
    311e:	01 96       	adiw	r24, 0x01	; 1
    3120:	9a 83       	std	Y+2, r25	; 0x02
    3122:	89 83       	std	Y+1, r24	; 0x01
    3124:	89 81       	ldd	r24, Y+1	; 0x01
    3126:	9a 81       	ldd	r25, Y+2	; 0x02
    3128:	8a 30       	cpi	r24, 0x0A	; 10
    312a:	91 05       	cpc	r25, r1
    312c:	0c f4       	brge	.+2      	; 0x3130 <main+0x312>
    312e:	83 cf       	rjmp	.-250    	; 0x3036 <main+0x218>
									UART_Print("Operation Fail!!\r\n");
								}
							}
						}
					}
					if(Validate == 0)
    3130:	8b 85       	ldd	r24, Y+11	; 0x0b
    3132:	88 23       	and	r24, r24
    3134:	99 f4       	brne	.+38     	; 0x315c <main+0x33e>
					{
						UART_Print("Wrong User Name Or Password!!\r\n");
    3136:	8c ed       	ldi	r24, 0xDC	; 220
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	0e 94 c8 07 	call	0xf90	; 0xf90 <UART_Print>
						Try++;
    313e:	8b 81       	ldd	r24, Y+3	; 0x03
    3140:	8f 5f       	subi	r24, 0xFF	; 255
    3142:	8b 83       	std	Y+3, r24	; 0x03
						if(Try >= 3)
    3144:	8b 81       	ldd	r24, Y+3	; 0x03
    3146:	83 30       	cpi	r24, 0x03	; 3
    3148:	48 f0       	brcs	.+18     	; 0x315c <main+0x33e>
						{
							ALarm = 1;
    314a:	81 e0       	ldi	r24, 0x01	; 1
    314c:	8c 83       	std	Y+4, r24	; 0x04
							AlarmON();
    314e:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <AlarmON>
    3152:	04 c0       	rjmp	.+8      	; 0x315c <main+0x33e>
					}
				}
			}
			else
			{
				UART_Print("BAD COMMAND\r\n");
    3154:	89 e7       	ldi	r24, 0x79	; 121
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	0e 94 c8 07 	call	0xf90	; 0xf90 <UART_Print>
			}
			//Clear Buffer
			memset(ReceiveBuffer,'\0',100);
    315c:	ce 01       	movw	r24, r28
    315e:	0d 96       	adiw	r24, 0x0d	; 13
    3160:	60 e0       	ldi	r22, 0x00	; 0
    3162:	70 e0       	ldi	r23, 0x00	; 0
    3164:	44 e6       	ldi	r20, 0x64	; 100
    3166:	50 e0       	ldi	r21, 0x00	; 0
    3168:	0e 94 02 19 	call	0x3204	; 0x3204 <memset>
			ReceiveIndex = 0;
    316c:	1a 86       	std	Y+10, r1	; 0x0a
    316e:	7f ce       	rjmp	.-770    	; 0x2e6e <main+0x50>
		}
		else if(ReceiveIndex >= 100)//Reset Buffer
    3170:	8a 85       	ldd	r24, Y+10	; 0x0a
    3172:	84 36       	cpi	r24, 0x64	; 100
    3174:	08 f4       	brcc	.+2      	; 0x3178 <main+0x35a>
    3176:	7b ce       	rjmp	.-778    	; 0x2e6e <main+0x50>
		{
			memset(ReceiveBuffer,'\0',100);
    3178:	ce 01       	movw	r24, r28
    317a:	0d 96       	adiw	r24, 0x0d	; 13
    317c:	60 e0       	ldi	r22, 0x00	; 0
    317e:	70 e0       	ldi	r23, 0x00	; 0
    3180:	44 e6       	ldi	r20, 0x64	; 100
    3182:	50 e0       	ldi	r21, 0x00	; 0
    3184:	0e 94 02 19 	call	0x3204	; 0x3204 <memset>
			ReceiveIndex = 0;
    3188:	1a 86       	std	Y+10, r1	; 0x0a
    318a:	71 ce       	rjmp	.-798    	; 0x2e6e <main+0x50>

0000318c <__prologue_saves__>:
    318c:	2f 92       	push	r2
    318e:	3f 92       	push	r3
    3190:	4f 92       	push	r4
    3192:	5f 92       	push	r5
    3194:	6f 92       	push	r6
    3196:	7f 92       	push	r7
    3198:	8f 92       	push	r8
    319a:	9f 92       	push	r9
    319c:	af 92       	push	r10
    319e:	bf 92       	push	r11
    31a0:	cf 92       	push	r12
    31a2:	df 92       	push	r13
    31a4:	ef 92       	push	r14
    31a6:	ff 92       	push	r15
    31a8:	0f 93       	push	r16
    31aa:	1f 93       	push	r17
    31ac:	cf 93       	push	r28
    31ae:	df 93       	push	r29
    31b0:	cd b7       	in	r28, 0x3d	; 61
    31b2:	de b7       	in	r29, 0x3e	; 62
    31b4:	ca 1b       	sub	r28, r26
    31b6:	db 0b       	sbc	r29, r27
    31b8:	0f b6       	in	r0, 0x3f	; 63
    31ba:	f8 94       	cli
    31bc:	de bf       	out	0x3e, r29	; 62
    31be:	0f be       	out	0x3f, r0	; 63
    31c0:	cd bf       	out	0x3d, r28	; 61
    31c2:	09 94       	ijmp

000031c4 <__epilogue_restores__>:
    31c4:	2a 88       	ldd	r2, Y+18	; 0x12
    31c6:	39 88       	ldd	r3, Y+17	; 0x11
    31c8:	48 88       	ldd	r4, Y+16	; 0x10
    31ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    31cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    31ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    31d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    31d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    31d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    31d6:	b9 84       	ldd	r11, Y+9	; 0x09
    31d8:	c8 84       	ldd	r12, Y+8	; 0x08
    31da:	df 80       	ldd	r13, Y+7	; 0x07
    31dc:	ee 80       	ldd	r14, Y+6	; 0x06
    31de:	fd 80       	ldd	r15, Y+5	; 0x05
    31e0:	0c 81       	ldd	r16, Y+4	; 0x04
    31e2:	1b 81       	ldd	r17, Y+3	; 0x03
    31e4:	aa 81       	ldd	r26, Y+2	; 0x02
    31e6:	b9 81       	ldd	r27, Y+1	; 0x01
    31e8:	ce 0f       	add	r28, r30
    31ea:	d1 1d       	adc	r29, r1
    31ec:	0f b6       	in	r0, 0x3f	; 63
    31ee:	f8 94       	cli
    31f0:	de bf       	out	0x3e, r29	; 62
    31f2:	0f be       	out	0x3f, r0	; 63
    31f4:	cd bf       	out	0x3d, r28	; 61
    31f6:	ed 01       	movw	r28, r26
    31f8:	08 95       	ret

000031fa <strtok>:
    31fa:	4e e0       	ldi	r20, 0x0E	; 14
    31fc:	53 e0       	ldi	r21, 0x03	; 3
    31fe:	0e 94 2a 19 	call	0x3254	; 0x3254 <strtok_r>
    3202:	08 95       	ret

00003204 <memset>:
    3204:	dc 01       	movw	r26, r24
    3206:	01 c0       	rjmp	.+2      	; 0x320a <memset+0x6>
    3208:	6d 93       	st	X+, r22
    320a:	41 50       	subi	r20, 0x01	; 1
    320c:	50 40       	sbci	r21, 0x00	; 0
    320e:	e0 f7       	brcc	.-8      	; 0x3208 <memset+0x4>
    3210:	08 95       	ret

00003212 <strcpy>:
    3212:	fb 01       	movw	r30, r22
    3214:	dc 01       	movw	r26, r24
    3216:	01 90       	ld	r0, Z+
    3218:	0d 92       	st	X+, r0
    321a:	00 20       	and	r0, r0
    321c:	e1 f7       	brne	.-8      	; 0x3216 <strcpy+0x4>
    321e:	08 95       	ret

00003220 <strstr>:
    3220:	fb 01       	movw	r30, r22
    3222:	51 91       	ld	r21, Z+
    3224:	55 23       	and	r21, r21
    3226:	a9 f0       	breq	.+42     	; 0x3252 <strstr+0x32>
    3228:	bf 01       	movw	r22, r30
    322a:	dc 01       	movw	r26, r24
    322c:	4d 91       	ld	r20, X+
    322e:	45 17       	cp	r20, r21
    3230:	41 11       	cpse	r20, r1
    3232:	e1 f7       	brne	.-8      	; 0x322c <strstr+0xc>
    3234:	59 f4       	brne	.+22     	; 0x324c <strstr+0x2c>
    3236:	cd 01       	movw	r24, r26
    3238:	01 90       	ld	r0, Z+
    323a:	00 20       	and	r0, r0
    323c:	49 f0       	breq	.+18     	; 0x3250 <strstr+0x30>
    323e:	4d 91       	ld	r20, X+
    3240:	40 15       	cp	r20, r0
    3242:	41 11       	cpse	r20, r1
    3244:	c9 f3       	breq	.-14     	; 0x3238 <strstr+0x18>
    3246:	fb 01       	movw	r30, r22
    3248:	41 11       	cpse	r20, r1
    324a:	ef cf       	rjmp	.-34     	; 0x322a <strstr+0xa>
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	01 97       	sbiw	r24, 0x01	; 1
    3252:	08 95       	ret

00003254 <strtok_r>:
    3254:	fa 01       	movw	r30, r20
    3256:	a1 91       	ld	r26, Z+
    3258:	b0 81       	ld	r27, Z
    325a:	00 97       	sbiw	r24, 0x00	; 0
    325c:	19 f4       	brne	.+6      	; 0x3264 <strtok_r+0x10>
    325e:	10 97       	sbiw	r26, 0x00	; 0
    3260:	e1 f0       	breq	.+56     	; 0x329a <strtok_r+0x46>
    3262:	cd 01       	movw	r24, r26
    3264:	dc 01       	movw	r26, r24
    3266:	cd 01       	movw	r24, r26
    3268:	0d 90       	ld	r0, X+
    326a:	00 20       	and	r0, r0
    326c:	11 f4       	brne	.+4      	; 0x3272 <strtok_r+0x1e>
    326e:	c0 01       	movw	r24, r0
    3270:	13 c0       	rjmp	.+38     	; 0x3298 <strtok_r+0x44>
    3272:	fb 01       	movw	r30, r22
    3274:	21 91       	ld	r18, Z+
    3276:	22 23       	and	r18, r18
    3278:	19 f0       	breq	.+6      	; 0x3280 <strtok_r+0x2c>
    327a:	20 15       	cp	r18, r0
    327c:	d9 f7       	brne	.-10     	; 0x3274 <strtok_r+0x20>
    327e:	f3 cf       	rjmp	.-26     	; 0x3266 <strtok_r+0x12>
    3280:	fb 01       	movw	r30, r22
    3282:	21 91       	ld	r18, Z+
    3284:	20 15       	cp	r18, r0
    3286:	19 f4       	brne	.+6      	; 0x328e <strtok_r+0x3a>
    3288:	1e 92       	st	-X, r1
    328a:	11 96       	adiw	r26, 0x01	; 1
    328c:	06 c0       	rjmp	.+12     	; 0x329a <strtok_r+0x46>
    328e:	22 23       	and	r18, r18
    3290:	c1 f7       	brne	.-16     	; 0x3282 <strtok_r+0x2e>
    3292:	0d 90       	ld	r0, X+
    3294:	00 20       	and	r0, r0
    3296:	a1 f7       	brne	.-24     	; 0x3280 <strtok_r+0x2c>
    3298:	d0 01       	movw	r26, r0
    329a:	fa 01       	movw	r30, r20
    329c:	a1 93       	st	Z+, r26
    329e:	b0 83       	st	Z, r27
    32a0:	08 95       	ret

000032a2 <snprintf>:
    32a2:	ae e0       	ldi	r26, 0x0E	; 14
    32a4:	b0 e0       	ldi	r27, 0x00	; 0
    32a6:	e7 e5       	ldi	r30, 0x57	; 87
    32a8:	f9 e1       	ldi	r31, 0x19	; 25
    32aa:	0c 94 d4 18 	jmp	0x31a8	; 0x31a8 <__prologue_saves__+0x1c>
    32ae:	0d 89       	ldd	r16, Y+21	; 0x15
    32b0:	1e 89       	ldd	r17, Y+22	; 0x16
    32b2:	8f 89       	ldd	r24, Y+23	; 0x17
    32b4:	98 8d       	ldd	r25, Y+24	; 0x18
    32b6:	97 ff       	sbrs	r25, 7
    32b8:	02 c0       	rjmp	.+4      	; 0x32be <snprintf+0x1c>
    32ba:	80 e0       	ldi	r24, 0x00	; 0
    32bc:	90 e8       	ldi	r25, 0x80	; 128
    32be:	01 97       	sbiw	r24, 0x01	; 1
    32c0:	9e 83       	std	Y+6, r25	; 0x06
    32c2:	8d 83       	std	Y+5, r24	; 0x05
    32c4:	1a 83       	std	Y+2, r17	; 0x02
    32c6:	09 83       	std	Y+1, r16	; 0x01
    32c8:	86 e0       	ldi	r24, 0x06	; 6
    32ca:	8c 83       	std	Y+4, r24	; 0x04
    32cc:	9e 01       	movw	r18, r28
    32ce:	25 5e       	subi	r18, 0xE5	; 229
    32d0:	3f 4f       	sbci	r19, 0xFF	; 255
    32d2:	ce 01       	movw	r24, r28
    32d4:	01 96       	adiw	r24, 0x01	; 1
    32d6:	69 8d       	ldd	r22, Y+25	; 0x19
    32d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32da:	a9 01       	movw	r20, r18
    32dc:	0e 94 82 19 	call	0x3304	; 0x3304 <vfprintf>
    32e0:	4d 81       	ldd	r20, Y+5	; 0x05
    32e2:	5e 81       	ldd	r21, Y+6	; 0x06
    32e4:	57 fd       	sbrc	r21, 7
    32e6:	0a c0       	rjmp	.+20     	; 0x32fc <snprintf+0x5a>
    32e8:	2f 81       	ldd	r18, Y+7	; 0x07
    32ea:	38 85       	ldd	r19, Y+8	; 0x08
    32ec:	42 17       	cp	r20, r18
    32ee:	53 07       	cpc	r21, r19
    32f0:	0c f4       	brge	.+2      	; 0x32f4 <snprintf+0x52>
    32f2:	9a 01       	movw	r18, r20
    32f4:	02 0f       	add	r16, r18
    32f6:	13 1f       	adc	r17, r19
    32f8:	f8 01       	movw	r30, r16
    32fa:	10 82       	st	Z, r1
    32fc:	2e 96       	adiw	r28, 0x0e	; 14
    32fe:	e4 e0       	ldi	r30, 0x04	; 4
    3300:	0c 94 f0 18 	jmp	0x31e0	; 0x31e0 <__epilogue_restores__+0x1c>

00003304 <vfprintf>:
    3304:	ab e0       	ldi	r26, 0x0B	; 11
    3306:	b0 e0       	ldi	r27, 0x00	; 0
    3308:	e8 e8       	ldi	r30, 0x88	; 136
    330a:	f9 e1       	ldi	r31, 0x19	; 25
    330c:	0c 94 c6 18 	jmp	0x318c	; 0x318c <__prologue_saves__>
    3310:	3c 01       	movw	r6, r24
    3312:	2b 01       	movw	r4, r22
    3314:	5a 01       	movw	r10, r20
    3316:	fc 01       	movw	r30, r24
    3318:	17 82       	std	Z+7, r1	; 0x07
    331a:	16 82       	std	Z+6, r1	; 0x06
    331c:	83 81       	ldd	r24, Z+3	; 0x03
    331e:	81 fd       	sbrc	r24, 1
    3320:	03 c0       	rjmp	.+6      	; 0x3328 <vfprintf+0x24>
    3322:	6f ef       	ldi	r22, 0xFF	; 255
    3324:	7f ef       	ldi	r23, 0xFF	; 255
    3326:	c6 c1       	rjmp	.+908    	; 0x36b4 <vfprintf+0x3b0>
    3328:	9a e0       	ldi	r25, 0x0A	; 10
    332a:	89 2e       	mov	r8, r25
    332c:	1e 01       	movw	r2, r28
    332e:	08 94       	sec
    3330:	21 1c       	adc	r2, r1
    3332:	31 1c       	adc	r3, r1
    3334:	f3 01       	movw	r30, r6
    3336:	23 81       	ldd	r18, Z+3	; 0x03
    3338:	f2 01       	movw	r30, r4
    333a:	23 fd       	sbrc	r18, 3
    333c:	85 91       	lpm	r24, Z+
    333e:	23 ff       	sbrs	r18, 3
    3340:	81 91       	ld	r24, Z+
    3342:	2f 01       	movw	r4, r30
    3344:	88 23       	and	r24, r24
    3346:	09 f4       	brne	.+2      	; 0x334a <vfprintf+0x46>
    3348:	b2 c1       	rjmp	.+868    	; 0x36ae <vfprintf+0x3aa>
    334a:	85 32       	cpi	r24, 0x25	; 37
    334c:	39 f4       	brne	.+14     	; 0x335c <vfprintf+0x58>
    334e:	23 fd       	sbrc	r18, 3
    3350:	85 91       	lpm	r24, Z+
    3352:	23 ff       	sbrs	r18, 3
    3354:	81 91       	ld	r24, Z+
    3356:	2f 01       	movw	r4, r30
    3358:	85 32       	cpi	r24, 0x25	; 37
    335a:	29 f4       	brne	.+10     	; 0x3366 <vfprintf+0x62>
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	b3 01       	movw	r22, r6
    3360:	0e 94 75 1b 	call	0x36ea	; 0x36ea <fputc>
    3364:	e7 cf       	rjmp	.-50     	; 0x3334 <vfprintf+0x30>
    3366:	98 2f       	mov	r25, r24
    3368:	ff 24       	eor	r15, r15
    336a:	ee 24       	eor	r14, r14
    336c:	99 24       	eor	r9, r9
    336e:	ff e1       	ldi	r31, 0x1F	; 31
    3370:	ff 15       	cp	r31, r15
    3372:	d0 f0       	brcs	.+52     	; 0x33a8 <vfprintf+0xa4>
    3374:	9b 32       	cpi	r25, 0x2B	; 43
    3376:	69 f0       	breq	.+26     	; 0x3392 <vfprintf+0x8e>
    3378:	9c 32       	cpi	r25, 0x2C	; 44
    337a:	28 f4       	brcc	.+10     	; 0x3386 <vfprintf+0x82>
    337c:	90 32       	cpi	r25, 0x20	; 32
    337e:	59 f0       	breq	.+22     	; 0x3396 <vfprintf+0x92>
    3380:	93 32       	cpi	r25, 0x23	; 35
    3382:	91 f4       	brne	.+36     	; 0x33a8 <vfprintf+0xa4>
    3384:	0e c0       	rjmp	.+28     	; 0x33a2 <vfprintf+0x9e>
    3386:	9d 32       	cpi	r25, 0x2D	; 45
    3388:	49 f0       	breq	.+18     	; 0x339c <vfprintf+0x98>
    338a:	90 33       	cpi	r25, 0x30	; 48
    338c:	69 f4       	brne	.+26     	; 0x33a8 <vfprintf+0xa4>
    338e:	41 e0       	ldi	r20, 0x01	; 1
    3390:	24 c0       	rjmp	.+72     	; 0x33da <vfprintf+0xd6>
    3392:	52 e0       	ldi	r21, 0x02	; 2
    3394:	f5 2a       	or	r15, r21
    3396:	84 e0       	ldi	r24, 0x04	; 4
    3398:	f8 2a       	or	r15, r24
    339a:	28 c0       	rjmp	.+80     	; 0x33ec <vfprintf+0xe8>
    339c:	98 e0       	ldi	r25, 0x08	; 8
    339e:	f9 2a       	or	r15, r25
    33a0:	25 c0       	rjmp	.+74     	; 0x33ec <vfprintf+0xe8>
    33a2:	e0 e1       	ldi	r30, 0x10	; 16
    33a4:	fe 2a       	or	r15, r30
    33a6:	22 c0       	rjmp	.+68     	; 0x33ec <vfprintf+0xe8>
    33a8:	f7 fc       	sbrc	r15, 7
    33aa:	29 c0       	rjmp	.+82     	; 0x33fe <vfprintf+0xfa>
    33ac:	89 2f       	mov	r24, r25
    33ae:	80 53       	subi	r24, 0x30	; 48
    33b0:	8a 30       	cpi	r24, 0x0A	; 10
    33b2:	70 f4       	brcc	.+28     	; 0x33d0 <vfprintf+0xcc>
    33b4:	f6 fe       	sbrs	r15, 6
    33b6:	05 c0       	rjmp	.+10     	; 0x33c2 <vfprintf+0xbe>
    33b8:	98 9c       	mul	r9, r8
    33ba:	90 2c       	mov	r9, r0
    33bc:	11 24       	eor	r1, r1
    33be:	98 0e       	add	r9, r24
    33c0:	15 c0       	rjmp	.+42     	; 0x33ec <vfprintf+0xe8>
    33c2:	e8 9c       	mul	r14, r8
    33c4:	e0 2c       	mov	r14, r0
    33c6:	11 24       	eor	r1, r1
    33c8:	e8 0e       	add	r14, r24
    33ca:	f0 e2       	ldi	r31, 0x20	; 32
    33cc:	ff 2a       	or	r15, r31
    33ce:	0e c0       	rjmp	.+28     	; 0x33ec <vfprintf+0xe8>
    33d0:	9e 32       	cpi	r25, 0x2E	; 46
    33d2:	29 f4       	brne	.+10     	; 0x33de <vfprintf+0xda>
    33d4:	f6 fc       	sbrc	r15, 6
    33d6:	6b c1       	rjmp	.+726    	; 0x36ae <vfprintf+0x3aa>
    33d8:	40 e4       	ldi	r20, 0x40	; 64
    33da:	f4 2a       	or	r15, r20
    33dc:	07 c0       	rjmp	.+14     	; 0x33ec <vfprintf+0xe8>
    33de:	9c 36       	cpi	r25, 0x6C	; 108
    33e0:	19 f4       	brne	.+6      	; 0x33e8 <vfprintf+0xe4>
    33e2:	50 e8       	ldi	r21, 0x80	; 128
    33e4:	f5 2a       	or	r15, r21
    33e6:	02 c0       	rjmp	.+4      	; 0x33ec <vfprintf+0xe8>
    33e8:	98 36       	cpi	r25, 0x68	; 104
    33ea:	49 f4       	brne	.+18     	; 0x33fe <vfprintf+0xfa>
    33ec:	f2 01       	movw	r30, r4
    33ee:	23 fd       	sbrc	r18, 3
    33f0:	95 91       	lpm	r25, Z+
    33f2:	23 ff       	sbrs	r18, 3
    33f4:	91 91       	ld	r25, Z+
    33f6:	2f 01       	movw	r4, r30
    33f8:	99 23       	and	r25, r25
    33fa:	09 f0       	breq	.+2      	; 0x33fe <vfprintf+0xfa>
    33fc:	b8 cf       	rjmp	.-144    	; 0x336e <vfprintf+0x6a>
    33fe:	89 2f       	mov	r24, r25
    3400:	85 54       	subi	r24, 0x45	; 69
    3402:	83 30       	cpi	r24, 0x03	; 3
    3404:	18 f0       	brcs	.+6      	; 0x340c <vfprintf+0x108>
    3406:	80 52       	subi	r24, 0x20	; 32
    3408:	83 30       	cpi	r24, 0x03	; 3
    340a:	38 f4       	brcc	.+14     	; 0x341a <vfprintf+0x116>
    340c:	44 e0       	ldi	r20, 0x04	; 4
    340e:	50 e0       	ldi	r21, 0x00	; 0
    3410:	a4 0e       	add	r10, r20
    3412:	b5 1e       	adc	r11, r21
    3414:	5f e3       	ldi	r21, 0x3F	; 63
    3416:	59 83       	std	Y+1, r21	; 0x01
    3418:	0f c0       	rjmp	.+30     	; 0x3438 <vfprintf+0x134>
    341a:	93 36       	cpi	r25, 0x63	; 99
    341c:	31 f0       	breq	.+12     	; 0x342a <vfprintf+0x126>
    341e:	93 37       	cpi	r25, 0x73	; 115
    3420:	79 f0       	breq	.+30     	; 0x3440 <vfprintf+0x13c>
    3422:	93 35       	cpi	r25, 0x53	; 83
    3424:	09 f0       	breq	.+2      	; 0x3428 <vfprintf+0x124>
    3426:	56 c0       	rjmp	.+172    	; 0x34d4 <vfprintf+0x1d0>
    3428:	20 c0       	rjmp	.+64     	; 0x346a <vfprintf+0x166>
    342a:	f5 01       	movw	r30, r10
    342c:	80 81       	ld	r24, Z
    342e:	89 83       	std	Y+1, r24	; 0x01
    3430:	42 e0       	ldi	r20, 0x02	; 2
    3432:	50 e0       	ldi	r21, 0x00	; 0
    3434:	a4 0e       	add	r10, r20
    3436:	b5 1e       	adc	r11, r21
    3438:	61 01       	movw	r12, r2
    343a:	01 e0       	ldi	r16, 0x01	; 1
    343c:	10 e0       	ldi	r17, 0x00	; 0
    343e:	12 c0       	rjmp	.+36     	; 0x3464 <vfprintf+0x160>
    3440:	f5 01       	movw	r30, r10
    3442:	c0 80       	ld	r12, Z
    3444:	d1 80       	ldd	r13, Z+1	; 0x01
    3446:	f6 fc       	sbrc	r15, 6
    3448:	03 c0       	rjmp	.+6      	; 0x3450 <vfprintf+0x14c>
    344a:	6f ef       	ldi	r22, 0xFF	; 255
    344c:	7f ef       	ldi	r23, 0xFF	; 255
    344e:	02 c0       	rjmp	.+4      	; 0x3454 <vfprintf+0x150>
    3450:	69 2d       	mov	r22, r9
    3452:	70 e0       	ldi	r23, 0x00	; 0
    3454:	42 e0       	ldi	r20, 0x02	; 2
    3456:	50 e0       	ldi	r21, 0x00	; 0
    3458:	a4 0e       	add	r10, r20
    345a:	b5 1e       	adc	r11, r21
    345c:	c6 01       	movw	r24, r12
    345e:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <strnlen>
    3462:	8c 01       	movw	r16, r24
    3464:	5f e7       	ldi	r21, 0x7F	; 127
    3466:	f5 22       	and	r15, r21
    3468:	14 c0       	rjmp	.+40     	; 0x3492 <vfprintf+0x18e>
    346a:	f5 01       	movw	r30, r10
    346c:	c0 80       	ld	r12, Z
    346e:	d1 80       	ldd	r13, Z+1	; 0x01
    3470:	f6 fc       	sbrc	r15, 6
    3472:	03 c0       	rjmp	.+6      	; 0x347a <vfprintf+0x176>
    3474:	6f ef       	ldi	r22, 0xFF	; 255
    3476:	7f ef       	ldi	r23, 0xFF	; 255
    3478:	02 c0       	rjmp	.+4      	; 0x347e <vfprintf+0x17a>
    347a:	69 2d       	mov	r22, r9
    347c:	70 e0       	ldi	r23, 0x00	; 0
    347e:	42 e0       	ldi	r20, 0x02	; 2
    3480:	50 e0       	ldi	r21, 0x00	; 0
    3482:	a4 0e       	add	r10, r20
    3484:	b5 1e       	adc	r11, r21
    3486:	c6 01       	movw	r24, r12
    3488:	0e 94 5f 1b 	call	0x36be	; 0x36be <strnlen_P>
    348c:	8c 01       	movw	r16, r24
    348e:	50 e8       	ldi	r21, 0x80	; 128
    3490:	f5 2a       	or	r15, r21
    3492:	f3 fe       	sbrs	r15, 3
    3494:	07 c0       	rjmp	.+14     	; 0x34a4 <vfprintf+0x1a0>
    3496:	1a c0       	rjmp	.+52     	; 0x34cc <vfprintf+0x1c8>
    3498:	80 e2       	ldi	r24, 0x20	; 32
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	b3 01       	movw	r22, r6
    349e:	0e 94 75 1b 	call	0x36ea	; 0x36ea <fputc>
    34a2:	ea 94       	dec	r14
    34a4:	8e 2d       	mov	r24, r14
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	08 17       	cp	r16, r24
    34aa:	19 07       	cpc	r17, r25
    34ac:	a8 f3       	brcs	.-22     	; 0x3498 <vfprintf+0x194>
    34ae:	0e c0       	rjmp	.+28     	; 0x34cc <vfprintf+0x1c8>
    34b0:	f6 01       	movw	r30, r12
    34b2:	f7 fc       	sbrc	r15, 7
    34b4:	85 91       	lpm	r24, Z+
    34b6:	f7 fe       	sbrs	r15, 7
    34b8:	81 91       	ld	r24, Z+
    34ba:	6f 01       	movw	r12, r30
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	b3 01       	movw	r22, r6
    34c0:	0e 94 75 1b 	call	0x36ea	; 0x36ea <fputc>
    34c4:	e1 10       	cpse	r14, r1
    34c6:	ea 94       	dec	r14
    34c8:	01 50       	subi	r16, 0x01	; 1
    34ca:	10 40       	sbci	r17, 0x00	; 0
    34cc:	01 15       	cp	r16, r1
    34ce:	11 05       	cpc	r17, r1
    34d0:	79 f7       	brne	.-34     	; 0x34b0 <vfprintf+0x1ac>
    34d2:	ea c0       	rjmp	.+468    	; 0x36a8 <vfprintf+0x3a4>
    34d4:	94 36       	cpi	r25, 0x64	; 100
    34d6:	11 f0       	breq	.+4      	; 0x34dc <vfprintf+0x1d8>
    34d8:	99 36       	cpi	r25, 0x69	; 105
    34da:	69 f5       	brne	.+90     	; 0x3536 <vfprintf+0x232>
    34dc:	f7 fe       	sbrs	r15, 7
    34de:	08 c0       	rjmp	.+16     	; 0x34f0 <vfprintf+0x1ec>
    34e0:	f5 01       	movw	r30, r10
    34e2:	20 81       	ld	r18, Z
    34e4:	31 81       	ldd	r19, Z+1	; 0x01
    34e6:	42 81       	ldd	r20, Z+2	; 0x02
    34e8:	53 81       	ldd	r21, Z+3	; 0x03
    34ea:	84 e0       	ldi	r24, 0x04	; 4
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	0a c0       	rjmp	.+20     	; 0x3504 <vfprintf+0x200>
    34f0:	f5 01       	movw	r30, r10
    34f2:	80 81       	ld	r24, Z
    34f4:	91 81       	ldd	r25, Z+1	; 0x01
    34f6:	9c 01       	movw	r18, r24
    34f8:	44 27       	eor	r20, r20
    34fa:	37 fd       	sbrc	r19, 7
    34fc:	40 95       	com	r20
    34fe:	54 2f       	mov	r21, r20
    3500:	82 e0       	ldi	r24, 0x02	; 2
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	a8 0e       	add	r10, r24
    3506:	b9 1e       	adc	r11, r25
    3508:	9f e6       	ldi	r25, 0x6F	; 111
    350a:	f9 22       	and	r15, r25
    350c:	57 ff       	sbrs	r21, 7
    350e:	09 c0       	rjmp	.+18     	; 0x3522 <vfprintf+0x21e>
    3510:	50 95       	com	r21
    3512:	40 95       	com	r20
    3514:	30 95       	com	r19
    3516:	21 95       	neg	r18
    3518:	3f 4f       	sbci	r19, 0xFF	; 255
    351a:	4f 4f       	sbci	r20, 0xFF	; 255
    351c:	5f 4f       	sbci	r21, 0xFF	; 255
    351e:	e0 e8       	ldi	r30, 0x80	; 128
    3520:	fe 2a       	or	r15, r30
    3522:	ca 01       	movw	r24, r20
    3524:	b9 01       	movw	r22, r18
    3526:	a1 01       	movw	r20, r2
    3528:	2a e0       	ldi	r18, 0x0A	; 10
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	0e 94 a1 1b 	call	0x3742	; 0x3742 <__ultoa_invert>
    3530:	d8 2e       	mov	r13, r24
    3532:	d2 18       	sub	r13, r2
    3534:	40 c0       	rjmp	.+128    	; 0x35b6 <vfprintf+0x2b2>
    3536:	95 37       	cpi	r25, 0x75	; 117
    3538:	29 f4       	brne	.+10     	; 0x3544 <vfprintf+0x240>
    353a:	1f 2d       	mov	r17, r15
    353c:	1f 7e       	andi	r17, 0xEF	; 239
    353e:	2a e0       	ldi	r18, 0x0A	; 10
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	1d c0       	rjmp	.+58     	; 0x357e <vfprintf+0x27a>
    3544:	1f 2d       	mov	r17, r15
    3546:	19 7f       	andi	r17, 0xF9	; 249
    3548:	9f 36       	cpi	r25, 0x6F	; 111
    354a:	61 f0       	breq	.+24     	; 0x3564 <vfprintf+0x260>
    354c:	90 37       	cpi	r25, 0x70	; 112
    354e:	20 f4       	brcc	.+8      	; 0x3558 <vfprintf+0x254>
    3550:	98 35       	cpi	r25, 0x58	; 88
    3552:	09 f0       	breq	.+2      	; 0x3556 <vfprintf+0x252>
    3554:	ac c0       	rjmp	.+344    	; 0x36ae <vfprintf+0x3aa>
    3556:	0f c0       	rjmp	.+30     	; 0x3576 <vfprintf+0x272>
    3558:	90 37       	cpi	r25, 0x70	; 112
    355a:	39 f0       	breq	.+14     	; 0x356a <vfprintf+0x266>
    355c:	98 37       	cpi	r25, 0x78	; 120
    355e:	09 f0       	breq	.+2      	; 0x3562 <vfprintf+0x25e>
    3560:	a6 c0       	rjmp	.+332    	; 0x36ae <vfprintf+0x3aa>
    3562:	04 c0       	rjmp	.+8      	; 0x356c <vfprintf+0x268>
    3564:	28 e0       	ldi	r18, 0x08	; 8
    3566:	30 e0       	ldi	r19, 0x00	; 0
    3568:	0a c0       	rjmp	.+20     	; 0x357e <vfprintf+0x27a>
    356a:	10 61       	ori	r17, 0x10	; 16
    356c:	14 fd       	sbrc	r17, 4
    356e:	14 60       	ori	r17, 0x04	; 4
    3570:	20 e1       	ldi	r18, 0x10	; 16
    3572:	30 e0       	ldi	r19, 0x00	; 0
    3574:	04 c0       	rjmp	.+8      	; 0x357e <vfprintf+0x27a>
    3576:	14 fd       	sbrc	r17, 4
    3578:	16 60       	ori	r17, 0x06	; 6
    357a:	20 e1       	ldi	r18, 0x10	; 16
    357c:	32 e0       	ldi	r19, 0x02	; 2
    357e:	17 ff       	sbrs	r17, 7
    3580:	08 c0       	rjmp	.+16     	; 0x3592 <vfprintf+0x28e>
    3582:	f5 01       	movw	r30, r10
    3584:	60 81       	ld	r22, Z
    3586:	71 81       	ldd	r23, Z+1	; 0x01
    3588:	82 81       	ldd	r24, Z+2	; 0x02
    358a:	93 81       	ldd	r25, Z+3	; 0x03
    358c:	44 e0       	ldi	r20, 0x04	; 4
    358e:	50 e0       	ldi	r21, 0x00	; 0
    3590:	08 c0       	rjmp	.+16     	; 0x35a2 <vfprintf+0x29e>
    3592:	f5 01       	movw	r30, r10
    3594:	80 81       	ld	r24, Z
    3596:	91 81       	ldd	r25, Z+1	; 0x01
    3598:	bc 01       	movw	r22, r24
    359a:	80 e0       	ldi	r24, 0x00	; 0
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	42 e0       	ldi	r20, 0x02	; 2
    35a0:	50 e0       	ldi	r21, 0x00	; 0
    35a2:	a4 0e       	add	r10, r20
    35a4:	b5 1e       	adc	r11, r21
    35a6:	a1 01       	movw	r20, r2
    35a8:	0e 94 a1 1b 	call	0x3742	; 0x3742 <__ultoa_invert>
    35ac:	d8 2e       	mov	r13, r24
    35ae:	d2 18       	sub	r13, r2
    35b0:	8f e7       	ldi	r24, 0x7F	; 127
    35b2:	f8 2e       	mov	r15, r24
    35b4:	f1 22       	and	r15, r17
    35b6:	f6 fe       	sbrs	r15, 6
    35b8:	0b c0       	rjmp	.+22     	; 0x35d0 <vfprintf+0x2cc>
    35ba:	5e ef       	ldi	r21, 0xFE	; 254
    35bc:	f5 22       	and	r15, r21
    35be:	d9 14       	cp	r13, r9
    35c0:	38 f4       	brcc	.+14     	; 0x35d0 <vfprintf+0x2cc>
    35c2:	f4 fe       	sbrs	r15, 4
    35c4:	07 c0       	rjmp	.+14     	; 0x35d4 <vfprintf+0x2d0>
    35c6:	f2 fc       	sbrc	r15, 2
    35c8:	05 c0       	rjmp	.+10     	; 0x35d4 <vfprintf+0x2d0>
    35ca:	8f ee       	ldi	r24, 0xEF	; 239
    35cc:	f8 22       	and	r15, r24
    35ce:	02 c0       	rjmp	.+4      	; 0x35d4 <vfprintf+0x2d0>
    35d0:	1d 2d       	mov	r17, r13
    35d2:	01 c0       	rjmp	.+2      	; 0x35d6 <vfprintf+0x2d2>
    35d4:	19 2d       	mov	r17, r9
    35d6:	f4 fe       	sbrs	r15, 4
    35d8:	0d c0       	rjmp	.+26     	; 0x35f4 <vfprintf+0x2f0>
    35da:	fe 01       	movw	r30, r28
    35dc:	ed 0d       	add	r30, r13
    35de:	f1 1d       	adc	r31, r1
    35e0:	80 81       	ld	r24, Z
    35e2:	80 33       	cpi	r24, 0x30	; 48
    35e4:	19 f4       	brne	.+6      	; 0x35ec <vfprintf+0x2e8>
    35e6:	99 ee       	ldi	r25, 0xE9	; 233
    35e8:	f9 22       	and	r15, r25
    35ea:	08 c0       	rjmp	.+16     	; 0x35fc <vfprintf+0x2f8>
    35ec:	1f 5f       	subi	r17, 0xFF	; 255
    35ee:	f2 fe       	sbrs	r15, 2
    35f0:	05 c0       	rjmp	.+10     	; 0x35fc <vfprintf+0x2f8>
    35f2:	03 c0       	rjmp	.+6      	; 0x35fa <vfprintf+0x2f6>
    35f4:	8f 2d       	mov	r24, r15
    35f6:	86 78       	andi	r24, 0x86	; 134
    35f8:	09 f0       	breq	.+2      	; 0x35fc <vfprintf+0x2f8>
    35fa:	1f 5f       	subi	r17, 0xFF	; 255
    35fc:	0f 2d       	mov	r16, r15
    35fe:	f3 fc       	sbrc	r15, 3
    3600:	14 c0       	rjmp	.+40     	; 0x362a <vfprintf+0x326>
    3602:	f0 fe       	sbrs	r15, 0
    3604:	0f c0       	rjmp	.+30     	; 0x3624 <vfprintf+0x320>
    3606:	1e 15       	cp	r17, r14
    3608:	10 f0       	brcs	.+4      	; 0x360e <vfprintf+0x30a>
    360a:	9d 2c       	mov	r9, r13
    360c:	0b c0       	rjmp	.+22     	; 0x3624 <vfprintf+0x320>
    360e:	9d 2c       	mov	r9, r13
    3610:	9e 0c       	add	r9, r14
    3612:	91 1a       	sub	r9, r17
    3614:	1e 2d       	mov	r17, r14
    3616:	06 c0       	rjmp	.+12     	; 0x3624 <vfprintf+0x320>
    3618:	80 e2       	ldi	r24, 0x20	; 32
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	b3 01       	movw	r22, r6
    361e:	0e 94 75 1b 	call	0x36ea	; 0x36ea <fputc>
    3622:	1f 5f       	subi	r17, 0xFF	; 255
    3624:	1e 15       	cp	r17, r14
    3626:	c0 f3       	brcs	.-16     	; 0x3618 <vfprintf+0x314>
    3628:	04 c0       	rjmp	.+8      	; 0x3632 <vfprintf+0x32e>
    362a:	1e 15       	cp	r17, r14
    362c:	10 f4       	brcc	.+4      	; 0x3632 <vfprintf+0x32e>
    362e:	e1 1a       	sub	r14, r17
    3630:	01 c0       	rjmp	.+2      	; 0x3634 <vfprintf+0x330>
    3632:	ee 24       	eor	r14, r14
    3634:	04 ff       	sbrs	r16, 4
    3636:	0f c0       	rjmp	.+30     	; 0x3656 <vfprintf+0x352>
    3638:	80 e3       	ldi	r24, 0x30	; 48
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	b3 01       	movw	r22, r6
    363e:	0e 94 75 1b 	call	0x36ea	; 0x36ea <fputc>
    3642:	02 ff       	sbrs	r16, 2
    3644:	1d c0       	rjmp	.+58     	; 0x3680 <vfprintf+0x37c>
    3646:	01 fd       	sbrc	r16, 1
    3648:	03 c0       	rjmp	.+6      	; 0x3650 <vfprintf+0x34c>
    364a:	88 e7       	ldi	r24, 0x78	; 120
    364c:	90 e0       	ldi	r25, 0x00	; 0
    364e:	0e c0       	rjmp	.+28     	; 0x366c <vfprintf+0x368>
    3650:	88 e5       	ldi	r24, 0x58	; 88
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	0b c0       	rjmp	.+22     	; 0x366c <vfprintf+0x368>
    3656:	80 2f       	mov	r24, r16
    3658:	86 78       	andi	r24, 0x86	; 134
    365a:	91 f0       	breq	.+36     	; 0x3680 <vfprintf+0x37c>
    365c:	01 ff       	sbrs	r16, 1
    365e:	02 c0       	rjmp	.+4      	; 0x3664 <vfprintf+0x360>
    3660:	8b e2       	ldi	r24, 0x2B	; 43
    3662:	01 c0       	rjmp	.+2      	; 0x3666 <vfprintf+0x362>
    3664:	80 e2       	ldi	r24, 0x20	; 32
    3666:	f7 fc       	sbrc	r15, 7
    3668:	8d e2       	ldi	r24, 0x2D	; 45
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	b3 01       	movw	r22, r6
    366e:	0e 94 75 1b 	call	0x36ea	; 0x36ea <fputc>
    3672:	06 c0       	rjmp	.+12     	; 0x3680 <vfprintf+0x37c>
    3674:	80 e3       	ldi	r24, 0x30	; 48
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	b3 01       	movw	r22, r6
    367a:	0e 94 75 1b 	call	0x36ea	; 0x36ea <fputc>
    367e:	9a 94       	dec	r9
    3680:	d9 14       	cp	r13, r9
    3682:	c0 f3       	brcs	.-16     	; 0x3674 <vfprintf+0x370>
    3684:	da 94       	dec	r13
    3686:	f1 01       	movw	r30, r2
    3688:	ed 0d       	add	r30, r13
    368a:	f1 1d       	adc	r31, r1
    368c:	80 81       	ld	r24, Z
    368e:	90 e0       	ldi	r25, 0x00	; 0
    3690:	b3 01       	movw	r22, r6
    3692:	0e 94 75 1b 	call	0x36ea	; 0x36ea <fputc>
    3696:	dd 20       	and	r13, r13
    3698:	a9 f7       	brne	.-22     	; 0x3684 <vfprintf+0x380>
    369a:	06 c0       	rjmp	.+12     	; 0x36a8 <vfprintf+0x3a4>
    369c:	80 e2       	ldi	r24, 0x20	; 32
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	b3 01       	movw	r22, r6
    36a2:	0e 94 75 1b 	call	0x36ea	; 0x36ea <fputc>
    36a6:	ea 94       	dec	r14
    36a8:	ee 20       	and	r14, r14
    36aa:	c1 f7       	brne	.-16     	; 0x369c <vfprintf+0x398>
    36ac:	43 ce       	rjmp	.-890    	; 0x3334 <vfprintf+0x30>
    36ae:	f3 01       	movw	r30, r6
    36b0:	66 81       	ldd	r22, Z+6	; 0x06
    36b2:	77 81       	ldd	r23, Z+7	; 0x07
    36b4:	cb 01       	movw	r24, r22
    36b6:	2b 96       	adiw	r28, 0x0b	; 11
    36b8:	e2 e1       	ldi	r30, 0x12	; 18
    36ba:	0c 94 e2 18 	jmp	0x31c4	; 0x31c4 <__epilogue_restores__>

000036be <strnlen_P>:
    36be:	fc 01       	movw	r30, r24
    36c0:	05 90       	lpm	r0, Z+
    36c2:	61 50       	subi	r22, 0x01	; 1
    36c4:	70 40       	sbci	r23, 0x00	; 0
    36c6:	01 10       	cpse	r0, r1
    36c8:	d8 f7       	brcc	.-10     	; 0x36c0 <strnlen_P+0x2>
    36ca:	80 95       	com	r24
    36cc:	90 95       	com	r25
    36ce:	8e 0f       	add	r24, r30
    36d0:	9f 1f       	adc	r25, r31
    36d2:	08 95       	ret

000036d4 <strnlen>:
    36d4:	fc 01       	movw	r30, r24
    36d6:	61 50       	subi	r22, 0x01	; 1
    36d8:	70 40       	sbci	r23, 0x00	; 0
    36da:	01 90       	ld	r0, Z+
    36dc:	01 10       	cpse	r0, r1
    36de:	d8 f7       	brcc	.-10     	; 0x36d6 <strnlen+0x2>
    36e0:	80 95       	com	r24
    36e2:	90 95       	com	r25
    36e4:	8e 0f       	add	r24, r30
    36e6:	9f 1f       	adc	r25, r31
    36e8:	08 95       	ret

000036ea <fputc>:
    36ea:	0f 93       	push	r16
    36ec:	1f 93       	push	r17
    36ee:	cf 93       	push	r28
    36f0:	df 93       	push	r29
    36f2:	8c 01       	movw	r16, r24
    36f4:	eb 01       	movw	r28, r22
    36f6:	8b 81       	ldd	r24, Y+3	; 0x03
    36f8:	81 ff       	sbrs	r24, 1
    36fa:	1b c0       	rjmp	.+54     	; 0x3732 <fputc+0x48>
    36fc:	82 ff       	sbrs	r24, 2
    36fe:	0d c0       	rjmp	.+26     	; 0x371a <fputc+0x30>
    3700:	2e 81       	ldd	r18, Y+6	; 0x06
    3702:	3f 81       	ldd	r19, Y+7	; 0x07
    3704:	8c 81       	ldd	r24, Y+4	; 0x04
    3706:	9d 81       	ldd	r25, Y+5	; 0x05
    3708:	28 17       	cp	r18, r24
    370a:	39 07       	cpc	r19, r25
    370c:	64 f4       	brge	.+24     	; 0x3726 <fputc+0x3c>
    370e:	e8 81       	ld	r30, Y
    3710:	f9 81       	ldd	r31, Y+1	; 0x01
    3712:	01 93       	st	Z+, r16
    3714:	f9 83       	std	Y+1, r31	; 0x01
    3716:	e8 83       	st	Y, r30
    3718:	06 c0       	rjmp	.+12     	; 0x3726 <fputc+0x3c>
    371a:	e8 85       	ldd	r30, Y+8	; 0x08
    371c:	f9 85       	ldd	r31, Y+9	; 0x09
    371e:	80 2f       	mov	r24, r16
    3720:	09 95       	icall
    3722:	89 2b       	or	r24, r25
    3724:	31 f4       	brne	.+12     	; 0x3732 <fputc+0x48>
    3726:	8e 81       	ldd	r24, Y+6	; 0x06
    3728:	9f 81       	ldd	r25, Y+7	; 0x07
    372a:	01 96       	adiw	r24, 0x01	; 1
    372c:	9f 83       	std	Y+7, r25	; 0x07
    372e:	8e 83       	std	Y+6, r24	; 0x06
    3730:	02 c0       	rjmp	.+4      	; 0x3736 <fputc+0x4c>
    3732:	0f ef       	ldi	r16, 0xFF	; 255
    3734:	1f ef       	ldi	r17, 0xFF	; 255
    3736:	c8 01       	movw	r24, r16
    3738:	df 91       	pop	r29
    373a:	cf 91       	pop	r28
    373c:	1f 91       	pop	r17
    373e:	0f 91       	pop	r16
    3740:	08 95       	ret

00003742 <__ultoa_invert>:
    3742:	fa 01       	movw	r30, r20
    3744:	aa 27       	eor	r26, r26
    3746:	28 30       	cpi	r18, 0x08	; 8
    3748:	51 f1       	breq	.+84     	; 0x379e <__ultoa_invert+0x5c>
    374a:	20 31       	cpi	r18, 0x10	; 16
    374c:	81 f1       	breq	.+96     	; 0x37ae <__ultoa_invert+0x6c>
    374e:	e8 94       	clt
    3750:	6f 93       	push	r22
    3752:	6e 7f       	andi	r22, 0xFE	; 254
    3754:	6e 5f       	subi	r22, 0xFE	; 254
    3756:	7f 4f       	sbci	r23, 0xFF	; 255
    3758:	8f 4f       	sbci	r24, 0xFF	; 255
    375a:	9f 4f       	sbci	r25, 0xFF	; 255
    375c:	af 4f       	sbci	r26, 0xFF	; 255
    375e:	b1 e0       	ldi	r27, 0x01	; 1
    3760:	3e d0       	rcall	.+124    	; 0x37de <__ultoa_invert+0x9c>
    3762:	b4 e0       	ldi	r27, 0x04	; 4
    3764:	3c d0       	rcall	.+120    	; 0x37de <__ultoa_invert+0x9c>
    3766:	67 0f       	add	r22, r23
    3768:	78 1f       	adc	r23, r24
    376a:	89 1f       	adc	r24, r25
    376c:	9a 1f       	adc	r25, r26
    376e:	a1 1d       	adc	r26, r1
    3770:	68 0f       	add	r22, r24
    3772:	79 1f       	adc	r23, r25
    3774:	8a 1f       	adc	r24, r26
    3776:	91 1d       	adc	r25, r1
    3778:	a1 1d       	adc	r26, r1
    377a:	6a 0f       	add	r22, r26
    377c:	71 1d       	adc	r23, r1
    377e:	81 1d       	adc	r24, r1
    3780:	91 1d       	adc	r25, r1
    3782:	a1 1d       	adc	r26, r1
    3784:	20 d0       	rcall	.+64     	; 0x37c6 <__ultoa_invert+0x84>
    3786:	09 f4       	brne	.+2      	; 0x378a <__ultoa_invert+0x48>
    3788:	68 94       	set
    378a:	3f 91       	pop	r19
    378c:	2a e0       	ldi	r18, 0x0A	; 10
    378e:	26 9f       	mul	r18, r22
    3790:	11 24       	eor	r1, r1
    3792:	30 19       	sub	r19, r0
    3794:	30 5d       	subi	r19, 0xD0	; 208
    3796:	31 93       	st	Z+, r19
    3798:	de f6       	brtc	.-74     	; 0x3750 <__ultoa_invert+0xe>
    379a:	cf 01       	movw	r24, r30
    379c:	08 95       	ret
    379e:	46 2f       	mov	r20, r22
    37a0:	47 70       	andi	r20, 0x07	; 7
    37a2:	40 5d       	subi	r20, 0xD0	; 208
    37a4:	41 93       	st	Z+, r20
    37a6:	b3 e0       	ldi	r27, 0x03	; 3
    37a8:	0f d0       	rcall	.+30     	; 0x37c8 <__ultoa_invert+0x86>
    37aa:	c9 f7       	brne	.-14     	; 0x379e <__ultoa_invert+0x5c>
    37ac:	f6 cf       	rjmp	.-20     	; 0x379a <__ultoa_invert+0x58>
    37ae:	46 2f       	mov	r20, r22
    37b0:	4f 70       	andi	r20, 0x0F	; 15
    37b2:	40 5d       	subi	r20, 0xD0	; 208
    37b4:	4a 33       	cpi	r20, 0x3A	; 58
    37b6:	18 f0       	brcs	.+6      	; 0x37be <__ultoa_invert+0x7c>
    37b8:	49 5d       	subi	r20, 0xD9	; 217
    37ba:	31 fd       	sbrc	r19, 1
    37bc:	40 52       	subi	r20, 0x20	; 32
    37be:	41 93       	st	Z+, r20
    37c0:	02 d0       	rcall	.+4      	; 0x37c6 <__ultoa_invert+0x84>
    37c2:	a9 f7       	brne	.-22     	; 0x37ae <__ultoa_invert+0x6c>
    37c4:	ea cf       	rjmp	.-44     	; 0x379a <__ultoa_invert+0x58>
    37c6:	b4 e0       	ldi	r27, 0x04	; 4
    37c8:	a6 95       	lsr	r26
    37ca:	97 95       	ror	r25
    37cc:	87 95       	ror	r24
    37ce:	77 95       	ror	r23
    37d0:	67 95       	ror	r22
    37d2:	ba 95       	dec	r27
    37d4:	c9 f7       	brne	.-14     	; 0x37c8 <__ultoa_invert+0x86>
    37d6:	00 97       	sbiw	r24, 0x00	; 0
    37d8:	61 05       	cpc	r22, r1
    37da:	71 05       	cpc	r23, r1
    37dc:	08 95       	ret
    37de:	9b 01       	movw	r18, r22
    37e0:	ac 01       	movw	r20, r24
    37e2:	0a 2e       	mov	r0, r26
    37e4:	06 94       	lsr	r0
    37e6:	57 95       	ror	r21
    37e8:	47 95       	ror	r20
    37ea:	37 95       	ror	r19
    37ec:	27 95       	ror	r18
    37ee:	ba 95       	dec	r27
    37f0:	c9 f7       	brne	.-14     	; 0x37e4 <__ultoa_invert+0xa2>
    37f2:	62 0f       	add	r22, r18
    37f4:	73 1f       	adc	r23, r19
    37f6:	84 1f       	adc	r24, r20
    37f8:	95 1f       	adc	r25, r21
    37fa:	a0 1d       	adc	r26, r0
    37fc:	08 95       	ret

000037fe <_exit>:
    37fe:	f8 94       	cli

00003800 <__stop_program>:
    3800:	ff cf       	rjmp	.-2      	; 0x3800 <__stop_program>
